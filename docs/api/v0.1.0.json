{
  "info": {
    "version": "v0.1.0",
    "commit": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
  },
  "groups": {
    "blob": {
      "apis": {
        "git_blob": {
          "kind": "struct",
          "name": "git_blob",
          "referenceName": "struct git_blob",
          "opaque": true,
          "comment": [
            "In-memory representation of a blob object."
          ],
          "location": {
            "file": "blob.h",
            "line": 17,
            "column": 25
          },
          "group": "blob",
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_new",
            "git_blob_set_rawcontent_fromfile",
            "git_blob_set_rawcontent",
            "git_blob_rawcontent",
            "git_blob_rawsize"
          ]
        },
        "git_blob_lookup": {
          "kind": "function",
          "name": "git_blob_lookup",
          "location": {
            "file": "blob.h",
            "line": 29,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the looked up blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the blob."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the blob to locate."
            }
          ],
          "comment": [
            "Lookup a blob object from a repository.\n The generated blob object is owned by the revision\n repo and shall not be freed by the user."
          ],
          "group": "blob"
        },
        "git_blob_new": {
          "kind": "function",
          "name": "git_blob_new",
          "location": {
            "file": "blob.h",
            "line": 42,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the new blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository where the object will reside"
            }
          ],
          "comment": [
            "Create a new in-memory git_blob.",
            "The blob object must be manually filled using\n the 'set_rawcontent' methods before it can\n be written back to disk."
          ],
          "group": "blob"
        },
        "git_blob_set_rawcontent_fromfile": {
          "kind": "function",
          "name": "git_blob_set_rawcontent_fromfile",
          "location": {
            "file": "blob.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the new blob"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the file to read"
            }
          ],
          "comment": [
            "Fill a blob with the contents inside\n the pointed file."
          ],
          "group": "blob"
        },
        "git_blob_set_rawcontent": {
          "kind": "function",
          "name": "git_blob_set_rawcontent",
          "location": {
            "file": "blob.h",
            "line": 63,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            },
            {
              "name": "buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "buffer with the contents for the blob"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "size of the buffer"
            }
          ],
          "comment": [
            "Fill a blob with the contents inside\n the pointed buffer"
          ],
          "group": "blob"
        },
        "git_blob_rawcontent": {
          "kind": "function",
          "name": "git_blob_rawcontent",
          "location": {
            "file": "blob.h",
            "line": 76,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the pointer; NULL if the blob has no contents"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get a read-only buffer with the raw content of a blob.",
            "A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time (e.g. when changing the contents of the blob)."
          ],
          "group": "blob"
        },
        "git_blob_rawsize": {
          "kind": "function",
          "name": "git_blob_rawsize",
          "location": {
            "file": "blob.h",
            "line": 84,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "size on bytes"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get the size in bytes of the contents of a blob"
          ],
          "group": "blob"
        },
        "git_blob_writefile": {
          "kind": "function",
          "name": "git_blob_writefile",
          "location": {
            "file": "blob.h",
            "line": 95,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "written_id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the id of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the blob will be written"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "file from which the blob will be created"
            }
          ],
          "comment": [
            "Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob,\n if such doesn't exist yet."
          ],
          "group": "blob"
        }
      },
      "info": {
        "summary": "Git blob load and write routines"
      }
    },
    "commit": {
      "apis": {
        "git_commit": {
          "kind": "struct",
          "name": "git_commit",
          "referenceName": "struct git_commit",
          "opaque": true,
          "comment": [
            "Parsed representation of a commit object."
          ],
          "location": {
            "file": "commit.h",
            "line": 19,
            "column": 27
          },
          "group": "commit",
          "returnedBy": [
            "git_revwalk_next"
          ],
          "parameterTo": [
            "git_commit_lookup",
            "git_commit_new",
            "git_commit_id",
            "git_commit_message_short",
            "git_commit_message",
            "git_commit_time",
            "git_commit_committer",
            "git_commit_author",
            "git_commit_tree",
            "git_commit_add_parent",
            "git_commit_set_message",
            "git_commit_set_committer",
            "git_commit_set_author",
            "git_commit_set_tree",
            "git_revwalk_push",
            "git_revwalk_hide"
          ]
        },
        "git_commit_lookup": {
          "kind": "function",
          "name": "git_commit_lookup",
          "location": {
            "file": "commit.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the looked up commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the commit."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the commit to locate.  If the object is\n        an annotated tag it will be peeled back to the commit."
            }
          ],
          "comment": [
            "Lookup a commit object from a repository.\n The generated commit object is owned by the revision\n repo and shall not be freed by the user."
          ],
          "group": "commit"
        },
        "git_commit_new": {
          "kind": "function",
          "name": "git_commit_new",
          "location": {
            "file": "commit.h",
            "line": 45,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the new commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository where the object will reside"
            }
          ],
          "comment": [
            "Create a new in-memory git_commit.",
            "The commit object must be manually filled using\n setter methods before it can be written to its\n repository."
          ],
          "group": "commit"
        },
        "git_commit_id": {
          "kind": "function",
          "name": "git_commit_id",
          "location": {
            "file": "commit.h",
            "line": 52,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the commit."
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the id of a commit."
          ],
          "group": "commit"
        },
        "git_commit_message_short": {
          "kind": "function",
          "name": "git_commit_message_short",
          "location": {
            "file": "commit.h",
            "line": 59,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the short message of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the short (one line) message of a commit."
          ],
          "group": "commit"
        },
        "git_commit_message": {
          "kind": "function",
          "name": "git_commit_message",
          "location": {
            "file": "commit.h",
            "line": 66,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the message of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the full message of a commit."
          ],
          "group": "commit"
        },
        "git_commit_time": {
          "kind": "function",
          "name": "git_commit_time",
          "location": {
            "file": "commit.h",
            "line": 73,
            "column": 20
          },
          "returns": {
            "type": "time_t",
            "comment": "the time of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the commit time (i.e. committer time) of a commit."
          ],
          "group": "commit"
        },
        "git_commit_committer": {
          "kind": "function",
          "name": "git_commit_committer",
          "location": {
            "file": "commit.h",
            "line": 80,
            "column": 32
          },
          "returns": {
            "type": "const git_person *",
            "comment": "the committer of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the committer of a commit."
          ],
          "group": "commit"
        },
        "git_commit_author": {
          "kind": "function",
          "name": "git_commit_author",
          "location": {
            "file": "commit.h",
            "line": 87,
            "column": 32
          },
          "returns": {
            "type": "const git_person *",
            "comment": "the author of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the author of a commit."
          ],
          "group": "commit"
        },
        "git_commit_tree": {
          "kind": "function",
          "name": "git_commit_tree",
          "location": {
            "file": "commit.h",
            "line": 94,
            "column": 30
          },
          "returns": {
            "type": "const git_tree *",
            "comment": "the tree of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the tree pointed to by a commit."
          ],
          "group": "commit"
        },
        "git_commit_add_parent": {
          "kind": "function",
          "name": "git_commit_add_parent",
          "location": {
            "file": "commit.h",
            "line": 101,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "new_parent",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the new commit which will be a parent"
            }
          ],
          "comment": [
            "Add a new parent commit to an existing commit"
          ],
          "group": "commit"
        },
        "git_commit_set_message": {
          "kind": "function",
          "name": "git_commit_set_message",
          "location": {
            "file": "commit.h",
            "line": 108,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "the new message"
            }
          ],
          "comment": [
            "Set the message of a commit"
          ],
          "group": "commit"
        },
        "git_commit_set_committer": {
          "kind": "function",
          "name": "git_commit_set_committer",
          "location": {
            "file": "commit.h",
            "line": 117,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the new committer"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "email of the new committer"
            },
            {
              "name": "time",
              "type": "time_t",
              "direction": "in",
              "comment": "time when the committer committed the commit"
            }
          ],
          "comment": [
            "Set the committer of a commit"
          ],
          "group": "commit"
        },
        "git_commit_set_author": {
          "kind": "function",
          "name": "git_commit_set_author",
          "location": {
            "file": "commit.h",
            "line": 126,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the new author"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "email of the new author"
            },
            {
              "name": "time",
              "type": "time_t",
              "direction": "in",
              "comment": "time when the author created the commit"
            }
          ],
          "comment": [
            "Set the author of a commit"
          ],
          "group": "commit"
        },
        "git_commit_set_tree": {
          "kind": "function",
          "name": "git_commit_set_tree",
          "location": {
            "file": "commit.h",
            "line": 133,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit object"
            },
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "the new tree"
            }
          ],
          "comment": [
            "Set the tree which is pointed to by a commit"
          ],
          "group": "commit"
        }
      },
      "info": {
        "summary": "Git commit parsing, formatting routines"
      }
    },
    "common": {
      "apis": {
        "GIT_EXTERN(type)": {
          "kind": "macro",
          "name": "GIT_EXTERN(type)",
          "location": {
            "file": "common.h",
            "line": 21,
            "column": 10
          },
          "value": "extern __attribute__((visibility(\"default\"))) type",
          "comment": "Declare a public function exported for application use.",
          "group": "common"
        },
        "GIT_EXTERN_TLS(type)": {
          "kind": "macro",
          "name": "GIT_EXTERN_TLS(type)",
          "location": {
            "file": "common.h",
            "line": 31,
            "column": 10
          },
          "value": "extern __attribute__((visibility(\"default\"))) GIT_TLS type",
          "comment": "Declare a public TLS symbol exported for application use.",
          "group": "common"
        },
        "GIT_INLINE(type)": {
          "kind": "macro",
          "name": "GIT_INLINE(type)",
          "location": {
            "file": "common.h",
            "line": 38,
            "column": 10
          },
          "value": "static __inline type",
          "comment": "Declare a function as always inlined.",
          "group": "common"
        },
        "GIT_FORMAT_PRINTF(a,b)": {
          "kind": "macro",
          "name": "GIT_FORMAT_PRINTF(a,b)",
          "location": {
            "file": "common.h",
            "line": 45,
            "column": 10
          },
          "value": "__attribute__((format (printf, a, b)))",
          "comment": "Declare a function's takes printf style arguments.",
          "group": "common"
        },
        "GIT_SUCCESS": {
          "kind": "macro",
          "name": "GIT_SUCCESS",
          "location": {
            "file": "common.h",
            "line": 59,
            "column": 9
          },
          "value": "0",
          "comment": "Operation completed successfully.",
          "group": "common"
        },
        "GIT_ERROR": {
          "kind": "macro",
          "name": "GIT_ERROR",
          "location": {
            "file": "common.h",
            "line": 67,
            "column": 9
          },
          "value": "-1",
          "comment": "Operation failed, with unspecified reason. This value also serves as the base error code; all other error codes are subtracted from it such that all errors are < 0, in typical POSIX C tradition.",
          "group": "common"
        },
        "GIT_ENOTOID": {
          "kind": "macro",
          "name": "GIT_ENOTOID",
          "location": {
            "file": "common.h",
            "line": 70,
            "column": 9
          },
          "value": "(GIT_ERROR - 1)",
          "comment": "Input was not a properly formatted Git object id.",
          "group": "common"
        },
        "GIT_ENOTFOUND": {
          "kind": "macro",
          "name": "GIT_ENOTFOUND",
          "location": {
            "file": "common.h",
            "line": 73,
            "column": 9
          },
          "value": "(GIT_ERROR - 2)",
          "comment": "Input does not exist in the scope searched.",
          "group": "common"
        },
        "GIT_ENOMEM": {
          "kind": "macro",
          "name": "GIT_ENOMEM",
          "location": {
            "file": "common.h",
            "line": 76,
            "column": 9
          },
          "value": "(GIT_ERROR - 3)",
          "comment": "Not enough space available.",
          "group": "common"
        },
        "GIT_EOSERR": {
          "kind": "macro",
          "name": "GIT_EOSERR",
          "location": {
            "file": "common.h",
            "line": 79,
            "column": 9
          },
          "value": "(GIT_ERROR - 4)",
          "comment": "Consult the OS error information.",
          "group": "common"
        },
        "GIT_EOBJTYPE": {
          "kind": "macro",
          "name": "GIT_EOBJTYPE",
          "location": {
            "file": "common.h",
            "line": 82,
            "column": 9
          },
          "value": "(GIT_ERROR - 5)",
          "comment": "The specified object is of invalid type",
          "group": "common"
        },
        "GIT_EOBJCORRUPTED": {
          "kind": "macro",
          "name": "GIT_EOBJCORRUPTED",
          "location": {
            "file": "common.h",
            "line": 85,
            "column": 9
          },
          "value": "(GIT_ERROR - 6)",
          "comment": "The specified object has its data corrupted",
          "group": "common"
        },
        "GIT_ENOTAREPO": {
          "kind": "macro",
          "name": "GIT_ENOTAREPO",
          "location": {
            "file": "common.h",
            "line": 88,
            "column": 9
          },
          "value": "(GIT_ERROR - 7)",
          "comment": "The specified repository is invalid",
          "group": "common"
        },
        "GIT_EINVALIDTYPE": {
          "kind": "macro",
          "name": "GIT_EINVALIDTYPE",
          "location": {
            "file": "common.h",
            "line": 91,
            "column": 9
          },
          "value": "(GIT_ERROR - 8)",
          "comment": "The object type is invalid or doesn't match",
          "group": "common"
        },
        "GIT_EMISSINGOBJDATA": {
          "kind": "macro",
          "name": "GIT_EMISSINGOBJDATA",
          "location": {
            "file": "common.h",
            "line": 94,
            "column": 9
          },
          "value": "(GIT_ERROR - 9)",
          "comment": "The object cannot be written that because it's missing internal data",
          "group": "common"
        },
        "GIT_EPACKCORRUPTED": {
          "kind": "macro",
          "name": "GIT_EPACKCORRUPTED",
          "location": {
            "file": "common.h",
            "line": 97,
            "column": 9
          },
          "value": "(GIT_ERROR - 10)",
          "comment": "The packfile for the ODB is corrupted",
          "group": "common"
        },
        "GIT_EFLOCKFAIL": {
          "kind": "macro",
          "name": "GIT_EFLOCKFAIL",
          "location": {
            "file": "common.h",
            "line": 100,
            "column": 9
          },
          "value": "(GIT_ERROR - 11)",
          "comment": "Failed to adquire or release a file lock",
          "group": "common"
        },
        "GIT_EZLIB": {
          "kind": "macro",
          "name": "GIT_EZLIB",
          "location": {
            "file": "common.h",
            "line": 103,
            "column": 9
          },
          "value": "(GIT_ERROR - 12)",
          "comment": "The Z library failed to inflate/deflate an object's data",
          "group": "common"
        },
        "GIT_EBUSY": {
          "kind": "macro",
          "name": "GIT_EBUSY",
          "location": {
            "file": "common.h",
            "line": 106,
            "column": 9
          },
          "value": "(GIT_ERROR - 13)",
          "comment": "The queried object is currently busy",
          "group": "common"
        },
        "GIT_EBAREINDEX": {
          "kind": "macro",
          "name": "GIT_EBAREINDEX",
          "location": {
            "file": "common.h",
            "line": 109,
            "column": 9
          },
          "value": "(GIT_ERROR -14)",
          "comment": "The index file is not backed up by an existing repository",
          "group": "common"
        },
        "git_repository": {
          "kind": "struct",
          "name": "git_repository",
          "referenceName": "struct git_repository",
          "opaque": true,
          "comment": [
            "Representation of an existing git repository,\n including all its object contents"
          ],
          "location": {
            "file": "common.h",
            "line": 118,
            "column": 31
          },
          "group": "common",
          "returnedBy": [
            "git_object_owner",
            "git_revwalk_repository"
          ],
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_new",
            "git_blob_writefile",
            "git_commit_lookup",
            "git_commit_new",
            "git_index_open_inrepo",
            "git_repository_open",
            "git_repository_lookup",
            "git_repository_database",
            "git_repository_index",
            "git_repository_newobject",
            "git_repository_free",
            "git_revwalk_new"
          ]
        },
        "git_object": {
          "kind": "struct",
          "name": "git_object",
          "referenceName": "struct git_object",
          "opaque": true,
          "comment": [
            "Representation of a generic object in a repository"
          ],
          "location": {
            "file": "common.h",
            "line": 121,
            "column": 27
          },
          "group": "common",
          "parameterTo": [
            "git_repository_lookup",
            "git_repository_newobject",
            "git_object_write",
            "git_object_id",
            "git_object_type",
            "git_object_owner",
            "git_object_free"
          ]
        },
        "git_person": {
          "kind": "struct",
          "name": "git_person",
          "referenceName": "struct git_person",
          "opaque": true,
          "comment": [
            "Parsed representation of a person"
          ],
          "location": {
            "file": "common.h",
            "line": 125,
            "column": 27
          },
          "group": "common",
          "returnedBy": [
            "git_commit_committer",
            "git_commit_author"
          ],
          "parameterTo": [
            "git_person_name",
            "git_person_email",
            "git_person_time"
          ]
        },
        "git_person_name": {
          "kind": "function",
          "name": "git_person_name",
          "location": {
            "file": "common.h",
            "line": 127,
            "column": 13
          },
          "returns": {
            "type": "const char *"
          },
          "params": [
            {
              "name": "person",
              "type": "git_person *"
            }
          ],
          "group": "common"
        },
        "git_person_email": {
          "kind": "function",
          "name": "git_person_email",
          "location": {
            "file": "common.h",
            "line": 128,
            "column": 13
          },
          "returns": {
            "type": "const char *"
          },
          "params": [
            {
              "name": "person",
              "type": "git_person *"
            }
          ],
          "group": "common"
        },
        "git_person_time": {
          "kind": "function",
          "name": "git_person_time",
          "location": {
            "file": "common.h",
            "line": 129,
            "column": 8
          },
          "returns": {
            "type": "time_t"
          },
          "params": [
            {
              "name": "person",
              "type": "git_person *"
            }
          ],
          "group": "common"
        }
      },
      "info": {
        "details": "#define GIT_EBAREINDEX (GIT_ERROR -14)"
      }
    },
    "errors": {
      "apis": {
        "git_errno": {
          "kind": "macro",
          "name": "git_errno",
          "location": {
            "file": "errors.h",
            "line": 19,
            "column": 10
          },
          "value": "(*git__errno_storage())",
          "comment": "",
          "group": "errors"
        },
        "git_strerror": {
          "kind": "function",
          "name": "git_strerror",
          "location": {
            "file": "errors.h",
            "line": 29,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a string explaining the error code"
          },
          "params": [
            {
              "name": "num",
              "type": "int",
              "direction": "in",
              "comment": "The error code to explain"
            }
          ],
          "comment": [
            "strerror() for the Git library"
          ],
          "group": "errors"
        }
      },
      "info": {
        "summary": "Git error handling routines and variables"
      }
    },
    "index": {
      "apis": {
        "git_index": {
          "kind": "struct",
          "name": "git_index",
          "referenceName": "struct git_index",
          "opaque": true,
          "comment": [
            "Memory representation of an index file."
          ],
          "location": {
            "file": "index.h",
            "line": 18,
            "column": 26
          },
          "group": "index",
          "returnedBy": [
            "git_repository_index"
          ],
          "parameterTo": [
            "git_index_open_bare",
            "git_index_open_inrepo",
            "git_index_clear",
            "git_index_free",
            "git_index_read",
            "git_index_write",
            "git_index_find",
            "git_index_add",
            "git_index_remove",
            "git_index_insert",
            "git_index_get",
            "git_index_entrycount"
          ]
        },
        "git_index_time": {
          "kind": "struct",
          "name": "git_index_time",
          "referenceName": "git_index_time",
          "comment": [
            "Time used in a git index entry"
          ],
          "members": [
            {
              "name": "seconds",
              "type": "uint32_t"
            },
            {
              "name": "nanoseconds",
              "type": "uint32_t"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 22,
            "column": 9
          },
          "group": "index"
        },
        "git_index_entry": {
          "kind": "struct",
          "name": "git_index_entry",
          "referenceName": "git_index_entry",
          "comment": [
            "Memory representation of a file entry in the index."
          ],
          "members": [
            {
              "name": "ctime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "mtime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "dev",
              "type": "uint32_t"
            },
            {
              "name": "ino",
              "type": "uint32_t"
            },
            {
              "name": "mode",
              "type": "uint32_t"
            },
            {
              "name": "uid",
              "type": "uint32_t"
            },
            {
              "name": "gid",
              "type": "uint32_t"
            },
            {
              "name": "file_size",
              "type": "uint32_t"
            },
            {
              "name": "oid",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "flags",
              "type": "uint16_t"
            },
            {
              "name": "flags_extended",
              "type": "uint16_t"
            },
            {
              "name": "path",
              "type": "char *"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 28,
            "column": 16
          },
          "group": "index",
          "returnedBy": [
            "git_index_get"
          ],
          "parameterTo": [
            "git_index_insert"
          ]
        },
        "git_index_open_bare": {
          "kind": "function",
          "name": "git_index_open_bare",
          "location": {
            "file": "index.h",
            "line": 61,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index **",
              "direction": "in",
              "comment": "the pointer for the new index"
            },
            {
              "name": "index_path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the index file in disk"
            }
          ],
          "comment": [
            "Create a new Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.",
            "Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code."
          ],
          "group": "index"
        },
        "git_index_open_inrepo": {
          "kind": "function",
          "name": "git_index_open_inrepo",
          "location": {
            "file": "index.h",
            "line": 71,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index **"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the git repo which owns the index"
            }
          ],
          "comment": [
            "Open the Index inside the git repository pointed\n by 'repo'."
          ],
          "group": "index"
        },
        "git_index_clear": {
          "kind": "function",
          "name": "git_index_clear",
          "location": {
            "file": "index.h",
            "line": 80,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect."
          ],
          "group": "index"
        },
        "git_index_free": {
          "kind": "function",
          "name": "git_index_free",
          "location": {
            "file": "index.h",
            "line": 87,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Free an existing index object."
          ],
          "group": "index"
        },
        "git_index_read": {
          "kind": "function",
          "name": "git_index_read",
          "location": {
            "file": "index.h",
            "line": 96,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Update the contents of an existing index object in memory\n by reading from the hard disk."
          ],
          "group": "index"
        },
        "git_index_write": {
          "kind": "function",
          "name": "git_index_write",
          "location": {
            "file": "index.h",
            "line": 105,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Write an existing index object from memory back to disk\n using an atomic file lock."
          ],
          "group": "index"
        },
        "git_index_find": {
          "kind": "function",
          "name": "git_index_find",
          "location": {
            "file": "index.h",
            "line": 115,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "an index >= 0 if found, -1 otherwise"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Find the first index of any entires which point to given\n path in the Git index."
          ],
          "group": "index"
        },
        "git_index_add": {
          "kind": "function",
          "name": "git_index_add",
          "location": {
            "file": "index.h",
            "line": 125,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "filename to add"
            },
            {
              "name": "stage",
              "type": "int",
              "direction": "in",
              "comment": "stage for the entry"
            }
          ],
          "comment": [
            "Add or update an index entry from a file in disk."
          ],
          "group": "index"
        },
        "git_index_remove": {
          "kind": "function",
          "name": "git_index_remove",
          "location": {
            "file": "index.h",
            "line": 134,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "position",
              "type": "int",
              "direction": "in",
              "comment": "position of the entry to remove"
            }
          ],
          "comment": [
            "Remove an entry from the index"
          ],
          "group": "index"
        },
        "git_index_insert": {
          "kind": "function",
          "name": "git_index_insert",
          "location": {
            "file": "index.h",
            "line": 147,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, otherwise an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "source_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "new entry object"
            }
          ],
          "comment": [
            "Insert an entry into the index.\n A full copy (including the 'path' string) of the given\n 'source_entry' will be inserted on the index; if the index\n already contains an entry for the same path, the entry\n will be updated."
          ],
          "group": "index"
        },
        "git_index_get": {
          "kind": "function",
          "name": "git_index_get",
          "location": {
            "file": "index.h",
            "line": 159,
            "column": 31
          },
          "returns": {
            "type": "git_index_entry *",
            "comment": "a pointer to the entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "int",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get a pointer to one of the entries in the index",
            "This entry can be modified, and the changes will be written\n back to disk on the next write() call."
          ],
          "group": "index"
        },
        "git_index_entrycount": {
          "kind": "function",
          "name": "git_index_entrycount",
          "location": {
            "file": "index.h",
            "line": 167,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "integer of count of current entries"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the count of entries currently in the index"
          ],
          "group": "index"
        }
      },
      "info": {
        "summary": "Git index parsing and manipulation routines"
      }
    },
    "odb": {
      "apis": {
        "git_odb": {
          "kind": "struct",
          "name": "git_odb",
          "referenceName": "struct git_odb",
          "opaque": true,
          "comment": [
            "An open object database handle."
          ],
          "location": {
            "file": "odb.h",
            "line": 18,
            "column": 24
          },
          "group": "odb",
          "returnedBy": [
            "git_repository_database"
          ],
          "parameterTo": [
            "git_odb_open",
            "git_odb_close",
            "git_odb_read",
            "git_odb_read_header",
            "git_odb__read_packed",
            "git_odb__read_loose",
            "git_odb_write",
            "git_odb_exists"
          ]
        },
        "git_odb_open": {
          "kind": "function",
          "name": "git_odb_open",
          "location": {
            "file": "odb.h",
            "line": 28,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_SUCCESS if the database opened; otherwise an error\n         code describing why the open was not possible."
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n            Set to NULL if the open failed."
            },
            {
              "name": "objects_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "path of the database's \"objects\" directory."
            }
          ],
          "comment": [
            "Open an object database for read/write access."
          ],
          "group": "odb"
        },
        "git_odb_close": {
          "kind": "function",
          "name": "git_odb_close",
          "location": {
            "file": "odb.h",
            "line": 34,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database pointer to close.  If NULL no action is taken."
            }
          ],
          "comment": [
            "Close an open object database."
          ],
          "group": "odb"
        },
        "git_otype": {
          "kind": "enum",
          "name": "git_otype",
          "referenceName": "git_otype",
          "members": [
            {
              "name": "GIT_OBJ_ANY",
              "value": "-2",
              "comment": [
                "Object can be any of the following"
              ]
            },
            {
              "name": "GIT_OBJ_BAD",
              "value": "-1",
              "comment": [
                "Object is invalid."
              ]
            },
            {
              "name": "GIT_OBJ__EXT1",
              "value": "0",
              "comment": [
                "Reserved for future use."
              ]
            },
            {
              "name": "GIT_OBJ_COMMIT",
              "value": "1",
              "comment": [
                "A commit object."
              ]
            },
            {
              "name": "GIT_OBJ_TREE",
              "value": "2",
              "comment": [
                "A tree (directory listing) object."
              ]
            },
            {
              "name": "GIT_OBJ_BLOB",
              "value": "3",
              "comment": [
                "A file revision object."
              ]
            },
            {
              "name": "GIT_OBJ_TAG",
              "value": "4",
              "comment": [
                "An annotated tag object."
              ]
            },
            {
              "name": "GIT_OBJ__EXT2",
              "value": "5",
              "comment": [
                "Reserved for future use."
              ]
            },
            {
              "name": "GIT_OBJ_OFS_DELTA",
              "value": "6",
              "comment": [
                "A delta, base is given by an offset."
              ]
            },
            {
              "name": "GIT_OBJ_REF_DELTA",
              "value": "7",
              "comment": [
                "A delta, base is given by object id."
              ]
            }
          ],
          "comment": [
            "Basic type (loose or packed) of any Git object."
          ],
          "location": {
            "file": "odb.h",
            "line": 37,
            "column": 9
          },
          "group": "odb",
          "returnedBy": [
            "git_obj_string_to_type",
            "git_object_type"
          ],
          "parameterTo": [
            "git_obj_type_to_string",
            "git_obj__loose_object_type",
            "git_repository_lookup",
            "git_repository_newobject"
          ]
        },
        "git_rawobj": {
          "kind": "struct",
          "name": "git_rawobj",
          "referenceName": "git_rawobj",
          "comment": [
            "An object read from the database."
          ],
          "members": [
            {
              "name": "data",
              "type": "void *",
              "comment": [
                "Raw, decompressed object data."
              ]
            },
            {
              "name": "len",
              "type": "size_t",
              "comment": [
                "Total number of bytes in data."
              ]
            },
            {
              "name": "type",
              "type": "git_otype",
              "comment": [
                "Type of this object."
              ],
              "referenceType": "enum git_otype"
            }
          ],
          "location": {
            "file": "odb.h",
            "line": 51,
            "column": 9
          },
          "group": "odb",
          "parameterTo": [
            "git_odb_read",
            "git_odb_read_header",
            "git_odb__read_packed",
            "git_odb__read_loose",
            "git_odb_write",
            "git_obj_close",
            "git_obj_hash"
          ]
        },
        "git_odb_read": {
          "kind": "function",
          "name": "git_odb_read",
          "location": {
            "file": "odb.h",
            "line": 69,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to populate upon reading."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read an object from the database.",
            "If GIT_ENOTFOUND then out->data is set to NULL."
          ],
          "group": "odb"
        },
        "git_odb_read_header": {
          "kind": "function",
          "name": "git_odb_read_header",
          "location": {
            "file": "odb.h",
            "line": 88,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to populate upon reading."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read the header of an object from the database, without\n reading its full contents.",
            "Only the 'type' and 'len' fields of the git_rawobj structure\n are filled. The 'data' pointer will always be NULL.",
            "The raw object pointed by 'out' doesn't need to be manually\n closed with git_obj_close()."
          ],
          "group": "odb"
        },
        "git_odb__read_packed": {
          "kind": "function",
          "name": "git_odb__read_packed",
          "location": {
            "file": "odb.h",
            "line": 102,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was read.\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to populate upon reading."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read an object from the database using only pack files.",
            "If GIT_ENOTFOUND then out->data is set to NULL."
          ],
          "group": "odb"
        },
        "git_odb__read_loose": {
          "kind": "function",
          "name": "git_odb__read_loose",
          "location": {
            "file": "odb.h",
            "line": 116,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was read.\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to populate upon reading."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read an object from the database using only loose object files.",
            "If GIT_ENOTFOUND then out->data is set to NULL."
          ],
          "group": "odb"
        },
        "git_odb_write": {
          "kind": "function",
          "name": "git_odb_write",
          "location": {
            "file": "odb.h",
            "line": 128,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object was written;\n - GIT_ERROR otherwise."
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "identity of the object written."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to which the object should be written."
            },
            {
              "name": "obj",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor for the object to write."
            }
          ],
          "comment": [
            "Write an object to the database."
          ],
          "group": "odb"
        },
        "git_obj_close": {
          "kind": "function",
          "name": "git_obj_close",
          "location": {
            "file": "odb.h",
            "line": 139,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "obj",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "object descriptor to free."
            }
          ],
          "comment": [
            "Release all memory used by the obj structure.",
            "As a result of this call, obj->data will be set to NULL.",
            "If obj->data is already NULL, nothing happens."
          ],
          "group": "odb"
        },
        "git_obj_type_to_string": {
          "kind": "function",
          "name": "git_obj_type_to_string",
          "location": {
            "file": "odb.h",
            "line": 154,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the corresponding string representation."
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to convert.",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Convert an object type to it's string representation.",
            "The result is a pointer to a string in static memory and\n should not be free()'ed."
          ],
          "group": "odb"
        },
        "git_obj_string_to_type": {
          "kind": "function",
          "name": "git_obj_string_to_type",
          "location": {
            "file": "odb.h",
            "line": 162,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the corresponding git_otype."
          },
          "params": [
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "the string to convert."
            }
          ],
          "comment": [
            "Convert a string object type representation to it's git_otype."
          ],
          "group": "odb"
        },
        "git_obj__loose_object_type": {
          "kind": "function",
          "name": "git_obj__loose_object_type",
          "location": {
            "file": "odb.h",
            "line": 171,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "true if the type represents a valid loose object type,\n false otherwise."
          },
          "params": [
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "object type to test.",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Determine if the given git_otype is a valid loose object type."
          ],
          "group": "odb"
        },
        "git_obj_hash": {
          "kind": "function",
          "name": "git_obj_hash",
          "location": {
            "file": "odb.h",
            "line": 185,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- GIT_SUCCESS if the object-ID was correctly determined.\n - GIT_ERROR if the given object is malformed."
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the resulting object-ID."
            },
            {
              "name": "obj",
              "type": "git_rawobj *",
              "direction": "in",
              "comment": "the object whose hash is to be determined."
            }
          ],
          "comment": [
            "Determine the object-ID (sha1 hash) of the given git_rawobj.",
            "The input obj must be a valid loose object type and the data\n pointer must not be NULL, unless the len field is also zero."
          ],
          "group": "odb"
        },
        "git_odb_exists": {
          "kind": "function",
          "name": "git_odb_exists",
          "location": {
            "file": "odb.h",
            "line": 196,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- true, if the object was found\n - false, otherwise"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to be searched for the given object."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the object to search for."
            }
          ],
          "comment": [
            "Determine if the given object can be found in the object database."
          ],
          "group": "odb"
        }
      },
      "info": {
        "summary": "Git object database routines"
      }
    },
    "oid": {
      "apis": {
        "GIT_OID_RAWSZ": {
          "kind": "macro",
          "name": "GIT_OID_RAWSZ",
          "location": {
            "file": "oid.h",
            "line": 17,
            "column": 9
          },
          "value": "20",
          "comment": "Size (in bytes) of a raw/binary oid",
          "group": "oid"
        },
        "GIT_OID_HEXSZ": {
          "kind": "macro",
          "name": "GIT_OID_HEXSZ",
          "location": {
            "file": "oid.h",
            "line": 20,
            "column": 9
          },
          "value": "(GIT_OID_RAWSZ * 2)",
          "comment": "Size (in bytes) of a hex formatted oid",
          "group": "oid"
        },
        "git_oid": {
          "kind": "struct",
          "name": "git_oid",
          "referenceName": "git_oid",
          "comment": [
            "Unique identity of any object (commit, tree, blob, tag)."
          ],
          "members": [
            {
              "name": "id",
              "type": "unsigned char[20]",
              "comment": [
                "raw binary formatted id"
              ]
            }
          ],
          "location": {
            "file": "oid.h",
            "line": 23,
            "column": 9
          },
          "group": "oid",
          "returnedBy": [
            "git_commit_id",
            "git_object_id"
          ],
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_writefile",
            "git_commit_lookup",
            "git_odb_read",
            "git_odb_read_header",
            "git_odb__read_packed",
            "git_odb__read_loose",
            "git_odb_write",
            "git_obj_hash",
            "git_odb_exists",
            "git_oid_mkstr",
            "git_oid_mkraw",
            "git_oid_fmt",
            "git_oid_pathfmt",
            "git_oid_allocfmt",
            "git_oid_to_string",
            "git_oid_cpy",
            "git_oid_cmp",
            "git_repository_lookup"
          ]
        },
        "git_oid_mkstr": {
          "kind": "function",
          "name": "git_oid_mkstr",
          "location": {
            "file": "oid.h",
            "line": 36,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "GIT_SUCCESS if valid; GIT_ENOTOID on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes)."
            }
          ],
          "comment": [
            "Parse a hex formatted object id into a git_oid."
          ],
          "group": "oid"
        },
        "git_oid_mkraw": {
          "kind": "function",
          "name": "git_oid_mkraw",
          "location": {
            "file": "oid.h",
            "line": 43,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "raw",
              "type": "const unsigned char *",
              "direction": "in",
              "comment": "the raw input bytes to be copied."
            }
          ],
          "comment": [
            "Copy an already raw oid into a git_oid structure."
          ],
          "group": "oid"
        },
        "git_oid_fmt": {
          "kind": "function",
          "name": "git_oid_fmt",
          "location": {
            "file": "oid.h",
            "line": 57,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "str",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).  Only the\n        oid digits are written; a '\n\\\n0' terminator must be added\n        by the caller if it is required."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a hex string."
          ],
          "group": "oid"
        },
        "git_oid_pathfmt": {
          "kind": "function",
          "name": "git_oid_pathfmt",
          "location": {
            "file": "oid.h",
            "line": 72,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "str",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (41 bytes).  Only the\n        oid digits are written; a '\n\\\n0' terminator must be added\n        by the caller if it is required."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a loose-object path string.\n \n\n The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits."
          ],
          "group": "oid"
        },
        "git_oid_allocfmt": {
          "kind": "function",
          "name": "git_oid_allocfmt",
          "location": {
            "file": "oid.h",
            "line": 80,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the c-string; NULL if memory is exhausted.  Caller must\n         deallocate the string with free()."
          },
          "params": [
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid structure to format"
            }
          ],
          "comment": [
            "Format a gid_oid into a newly allocated c-string."
          ],
          "group": "oid"
        },
        "git_oid_to_string": {
          "kind": "function",
          "name": "git_oid_to_string",
          "location": {
            "file": "oid.h",
            "line": 97,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the out buffer pointer, assuming no input parameter\n         errors, otherwise a pointer to an empty string."
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "the buffer into which the oid string is output."
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the size of the out buffer."
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a buffer as a hex format c-string.\n \n\n If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed."
          ],
          "group": "oid"
        },
        "git_oid_cpy": {
          "kind": "function",
          "name": "git_oid_cpy",
          "location": {
            "file": "oid.h",
            "line": 104,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "src",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to copy from."
            }
          ],
          "comment": [
            "Copy an oid from one structure to another."
          ],
          "group": "oid"
        },
        "git_oid_cmp": {
          "kind": "function",
          "name": "git_oid_cmp",
          "location": {
            "file": "oid.h",
            "line": 115,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "<\n0, 0, >0 if a \n<\n b, a == b, a > b."
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "first oid structure."
            },
            {
              "name": "b",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "second oid structure."
            }
          ],
          "comment": [
            "Compare two oid structures."
          ],
          "group": "oid"
        }
      },
      "info": {
        "summary": "Git object id routines"
      }
    },
    "repository": {
      "apis": {
        "git_repository_open": {
          "kind": "function",
          "name": "git_repository_open",
          "location": {
            "file": "repository.h",
            "line": 41,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the new repository handle; NULL on error"
          },
          "params": [
            {
              "name": "repository",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be opened"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the repository"
            }
          ],
          "comment": [
            "Open a git repository.",
            "The 'path' argument must point to an existing git repository\n folder, e.g.",
            "/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD",
            "/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD",
            "The method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither."
          ],
          "group": "repository"
        },
        "git_repository_lookup": {
          "kind": "function",
          "name": "git_repository_lookup",
          "location": {
            "file": "repository.h",
            "line": 61,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "a reference to the object"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the looked-up object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the object"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the unique identifier for the object"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "the type of the object",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Lookup a reference to one of the objects in the repostory.",
            "The generated reference is owned by the repository and\n should not be freed by the user.",
            "The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type."
          ],
          "group": "repository"
        },
        "git_repository_database": {
          "kind": "function",
          "name": "git_repository_database",
          "location": {
            "file": "repository.h",
            "line": 69,
            "column": 23
          },
          "returns": {
            "type": "git_odb *",
            "comment": "a pointer to the object db"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            }
          ],
          "comment": [
            "Get the object database behind a Git repository"
          ],
          "group": "repository"
        },
        "git_repository_index": {
          "kind": "function",
          "name": "git_repository_index",
          "location": {
            "file": "repository.h",
            "line": 78,
            "column": 25
          },
          "returns": {
            "type": "git_index *",
            "comment": "a pointer to the Index object; \n\tNULL if the index cannot be opened"
          },
          "params": [
            {
              "name": "rpeo",
              "type": "git_repository *"
            }
          ],
          "comment": [
            "Get the Index file of a Git repository"
          ],
          "group": "repository"
        },
        "git_repository_newobject": {
          "kind": "function",
          "name": "git_repository_newobject",
          "location": {
            "file": "repository.h",
            "line": 101,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the new object"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the new object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where the object belongs"
            },
            {
              "name": "type",
              "type": "git_otype",
              "direction": "in",
              "comment": "Type of the object to be created",
              "referenceType": "enum git_otype"
            }
          ],
          "comment": [
            "Create a new in-memory repository object with\n the given type.",
            "The object's attributes can be filled in using the\n corresponding setter methods.",
            "The object will be written back to given git_repository\n when the git_object_write() function is called; objects\n cannot be written to disk until all their main\n attributes have been properly filled.",
            "Objects are instantiated with no SHA1 id; their id\n will be automatically generated when writing to the\n repository."
          ],
          "group": "repository"
        },
        "git_object_write": {
          "kind": "function",
          "name": "git_object_write",
          "location": {
            "file": "repository.h",
            "line": 120,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; otherwise an error code"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object *",
              "direction": "in",
              "comment": "Git object to write back"
            }
          ],
          "comment": [
            "Write back an object to disk.",
            "The object will be written to its corresponding\n repository.",
            "If the object has no changes since it was first\n read from the repository, no actions will take place.",
            "If the object has been modified since it was read from\n the repository, or it has been created from scratch\n in memory, it will be written to the repository and\n its SHA1 ID will be updated accordingly."
          ],
          "group": "repository"
        },
        "git_object_id": {
          "kind": "function",
          "name": "git_object_id",
          "location": {
            "file": "repository.h",
            "line": 131,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the SHA1 id"
          },
          "params": [
            {
              "name": "obj",
              "type": "git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the id (SHA1) of a repository object",
            "In-memory objects created by git_object_new() do not\n have a SHA1 ID until they are written on a repository."
          ],
          "group": "repository"
        },
        "git_object_type": {
          "kind": "function",
          "name": "git_object_type",
          "location": {
            "file": "repository.h",
            "line": 139,
            "column": 23
          },
          "returns": {
            "type": "git_otype",
            "comment": "the object's type"
          },
          "params": [
            {
              "name": "obj",
              "type": "git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the object type of an object"
          ],
          "group": "repository"
        },
        "git_object_owner": {
          "kind": "function",
          "name": "git_object_owner",
          "location": {
            "file": "repository.h",
            "line": 147,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository who owns this object"
          },
          "params": [
            {
              "name": "obj",
              "type": "git_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Get the repository that owns this object"
          ],
          "group": "repository"
        },
        "git_object_free": {
          "kind": "function",
          "name": "git_object_free",
          "location": {
            "file": "repository.h",
            "line": 161,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object *",
              "direction": "in",
              "comment": "the object to free"
            }
          ],
          "comment": [
            "Free a reference to one of the objects in the repository.",
            "Repository objects are managed automatically by the library,\n but this method can be used to force freeing one of the\n objects.",
            "Careful: freeing objects in the middle of a repository\n traversal will most likely cause errors."
          ],
          "group": "repository"
        },
        "git_repository_free": {
          "kind": "function",
          "name": "git_repository_free",
          "location": {
            "file": "repository.h",
            "line": 167,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository handle to close. If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a previously allocated repository"
          ],
          "group": "repository"
        }
      },
      "info": {
        "summary": "Git revision object management routines"
      }
    },
    "revwalk": {
      "apis": {
        "GIT_SORT_NONE": {
          "kind": "macro",
          "name": "GIT_SORT_NONE",
          "location": {
            "file": "revwalk.h",
            "line": 23,
            "column": 9
          },
          "value": "(0)",
          "comment": "Sort the repository contents in no particular ordering; this sorting is arbitrary, implementation-specific and subject to change at any time. This is the default sorting for new walkers.",
          "group": "revwalk"
        },
        "GIT_SORT_TOPOLOGICAL": {
          "kind": "macro",
          "name": "GIT_SORT_TOPOLOGICAL",
          "location": {
            "file": "revwalk.h",
            "line": 30,
            "column": 9
          },
          "value": "(1 << 0)",
          "comment": "Sort the repository contents in topological order (parents before children); this sorting mode can be combined with time sorting.",
          "group": "revwalk"
        },
        "GIT_SORT_TIME": {
          "kind": "macro",
          "name": "GIT_SORT_TIME",
          "location": {
            "file": "revwalk.h",
            "line": 37,
            "column": 9
          },
          "value": "(1 << 1)",
          "comment": "Sort the repository contents by commit time; this sorting mode can be combined with topological sorting.",
          "group": "revwalk"
        },
        "GIT_SORT_REVERSE": {
          "kind": "macro",
          "name": "GIT_SORT_REVERSE",
          "location": {
            "file": "revwalk.h",
            "line": 44,
            "column": 9
          },
          "value": "(1 << 2)",
          "comment": "Iterate through the repository contents in reverse order; this sorting mode can be combined with any of the above.",
          "group": "revwalk"
        },
        "git_revwalk": {
          "kind": "struct",
          "name": "git_revwalk",
          "referenceName": "struct git_revwalk",
          "opaque": true,
          "location": {
            "file": "revwalk.h",
            "line": 46,
            "column": 28
          },
          "group": "revwalk",
          "parameterTo": [
            "git_revwalk_new",
            "git_revwalk_reset",
            "git_revwalk_push",
            "git_revwalk_hide",
            "git_revwalk_next",
            "git_revwalk_sorting",
            "git_revwalk_free",
            "git_revwalk_repository"
          ]
        },
        "git_revwalk_new": {
          "kind": "function",
          "name": "git_revwalk_new",
          "location": {
            "file": "revwalk.h",
            "line": 55,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "walker",
              "type": "git_revwalk **",
              "direction": "in",
              "comment": "pointer to the new revision walker"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to walk through"
            }
          ],
          "comment": [
            "Allocate a new revision walker to iterate through a repo."
          ],
          "group": "revwalk"
        },
        "git_revwalk_reset": {
          "kind": "function",
          "name": "git_revwalk_reset",
          "location": {
            "file": "revwalk.h",
            "line": 61,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walker",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "handle to reset."
            }
          ],
          "comment": [
            "Reset the walking machinery for reuse."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push": {
          "kind": "function",
          "name": "git_revwalk_push",
          "location": {
            "file": "revwalk.h",
            "line": 70,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to start from."
            }
          ],
          "comment": [
            "Mark a commit to start traversal from.\n The commit object must belong to the repo which is being walked through."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide": {
          "kind": "function",
          "name": "git_revwalk_hide",
          "location": {
            "file": "revwalk.h",
            "line": 77,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit that will be ignored during the traversal"
            }
          ],
          "comment": [
            "Mark a commit (and its ancestors) uninteresting for the output."
          ],
          "group": "revwalk"
        },
        "git_revwalk_next": {
          "kind": "function",
          "name": "git_revwalk_next",
          "location": {
            "file": "revwalk.h",
            "line": 84,
            "column": 26
          },
          "returns": {
            "type": "git_commit *",
            "comment": "next commit; NULL if there is no more output."
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker to pop the commit from."
            }
          ],
          "comment": [
            "Get the next commit from the revision traversal."
          ],
          "group": "revwalk"
        },
        "git_revwalk_sorting": {
          "kind": "function",
          "name": "git_revwalk_sorting",
          "location": {
            "file": "revwalk.h",
            "line": 93,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "sort_mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "combination of GIT_RPSORT_XXX flags"
            }
          ],
          "comment": [
            "Change the sorting mode when iterating through the\n repository's contents.\n Changing the sorting mode resets the walker."
          ],
          "group": "revwalk"
        },
        "git_revwalk_free": {
          "kind": "function",
          "name": "git_revwalk_free",
          "location": {
            "file": "revwalk.h",
            "line": 99,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "traversal handle to close.  If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a revwalk previously allocated."
          ],
          "group": "revwalk"
        },
        "git_revwalk_repository": {
          "kind": "function",
          "name": "git_revwalk_repository",
          "location": {
            "file": "revwalk.h",
            "line": 108,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository being walked"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the revision walker"
            }
          ],
          "comment": [
            "Return the repository on which this walker\n is operating."
          ],
          "group": "revwalk"
        }
      },
      "info": {
        "summary": "Git revision traversal routines"
      }
    },
    "thread-utils": {
      "apis": {
        "GIT_HAS_TLS": {
          "kind": "macro",
          "name": "GIT_HAS_TLS",
          "location": {
            "file": "thread-utils.h",
            "line": 10,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "thread-utils"
        },
        "GIT_HAS_PTHREAD": {
          "kind": "macro",
          "name": "GIT_HAS_PTHREAD",
          "location": {
            "file": "thread-utils.h",
            "line": 11,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "thread-utils"
        },
        "GIT_TLS": {
          "kind": "macro",
          "name": "GIT_TLS",
          "location": {
            "file": "thread-utils.h",
            "line": 21,
            "column": 10
          },
          "value": "__thread",
          "comment": "",
          "group": "thread-utils"
        },
        "GIT_THREADS": {
          "kind": "macro",
          "name": "GIT_THREADS",
          "location": {
            "file": "thread-utils.h",
            "line": 51,
            "column": 10
          },
          "value": "1",
          "comment": "",
          "group": "thread-utils"
        }
      },
      "info": {}
    }
  }
}
