{
  "info": {
    "version": "v1.1.0",
    "commit": "7f4fa178629d559c037a1f72f79f79af9c1ef8ce"
  },
  "groups": {
    "sys/alloc": {
      "apis": {
        "git_allocator": {
          "kind": "struct",
          "name": "git_allocator",
          "referenceName": "git_allocator",
          "comment": [
            "An instance for a custom memory allocator",
            "Setting the pointers of this structure allows the developer to implement\n custom memory allocators. The global memory allocator can be set by using\n \"GIT_OPT_SET_ALLOCATOR\" with the `git_libgit2_opts` function. Keep in mind\n that all fields need to be set to a proper function."
          ],
          "members": [
            {
              "name": "gmalloc",
              "type": "void *(*)(size_t, const char *, int)",
              "comment": [
                "Allocate `n` bytes of memory"
              ]
            },
            {
              "name": "gcalloc",
              "type": "void *(*)(size_t, size_t, const char *, int)",
              "comment": [
                "Allocate memory for an array of `nelem` elements, where each element\n has a size of `elsize`. Returned memory shall be initialized to\n all-zeroes"
              ]
            },
            {
              "name": "gstrdup",
              "type": "char *(*)(const char *, const char *, int)",
              "comment": [
                "Allocate memory for the string `str` and duplicate its contents."
              ]
            },
            {
              "name": "gstrndup",
              "type": "char *(*)(const char *, size_t, const char *, int)",
              "comment": [
                "Equivalent to the `gstrdup` function, but only duplicating at most\n `n + 1` bytes"
              ]
            },
            {
              "name": "gsubstrdup",
              "type": "char *(*)(const char *, size_t, const char *, int)",
              "comment": [
                "Equivalent to `gstrndup`, but will always duplicate exactly `n` bytes\n of `str`. Thus, out of bounds reads at `str` may happen."
              ]
            },
            {
              "name": "grealloc",
              "type": "void *(*)(void *, size_t, const char *, int)",
              "comment": [
                "This function shall deallocate the old object `ptr` and return a\n pointer to a new object that has the size specified by `size`. In\n case `ptr` is `NULL`, a new array shall be allocated."
              ]
            },
            {
              "name": "greallocarray",
              "type": "void *(*)(void *, size_t, size_t, const char *, int)",
              "comment": [
                "This function shall be equivalent to `grealloc`, but allocating\n `neleme * elsize` bytes."
              ]
            },
            {
              "name": "gmallocarray",
              "type": "void *(*)(size_t, size_t, const char *, int)",
              "comment": [
                "This function shall allocate a new array of `nelem` elements, where\n each element has a size of `elsize` bytes."
              ]
            },
            {
              "name": "gfree",
              "type": "void (*)(void *)",
              "comment": [
                "This function shall free the memory pointed to by `ptr`. In case\n `ptr` is `NULL`, this shall be a no-op."
              ]
            }
          ],
          "location": {
            "file": "sys/alloc.h",
            "line": 23,
            "column": 9
          },
          "group": "sys/alloc",
          "parameterTo": [
            "git_stdalloc_init_allocator",
            "git_win32_crtdbg_init_allocator"
          ]
        },
        "git_stdalloc_init_allocator": {
          "kind": "function",
          "name": "git_stdalloc_init_allocator",
          "location": {
            "file": "sys/alloc.h",
            "line": 85,
            "column": 5
          },
          "returns": {
            "type": "int",
            "comment": "An error code or 0."
          },
          "params": [
            {
              "name": "allocator",
              "type": "git_allocator *",
              "direction": "in",
              "comment": "The allocator that is to be initialized."
            }
          ],
          "comment": [
            "Initialize the allocator structure to use the `stdalloc` pointer.",
            "Set up the structure so that all of its members are using the standard\n \"stdalloc\" allocator functions. The structure can then be used with\n `git_allocator_setup`."
          ],
          "group": "sys/alloc"
        },
        "git_win32_crtdbg_init_allocator": {
          "kind": "function",
          "name": "git_win32_crtdbg_init_allocator",
          "location": {
            "file": "sys/alloc.h",
            "line": 97,
            "column": 5
          },
          "returns": {
            "type": "int",
            "comment": "An error code or 0."
          },
          "params": [
            {
              "name": "allocator",
              "type": "git_allocator *",
              "direction": "in",
              "comment": "The allocator that is to be initialized."
            }
          ],
          "comment": [
            "Initialize the allocator structure to use the `crtdbg` pointer.",
            "Set up the structure so that all of its members are using the \"crtdbg\"\n allocator functions. Note that this allocator is only available on Windows\n platforms and only if libgit2 is being compiled with \"-DMSVC_CRTDBG\"."
          ],
          "group": "sys/alloc"
        }
      },
      "info": {}
    },
    "annotated_commit": {
      "apis": {
        "git_annotated_commit_from_ref": {
          "kind": "function",
          "name": "git_annotated_commit_from_ref",
          "location": {
            "file": "annotated_commit.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_annotated_commit **",
              "direction": "in",
              "comment": "pointer to store the git_annotated_commit result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository that contains the given reference"
            },
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "reference to use to lookup the git_annotated_commit"
            }
          ],
          "comment": [
            "Creates a `git_annotated_commit` from the given reference.\n The resulting git_annotated_commit must be freed with\n `git_annotated_commit_free`."
          ],
          "group": "annotated_commit"
        },
        "git_annotated_commit_from_fetchhead": {
          "kind": "function",
          "name": "git_annotated_commit_from_fetchhead",
          "location": {
            "file": "annotated_commit.h",
            "line": 50,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_annotated_commit **",
              "direction": "in",
              "comment": "pointer to store the git_annotated_commit result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository that contains the given commit"
            },
            {
              "name": "branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the (remote) branch"
            },
            {
              "name": "remote_url",
              "type": "const char *",
              "direction": "in",
              "comment": "url of the remote"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the commit object id of the remote branch"
            }
          ],
          "comment": [
            "Creates a `git_annotated_commit` from the given fetch head data.\n The resulting git_annotated_commit must be freed with\n `git_annotated_commit_free`."
          ],
          "group": "annotated_commit"
        },
        "git_annotated_commit_lookup": {
          "kind": "function",
          "name": "git_annotated_commit_lookup",
          "location": {
            "file": "annotated_commit.h",
            "line": 75,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_annotated_commit **",
              "direction": "in",
              "comment": "pointer to store the git_annotated_commit result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository that contains the given commit"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the commit object id to lookup"
            }
          ],
          "comment": [
            "Creates a `git_annotated_commit` from the given commit id.\n The resulting git_annotated_commit must be freed with\n `git_annotated_commit_free`.",
            "An annotated commit contains information about how it was\n looked up, which may be useful for functions like merge or\n rebase to provide context to the operation.  For example,\n conflict files will include the name of the source or target\n branches being merged.  It is therefore preferable to use the\n most specific function (eg `git_annotated_commit_from_ref`)\n instead of this one when that data is known."
          ],
          "group": "annotated_commit"
        },
        "git_annotated_commit_from_revspec": {
          "kind": "function",
          "name": "git_annotated_commit_from_revspec",
          "location": {
            "file": "annotated_commit.h",
            "line": 92,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_annotated_commit **",
              "direction": "in",
              "comment": "pointer to store the git_annotated_commit result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository that contains the given commit"
            },
            {
              "name": "revspec",
              "type": "const char *",
              "direction": "in",
              "comment": "the extended sha syntax string to use to lookup the commit"
            }
          ],
          "comment": [
            "Creates a `git_annotated_commit` from a revision string.",
            "See `man gitrevisions`, or\n http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for\n information on the syntax accepted."
          ],
          "group": "annotated_commit"
        },
        "git_annotated_commit_id": {
          "kind": "function",
          "name": "git_annotated_commit_id",
          "location": {
            "file": "annotated_commit.h",
            "line": 103,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "commit id"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_annotated_commit *",
              "direction": "in",
              "comment": "the given annotated commit"
            }
          ],
          "comment": [
            "Gets the commit ID that the given `git_annotated_commit` refers to."
          ],
          "group": "annotated_commit"
        },
        "git_annotated_commit_ref": {
          "kind": "function",
          "name": "git_annotated_commit_ref",
          "location": {
            "file": "annotated_commit.h",
            "line": 112,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "ref name."
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_annotated_commit *",
              "direction": "in",
              "comment": "the given annotated commit"
            }
          ],
          "comment": [
            "Get the refname that the given `git_annotated_commit` refers to."
          ],
          "group": "annotated_commit"
        },
        "git_annotated_commit_free": {
          "kind": "function",
          "name": "git_annotated_commit_free",
          "location": {
            "file": "annotated_commit.h",
            "line": 120,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_annotated_commit *",
              "direction": "in",
              "comment": "annotated commit to free"
            }
          ],
          "comment": [
            "Frees a `git_annotated_commit`."
          ],
          "group": "annotated_commit"
        },
        "git_annotated_commit": {
          "kind": "struct",
          "name": "git_annotated_commit",
          "referenceName": "struct git_annotated_commit",
          "opaque": true,
          "comment": [
            "Annotated commits, the input to merge and rebase."
          ],
          "location": {
            "file": "types.h",
            "line": 189,
            "column": 37
          },
          "group": "annotated_commit",
          "parameterTo": [
            "git_annotated_commit_from_ref",
            "git_annotated_commit_from_fetchhead",
            "git_annotated_commit_lookup",
            "git_annotated_commit_from_revspec",
            "git_annotated_commit_id",
            "git_annotated_commit_ref",
            "git_annotated_commit_free",
            "git_branch_create_from_annotated",
            "git_merge_analysis",
            "git_merge_analysis_for_ref",
            "git_merge",
            "git_rebase_init",
            "git_repository_set_head_detached_from_annotated",
            "git_reset_from_annotated"
          ]
        }
      },
      "info": {
        "summary": "Git annotated commit routines"
      }
    },
    "apply": {
      "apis": {
        "git_apply_delta_cb": {
          "kind": "callback",
          "name": "git_apply_delta_cb",
          "type": "int (*)(const git_diff_delta *, void *)",
          "comment": [
            "When applying a patch, callback that will be made per delta (file).",
            "When the callback:\n - returns \n<\n 0, the apply process will be aborted.\n - returns > 0, the delta will not be applied, but the apply process\n      continues\n - returns 0, the delta is applied, and the apply process continues."
          ],
          "location": {
            "file": "apply.h",
            "line": 36,
            "column": 26
          },
          "params": [
            {
              "name": "delta",
              "direction": "in",
              "comment": "The delta to be applied",
              "type": "const git_diff_delta *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "User-specified payload",
              "type": "void *"
            }
          ],
          "group": "apply",
          "typedef": true
        },
        "git_apply_hunk_cb": {
          "kind": "callback",
          "name": "git_apply_hunk_cb",
          "type": "int (*)(const git_diff_hunk *, void *)",
          "comment": [
            "When applying a patch, callback that will be made per hunk.",
            "When the callback:\n - returns \n<\n 0, the apply process will be aborted.\n - returns > 0, the hunk will not be applied, but the apply process\n      continues\n - returns 0, the hunk is applied, and the apply process continues."
          ],
          "location": {
            "file": "apply.h",
            "line": 52,
            "column": 26
          },
          "params": [
            {
              "name": "hunk",
              "direction": "in",
              "comment": "The hunk to be applied",
              "type": "const git_diff_hunk *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "User-specified payload",
              "type": "void *"
            }
          ],
          "group": "apply",
          "typedef": true
        },
        "git_apply_flags_t": {
          "kind": "enum",
          "name": "git_apply_flags_t",
          "referenceName": "git_apply_flags_t",
          "members": [
            {
              "name": "GIT_APPLY_CHECK",
              "value": "1",
              "comment": [
                "Don't actually make changes, just test that the patch applies.\n This is the equivalent of `git apply --check`."
              ]
            }
          ],
          "comment": [
            "Flags controlling the behavior of git_apply"
          ],
          "location": {
            "file": "apply.h",
            "line": 57,
            "column": 9
          },
          "group": "apply"
        },
        "git_apply_options": {
          "kind": "struct",
          "name": "git_apply_options",
          "referenceName": "git_apply_options",
          "comment": [
            "Apply options structure",
            "Initialize with `GIT_APPLY_OPTIONS_INIT`. Alternatively, you can\n use `git_apply_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The version"
              ]
            },
            {
              "name": "delta_cb",
              "type": "git_apply_delta_cb",
              "comment": [
                "When applying a patch, callback that will be made per delta (file)."
              ],
              "referenceType": "int (*)(const git_diff_delta *, void *)"
            },
            {
              "name": "hunk_cb",
              "type": "git_apply_hunk_cb",
              "comment": [
                "When applying a patch, callback that will be made per hunk."
              ],
              "referenceType": "int (*)(const git_diff_hunk *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "Payload passed to both delta_cb \n&\n hunk_cb."
              ]
            },
            {
              "name": "flags",
              "type": "unsigned int",
              "comment": [
                "Bitmask of git_apply_flags_t"
              ]
            }
          ],
          "location": {
            "file": "apply.h",
            "line": 73,
            "column": 9
          },
          "see": [
            "git_apply_to_tree, git_apply"
          ],
          "group": "apply",
          "parameterTo": [
            "git_apply_options_init",
            "git_apply_to_tree",
            "git_apply"
          ]
        },
        "GIT_APPLY_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_APPLY_OPTIONS_VERSION",
          "location": {
            "file": "apply.h",
            "line": 89,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "apply"
        },
        "GIT_APPLY_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_APPLY_OPTIONS_INIT",
          "location": {
            "file": "apply.h",
            "line": 90,
            "column": 9
          },
          "value": "{GIT_APPLY_OPTIONS_VERSION}",
          "comment": "",
          "group": "apply"
        },
        "git_apply_options_init": {
          "kind": "function",
          "name": "git_apply_options_init",
          "location": {
            "file": "apply.h",
            "line": 92,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_apply_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "apply"
        },
        "git_apply_to_tree": {
          "kind": "function",
          "name": "git_apply_to_tree",
          "location": {
            "file": "apply.h",
            "line": 104,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "the postimage of the application"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to apply"
            },
            {
              "name": "preimage",
              "type": "git_tree *",
              "direction": "in",
              "comment": "the tree to apply the diff to"
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "the diff to apply"
            },
            {
              "name": "options",
              "type": "const git_apply_options *",
              "direction": "in",
              "comment": "the options for the apply (or null for defaults)"
            }
          ],
          "comment": [
            "Apply a `git_diff` to a `git_tree`, and return the resulting image\n as an index."
          ],
          "group": "apply"
        },
        "git_apply_location_t": {
          "kind": "enum",
          "name": "git_apply_location_t",
          "referenceName": "git_apply_location_t",
          "members": [
            {
              "name": "GIT_APPLY_LOCATION_WORKDIR",
              "value": "0",
              "comment": [
                "Apply the patch to the workdir, leaving the index untouched.\n This is the equivalent of `git apply` with no location argument."
              ]
            },
            {
              "name": "GIT_APPLY_LOCATION_INDEX",
              "value": "1",
              "comment": [
                "Apply the patch to the index, leaving the working directory\n untouched.  This is the equivalent of `git apply --cached`."
              ]
            },
            {
              "name": "GIT_APPLY_LOCATION_BOTH",
              "value": "2",
              "comment": [
                "Apply the patch to both the working directory and the index.\n This is the equivalent of `git apply --index`."
              ]
            }
          ],
          "comment": [
            "Possible application locations for git_apply"
          ],
          "location": {
            "file": "apply.h",
            "line": 112,
            "column": 9
          },
          "group": "apply",
          "parameterTo": [
            "git_apply"
          ]
        },
        "git_apply": {
          "kind": "function",
          "name": "git_apply",
          "location": {
            "file": "apply.h",
            "line": 141,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to apply to"
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "the diff to apply"
            },
            {
              "name": "location",
              "type": "git_apply_location_t",
              "direction": "in",
              "comment": "the location to apply (workdir, index or both)",
              "referenceType": "enum git_apply_location_t"
            },
            {
              "name": "options",
              "type": "const git_apply_options *",
              "direction": "in",
              "comment": "the options for the apply (or null for defaults)"
            }
          ],
          "comment": [
            "Apply a `git_diff` to the given repository, making changes directly\n in the working directory, the index, or both."
          ],
          "group": "apply"
        }
      },
      "info": {
        "summary": "Git patch application routines"
      }
    },
    "attr": {
      "apis": {
        "GIT_ATTR_IS_TRUE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_IS_TRUE(attr)",
          "location": {
            "file": "attr.h",
            "line": 33,
            "column": 9
          },
          "value": "(git_attr_value(attr) == GIT_ATTR_VALUE_TRUE)",
          "comment": "GIT_ATTR_TRUE checks if an attribute is set on.  In core git parlance, this the value for \"Set\" attributes. For example, if the attribute file contains: *.c foo Then for file `xyz.c` looking up attribute \"foo\" gives a value for which `GIT_ATTR_TRUE(value)` is true.",
          "group": "attr"
        },
        "GIT_ATTR_IS_FALSE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_IS_FALSE(attr)",
          "location": {
            "file": "attr.h",
            "line": 47,
            "column": 9
          },
          "value": "(git_attr_value(attr) == GIT_ATTR_VALUE_FALSE)",
          "comment": "GIT_ATTR_FALSE checks if an attribute is set off.  In core git parlance, this is the value for attributes that are \"Unset\" (not to be confused with values that a \"Unspecified\"). For example, if the attribute file contains: *.h -foo Then for file `zyx.h` looking up attribute \"foo\" gives a value for which `GIT_ATTR_FALSE(value)` is true.",
          "group": "attr"
        },
        "GIT_ATTR_IS_UNSPECIFIED(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_IS_UNSPECIFIED(attr)",
          "location": {
            "file": "attr.h",
            "line": 65,
            "column": 9
          },
          "value": "(git_attr_value(attr) == GIT_ATTR_VALUE_UNSPECIFIED)",
          "comment": "GIT_ATTR_UNSPECIFIED checks if an attribute is unspecified.  This may be due to the attribute not being mentioned at all or because the attribute was explicitly set unspecified via the `!` operator. For example, if the attribute file contains: *.c foo *.h -foo onefile.c !foo Then for `onefile.c` looking up attribute \"foo\" yields a value with `GIT_ATTR_UNSPECIFIED(value)` of true.  Also, looking up \"foo\" on file `onefile.rb` or looking up \"bar\" on any file will all give `GIT_ATTR_UNSPECIFIED(value)` of true.",
          "group": "attr"
        },
        "GIT_ATTR_HAS_VALUE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_HAS_VALUE(attr)",
          "location": {
            "file": "attr.h",
            "line": 77,
            "column": 9
          },
          "value": "(git_attr_value(attr) == GIT_ATTR_VALUE_STRING)",
          "comment": "GIT_ATTR_HAS_VALUE checks if an attribute is set to a value (as opposed to TRUE, FALSE or UNSPECIFIED).  This would be the case if for a file with something like: *.txt eol=lf Given this, looking up \"eol\" for `onefile.txt` will give back the string \"lf\" and `GIT_ATTR_SET_TO_VALUE(attr)` will return true.",
          "group": "attr"
        },
        "git_attr_value_t": {
          "kind": "enum",
          "name": "git_attr_value_t",
          "referenceName": "git_attr_value_t",
          "members": [
            {
              "name": "GIT_ATTR_VALUE_UNSPECIFIED",
              "value": "0",
              "comment": [
                "The attribute has been left unspecified"
              ]
            },
            {
              "name": "GIT_ATTR_VALUE_TRUE",
              "comment": [
                "The attribute has been set"
              ]
            },
            {
              "name": "GIT_ATTR_VALUE_FALSE",
              "comment": [
                "The attribute has been unset"
              ]
            },
            {
              "name": "GIT_ATTR_VALUE_STRING",
              "comment": [
                "This attribute has a value"
              ]
            }
          ],
          "comment": [
            "Possible states for an attribute"
          ],
          "location": {
            "file": "attr.h",
            "line": 82,
            "column": 9
          },
          "group": "attr",
          "returnedBy": [
            "git_attr_value"
          ]
        },
        "git_attr_value": {
          "kind": "function",
          "name": "git_attr_value",
          "location": {
            "file": "attr.h",
            "line": 102,
            "column": 30
          },
          "returns": {
            "type": "git_attr_value_t",
            "comment": "the value type for the attribute"
          },
          "params": [
            {
              "name": "attr",
              "type": "const char *",
              "direction": "in",
              "comment": "The attribute"
            }
          ],
          "comment": [
            "Return the value type for a given attribute.",
            "This can be either `TRUE`, `FALSE`, `UNSPECIFIED` (if the attribute\n was not set at all), or `VALUE`, if the attribute was set to an\n actual string.",
            "If the attribute has a `VALUE` string, it can be accessed normally\n as a NULL-terminated C string."
          ],
          "group": "attr"
        },
        "GIT_ATTR_CHECK_FILE_THEN_INDEX": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_FILE_THEN_INDEX",
          "location": {
            "file": "attr.h",
            "line": 117,
            "column": 9
          },
          "value": "0",
          "comment": "Check attribute flags: Reading values from index and working directory. When checking attributes, it is possible to check attribute files in both the working directory (if there is one) and the index (if there is one).  You can explicitly choose where to check and in which order using the following flags. Core git usually checks the working directory then the index, except during a checkout when it checks the index first.  It will use index only for creating archives or for a bare repo (if an index has been specified for the bare repo).",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_INDEX_THEN_FILE": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_INDEX_THEN_FILE",
          "location": {
            "file": "attr.h",
            "line": 118,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_INDEX_ONLY": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_INDEX_ONLY",
          "location": {
            "file": "attr.h",
            "line": 119,
            "column": 9
          },
          "value": "2",
          "comment": "",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_NO_SYSTEM": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_NO_SYSTEM",
          "location": {
            "file": "attr.h",
            "line": 134,
            "column": 9
          },
          "value": "(1 << 2)",
          "comment": "Check attribute flags: controlling extended attribute behavior. Normally, attribute checks include looking in the /etc (or system equivalent) directory for a `gitattributes` file.  Passing this flag will cause attribute checks to ignore that file. equivalent) directory for a `gitattributes` file.  Passing the `GIT_ATTR_CHECK_NO_SYSTEM` flag will cause attribute checks to ignore that file. Passing the `GIT_ATTR_CHECK_INCLUDE_HEAD` flag will use attributes from a `.gitattributes` file in the repository at the HEAD revision.",
          "group": "attr"
        },
        "GIT_ATTR_CHECK_INCLUDE_HEAD": {
          "kind": "macro",
          "name": "GIT_ATTR_CHECK_INCLUDE_HEAD",
          "location": {
            "file": "attr.h",
            "line": 135,
            "column": 9
          },
          "value": "(1 << 3)",
          "comment": "",
          "group": "attr"
        },
        "git_attr_get": {
          "kind": "function",
          "name": "git_attr_get",
          "location": {
            "file": "attr.h",
            "line": 152,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "value_out",
              "type": "const char **",
              "direction": "in",
              "comment": "Output of the value of the attribute.  Use the GIT_ATTR_...\n             macros to test for TRUE, FALSE, UNSPECIFIED, etc. or just\n             use the string value for attributes set to a value.  You\n             should NOT modify or free this value."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the path."
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "A combination of GIT_ATTR_CHECK... flags."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to check for attributes.  Relative paths are\n             interpreted relative to the repo root.  The file does\n             not have to exist, but if it does not, then it will be\n             treated as a plain file (not a directory)."
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the attribute to look up."
            }
          ],
          "comment": [
            "Look up the value of one git attribute for path."
          ],
          "group": "attr"
        },
        "git_attr_get_many": {
          "kind": "function",
          "name": "git_attr_get_many",
          "location": {
            "file": "attr.h",
            "line": 188,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "values_out",
              "type": "const char **",
              "direction": "in",
              "comment": "An array of num_attr entries that will have string\n             pointers written into it for the values of the attributes.\n             You should not modify or free the values that are written\n             into this array (although of course, you should free the\n             array itself if you allocated it)."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the path."
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "A combination of GIT_ATTR_CHECK... flags."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path inside the repo to check attributes.  This\n             does not have to exist, but if it does not, then\n             it will be treated as a plain file (i.e. not a directory)."
            },
            {
              "name": "num_attr",
              "type": "size_t",
              "direction": "in",
              "comment": "The number of attributes being looked up"
            },
            {
              "name": "names",
              "type": "const char **",
              "direction": "in",
              "comment": "An array of num_attr strings containing attribute names."
            }
          ],
          "comment": [
            "Look up a list of git attributes for path.",
            "Use this if you have a known list of attributes that you want to\n look up in a single call.  This is somewhat more efficient than\n calling `git_attr_get()` multiple times.",
            "For example, you might write:",
            "const char *attrs[] = { \"crlf\", \"diff\", \"foo\" };\n     const char **values[3];\n     git_attr_get_many(values, repo, 0, \"my/fun/file.c\", 3, attrs);",
            "Then you could loop through the 3 values to get the settings for\n the three attributes you asked about."
          ],
          "group": "attr"
        },
        "git_attr_foreach_cb": {
          "kind": "callback",
          "name": "git_attr_foreach_cb",
          "type": "int (*)(const char *, const char *, void *)",
          "comment": [
            "The callback used with git_attr_foreach.",
            "This callback will be invoked only once per attribute name, even if there\n are multiple rules for a given file. The highest priority rule will be\n used."
          ],
          "location": {
            "file": "attr.h",
            "line": 212,
            "column": 26
          },
          "see": [
            "git_attr_foreach."
          ],
          "params": [
            {
              "name": "name",
              "direction": "in",
              "comment": "The attribute name.",
              "type": "const char *"
            },
            {
              "name": "value",
              "direction": "in",
              "comment": "The attribute value. May be NULL if the attribute is explicitly\n              set to UNSPECIFIED using the '!' sign.",
              "type": "const char *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "A user-specified pointer.",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0 to continue looping, non-zero to stop. This value will be returned\n         from git_attr_foreach.",
            "type": "int"
          },
          "group": "attr",
          "parameterTo": [
            "git_attr_foreach"
          ],
          "typedef": true
        },
        "git_attr_foreach": {
          "kind": "function",
          "name": "git_attr_foreach",
          "location": {
            "file": "attr.h",
            "line": 227,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the path."
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "A combination of GIT_ATTR_CHECK... flags."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path inside the repo to check attributes.  This does not have\n             to exist, but if it does not, then it will be treated as a\n             plain file (i.e. not a directory)."
            },
            {
              "name": "callback",
              "type": "git_attr_foreach_cb",
              "direction": "in",
              "comment": "Function to invoke on each attribute name and value.\n                 See git_attr_foreach_cb.",
              "referenceType": "int (*)(const char *, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Passed on as extra parameter to callback function."
            }
          ],
          "comment": [
            "Loop over all the git attributes for a path."
          ],
          "group": "attr"
        },
        "git_attr_cache_flush": {
          "kind": "function",
          "name": "git_attr_cache_flush",
          "location": {
            "file": "attr.h",
            "line": 245,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the gitattributes cache"
            }
          ],
          "comment": [
            "Flush the gitattributes cache.",
            "Call this if you have reason to believe that the attributes files on\n disk no longer match the cached contents of memory.  This will cause\n the attributes files to be reloaded the next time that an attribute\n access function is called."
          ],
          "group": "attr"
        },
        "git_attr_add_macro": {
          "kind": "function",
          "name": "git_attr_add_macro",
          "location": {
            "file": "attr.h",
            "line": 258,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "name",
              "type": "const char *"
            },
            {
              "name": "values",
              "type": "const char *"
            }
          ],
          "comment": [
            "Add a macro definition.",
            "Macros will automatically be loaded from the top level `.gitattributes`\n file of the repository (plus the build-in \"binary\" macro).  This\n function allows you to add others.  For example, to add the default\n macro, you would call:",
            "git_attr_add_macro(repo, \"binary\", \"-diff -crlf\");"
          ],
          "group": "attr"
        }
      },
      "info": {
        "summary": "Git attribute management routines"
      }
    },
    "blame": {
      "apis": {
        "git_blame_flag_t": {
          "kind": "enum",
          "name": "git_blame_flag_t",
          "referenceName": "git_blame_flag_t",
          "members": [
            {
              "name": "GIT_BLAME_NORMAL",
              "value": "0",
              "comment": [
                "Normal blame, the default"
              ]
            },
            {
              "name": "GIT_BLAME_TRACK_COPIES_SAME_FILE",
              "value": "1",
              "comment": [
                "Track lines that have moved within a file (like `git blame -M`).\n NOT IMPLEMENTED."
              ]
            },
            {
              "name": "GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES",
              "value": "2",
              "comment": [
                "Track lines that have moved across files in the same commit (like `git blame -C`).\n NOT IMPLEMENTED."
              ]
            },
            {
              "name": "GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES",
              "value": "4",
              "comment": [
                "Track lines that have been copied from another file that exists in the\n same commit (like `git blame -CC`). Implies SAME_FILE.\n NOT IMPLEMENTED."
              ]
            },
            {
              "name": "GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES",
              "value": "8",
              "comment": [
                "Track lines that have been copied from another file that exists in *any*\n commit (like `git blame -CCC`). Implies SAME_COMMIT_COPIES.\n NOT IMPLEMENTED."
              ]
            },
            {
              "name": "GIT_BLAME_FIRST_PARENT",
              "value": "16",
              "comment": [
                "Restrict the search of commits to those reachable following only the\n first parents."
              ]
            },
            {
              "name": "GIT_BLAME_USE_MAILMAP",
              "value": "32",
              "comment": [
                "Use mailmap file to map author and committer names and email addresses\n to canonical real names and email addresses. The mailmap will be read\n from the working directory, or HEAD in a bare repository."
              ]
            },
            {
              "name": "GIT_BLAME_IGNORE_WHITESPACE",
              "value": "64",
              "comment": [
                "Ignore whitespace differences"
              ]
            }
          ],
          "comment": [
            "Flags for indicating option behavior for git_blame APIs."
          ],
          "location": {
            "file": "blame.h",
            "line": 26,
            "column": 9
          },
          "group": "blame"
        },
        "git_blame_options": {
          "kind": "struct",
          "name": "git_blame_options",
          "referenceName": "git_blame_options",
          "comment": [
            "Blame options structure",
            "Initialize with `GIT_BLAME_OPTIONS_INIT`. Alternatively, you can\n use `git_blame_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "A combination of `git_blame_flag_t`"
              ]
            },
            {
              "name": "min_match_characters",
              "type": "uint16_t",
              "comment": [
                "The lower bound on the number of alphanumeric\n   characters that must be detected as moving/copying within a file for it to\n   associate those lines with the parent commit. The default value is 20.\n   This value only takes effect if any of the `GIT_BLAME_TRACK_COPIES_*`\n   flags are specified."
              ]
            },
            {
              "name": "newest_commit",
              "type": "git_oid",
              "comment": [
                "The id of the newest commit to consider. The default is HEAD."
              ],
              "referenceType": "struct git_oid"
            },
            {
              "name": "oldest_commit",
              "type": "git_oid",
              "comment": [
                "The id of the oldest commit to consider.\n The default is the first commit encountered with a NULL parent."
              ],
              "referenceType": "struct git_oid"
            },
            {
              "name": "min_line",
              "type": "size_t",
              "comment": [
                "The first line in the file to blame.\n The default is 1 (line numbers start with 1)."
              ]
            },
            {
              "name": "max_line",
              "type": "size_t",
              "comment": [
                "The last line in the file to blame.\n The default is the last line of the file."
              ]
            }
          ],
          "location": {
            "file": "blame.h",
            "line": 61,
            "column": 16
          },
          "group": "blame",
          "parameterTo": [
            "git_blame_options_init",
            "git_blame_file",
            "git_blame_init_options"
          ]
        },
        "GIT_BLAME_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_BLAME_OPTIONS_VERSION",
          "location": {
            "file": "blame.h",
            "line": 92,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "blame"
        },
        "GIT_BLAME_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_BLAME_OPTIONS_INIT",
          "location": {
            "file": "blame.h",
            "line": 93,
            "column": 9
          },
          "value": "{GIT_BLAME_OPTIONS_VERSION}",
          "comment": "",
          "group": "blame"
        },
        "git_blame_options_init": {
          "kind": "function",
          "name": "git_blame_options_init",
          "location": {
            "file": "blame.h",
            "line": 105,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_blame_options *",
              "direction": "in",
              "comment": "The `git_blame_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_BLAME_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_blame_options structure",
            "Initializes a `git_blame_options` with default values. Equivalent to creating\n an instance with GIT_BLAME_OPTIONS_INIT."
          ],
          "group": "blame"
        },
        "git_blame_hunk": {
          "kind": "struct",
          "name": "git_blame_hunk",
          "referenceName": "git_blame_hunk",
          "comment": [
            "Structure that represents a blame hunk.",
            "- `lines_in_hunk` is the number of lines in this hunk\n - `final_commit_id` is the OID of the commit where this line was last\n   changed.\n - `final_start_line_number` is the 1-based line number where this hunk\n   begins, in the final version of the file\n - `final_signature` is the author of `final_commit_id`. If\n   `GIT_BLAME_USE_MAILMAP` has been specified, it will contain the canonical\n    real name and email address.\n - `orig_commit_id` is the OID of the commit where this hunk was found.  This\n   will usually be the same as `final_commit_id`, except when\n   `GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES` has been specified.\n - `orig_path` is the path to the file where this hunk originated, as of the\n   commit specified by `orig_commit_id`.\n - `orig_start_line_number` is the 1-based line number where this hunk begins\n   in the file named by `orig_path` in the commit specified by\n   `orig_commit_id`.\n - `orig_signature` is the author of `orig_commit_id`. If\n   `GIT_BLAME_USE_MAILMAP` has been specified, it will contain the canonical\n    real name and email address.\n - `boundary` is 1 iff the hunk has been tracked to a boundary commit (the\n   root, or the commit specified in git_blame_options.oldest_commit)"
          ],
          "members": [
            {
              "name": "lines_in_hunk",
              "type": "size_t"
            },
            {
              "name": "final_commit_id",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "final_start_line_number",
              "type": "size_t"
            },
            {
              "name": "final_signature",
              "type": "git_signature *"
            },
            {
              "name": "orig_commit_id",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "orig_path",
              "type": "const char *"
            },
            {
              "name": "orig_start_line_number",
              "type": "size_t"
            },
            {
              "name": "orig_signature",
              "type": "git_signature *"
            },
            {
              "name": "boundary",
              "type": "char"
            }
          ],
          "location": {
            "file": "blame.h",
            "line": 134,
            "column": 16
          },
          "group": "blame",
          "returnedBy": [
            "git_blame_get_hunk_byindex",
            "git_blame_get_hunk_byline"
          ]
        },
        "git_blame": {
          "kind": "struct",
          "name": "git_blame",
          "referenceName": "struct git_blame",
          "opaque": true,
          "comment": [
            "Opaque structure to hold blame results"
          ],
          "location": {
            "file": "blame.h",
            "line": 151,
            "column": 26
          },
          "group": "blame",
          "parameterTo": [
            "git_blame_get_hunk_count",
            "git_blame_get_hunk_byindex",
            "git_blame_get_hunk_byline",
            "git_blame_file",
            "git_blame_buffer",
            "git_blame_free"
          ]
        },
        "git_blame_get_hunk_count": {
          "kind": "function",
          "name": "git_blame_get_hunk_count",
          "location": {
            "file": "blame.h",
            "line": 156,
            "column": 22
          },
          "returns": {
            "type": "uint32_t"
          },
          "params": [
            {
              "name": "blame",
              "type": "git_blame *"
            }
          ],
          "comment": [
            "Gets the number of hunks that exist in the blame structure."
          ],
          "group": "blame"
        },
        "git_blame_get_hunk_byindex": {
          "kind": "function",
          "name": "git_blame_get_hunk_byindex",
          "location": {
            "file": "blame.h",
            "line": 165,
            "column": 35
          },
          "returns": {
            "type": "const git_blame_hunk *",
            "comment": "the hunk at the given index, or NULL on error"
          },
          "params": [
            {
              "name": "blame",
              "type": "git_blame *",
              "direction": "in",
              "comment": "the blame structure to query"
            },
            {
              "name": "index",
              "type": "uint32_t",
              "direction": "in",
              "comment": "index of the hunk to retrieve"
            }
          ],
          "comment": [
            "Gets the blame hunk at the given index."
          ],
          "group": "blame"
        },
        "git_blame_get_hunk_byline": {
          "kind": "function",
          "name": "git_blame_get_hunk_byline",
          "location": {
            "file": "blame.h",
            "line": 176,
            "column": 35
          },
          "returns": {
            "type": "const git_blame_hunk *",
            "comment": "the hunk that contains the given line, or NULL on error"
          },
          "params": [
            {
              "name": "blame",
              "type": "git_blame *",
              "direction": "in",
              "comment": "the blame structure to query"
            },
            {
              "name": "lineno",
              "type": "size_t",
              "direction": "in",
              "comment": "the (1-based) line number to find a hunk for"
            }
          ],
          "comment": [
            "Gets the hunk that relates to the given line number in the newest commit."
          ],
          "group": "blame"
        },
        "git_blame_file": {
          "kind": "function",
          "name": "git_blame_file",
          "location": {
            "file": "blame.h",
            "line": 191,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code. (use git_error_last for information\n         about the error.)"
          },
          "params": [
            {
              "name": "out",
              "type": "git_blame **",
              "direction": "in",
              "comment": "pointer that will receive the blame object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository whose history is to be walked"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to file to consider"
            },
            {
              "name": "options",
              "type": "git_blame_options *",
              "direction": "in",
              "comment": "options for the blame operation.  If NULL, this is treated as\n                though GIT_BLAME_OPTIONS_INIT were passed."
            }
          ],
          "comment": [
            "Get the blame for a single file."
          ],
          "group": "blame"
        },
        "git_blame_buffer": {
          "kind": "function",
          "name": "git_blame_buffer",
          "location": {
            "file": "blame.h",
            "line": 215,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code. (use git_error_last for information\n         about the error)"
          },
          "params": [
            {
              "name": "out",
              "type": "git_blame **",
              "direction": "in",
              "comment": "pointer that will receive the resulting blame data"
            },
            {
              "name": "reference",
              "type": "git_blame *",
              "direction": "in",
              "comment": "cached blame from the history of the file (usually the output\n                  from git_blame_file)"
            },
            {
              "name": "buffer",
              "type": "const char *",
              "direction": "in",
              "comment": "the (possibly) modified contents of the file"
            },
            {
              "name": "buffer_len",
              "type": "size_t",
              "direction": "in",
              "comment": "number of valid bytes in the buffer"
            }
          ],
          "comment": [
            "Get blame data for a file that has been modified in memory. The `reference`\n parameter is a pre-calculated blame for the in-odb history of the file. This\n means that once a file blame is completed (which can be expensive), updating\n the buffer blame is very fast.",
            "Lines that differ between the buffer and the committed version are marked as\n having a zero OID for their final_commit_id."
          ],
          "group": "blame"
        },
        "git_blame_free": {
          "kind": "function",
          "name": "git_blame_free",
          "location": {
            "file": "blame.h",
            "line": 226,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "blame",
              "type": "git_blame *",
              "direction": "in",
              "comment": "the blame structure to free"
            }
          ],
          "comment": [
            "Free memory allocated by git_blame_file or git_blame_buffer."
          ],
          "group": "blame"
        }
      },
      "info": {
        "summary": "Git blame routines"
      }
    },
    "blob": {
      "apis": {
        "git_blob_lookup": {
          "kind": "function",
          "name": "git_blob_lookup",
          "location": {
            "file": "blob.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the looked up blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the blob."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the blob to locate."
            }
          ],
          "comment": [
            "Lookup a blob object from a repository."
          ],
          "group": "blob"
        },
        "git_blob_lookup_prefix": {
          "kind": "function",
          "name": "git_blob_lookup_prefix",
          "location": {
            "file": "blob.h",
            "line": 47,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob **",
              "direction": "in",
              "comment": "pointer to the looked up blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the blob."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the blob to locate."
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a blob object from a repository,\n given a prefix of its identifier (short id)."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "blob"
        },
        "git_blob_free": {
          "kind": "function",
          "name": "git_blob_free",
          "location": {
            "file": "blob.h",
            "line": 60,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "the blob to close"
            }
          ],
          "comment": [
            "Close an open blob",
            "This is a wrapper around git_object_free()",
            "IMPORTANT:\n It *is* necessary to call this method when you stop\n using a blob. Failure to do so will cause a memory leak."
          ],
          "group": "blob"
        },
        "git_blob_id": {
          "kind": "function",
          "name": "git_blob_id",
          "location": {
            "file": "blob.h",
            "line": 68,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "SHA1 hash for this blob."
          },
          "params": [
            {
              "name": "blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "a previously loaded blob."
            }
          ],
          "comment": [
            "Get the id of a blob."
          ],
          "group": "blob"
        },
        "git_blob_owner": {
          "kind": "function",
          "name": "git_blob_owner",
          "location": {
            "file": "blob.h",
            "line": 76,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "Repository that contains this blob."
          },
          "params": [
            {
              "name": "blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "A previously loaded blob."
            }
          ],
          "comment": [
            "Get the repository that contains the blob."
          ],
          "group": "blob"
        },
        "git_blob_rawcontent": {
          "kind": "function",
          "name": "git_blob_rawcontent",
          "location": {
            "file": "blob.h",
            "line": 89,
            "column": 26
          },
          "returns": {
            "type": "const void *",
            "comment": "the pointer"
          },
          "params": [
            {
              "name": "blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get a read-only buffer with the raw content of a blob.",
            "A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time."
          ],
          "group": "blob"
        },
        "git_blob_rawsize": {
          "kind": "function",
          "name": "git_blob_rawsize",
          "location": {
            "file": "blob.h",
            "line": 97,
            "column": 31
          },
          "returns": {
            "type": "git_object_size_t",
            "comment": "size on bytes"
          },
          "params": [
            {
              "name": "blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "pointer to the blob"
            }
          ],
          "comment": [
            "Get the size in bytes of the contents of a blob"
          ],
          "group": "blob"
        },
        "git_blob_filter_flag_t": {
          "kind": "enum",
          "name": "git_blob_filter_flag_t",
          "referenceName": "git_blob_filter_flag_t",
          "members": [
            {
              "name": "GIT_BLOB_FILTER_CHECK_FOR_BINARY",
              "value": "1",
              "comment": [
                "When set, filters will not be applied to binary files."
              ]
            },
            {
              "name": "GIT_BLOB_FILTER_NO_SYSTEM_ATTRIBUTES",
              "value": "2",
              "comment": [
                "When set, filters will not load configuration from the\n system-wide `gitattributes` in `/etc` (or system equivalent)."
              ]
            },
            {
              "name": "GIT_BLOB_FILTER_ATTTRIBUTES_FROM_HEAD",
              "value": "4",
              "comment": [
                "When set, filters will be loaded from a `.gitattributes` file\n in the HEAD commit."
              ]
            }
          ],
          "comment": [
            "Flags to control the functionality of `git_blob_filter`."
          ],
          "location": {
            "file": "blob.h",
            "line": 102,
            "column": 9
          },
          "group": "blob"
        },
        "git_blob_filter_options": {
          "kind": "struct",
          "name": "git_blob_filter_options",
          "referenceName": "git_blob_filter_options",
          "comment": [
            "The options used when applying filter options to a file."
          ],
          "members": [
            {
              "name": "version",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "Flags to control the filtering process, see `git_blob_filter_flag_t` above"
              ]
            }
          ],
          "location": {
            "file": "blob.h",
            "line": 122,
            "column": 9
          },
          "group": "blob",
          "parameterTo": [
            "git_blob_filter"
          ]
        },
        "GIT_BLOB_FILTER_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_BLOB_FILTER_OPTIONS_VERSION",
          "location": {
            "file": "blob.h",
            "line": 129,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "blob"
        },
        "GIT_BLOB_FILTER_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_BLOB_FILTER_OPTIONS_INIT",
          "location": {
            "file": "blob.h",
            "line": 130,
            "column": 9
          },
          "value": "{GIT_BLOB_FILTER_OPTIONS_VERSION, GIT_BLOB_FILTER_CHECK_FOR_BINARY}",
          "comment": "",
          "group": "blob"
        },
        "git_blob_filter": {
          "kind": "function",
          "name": "git_blob_filter",
          "location": {
            "file": "blob.h",
            "line": 154,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The git_buf to be filled in"
            },
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "Pointer to the blob"
            },
            {
              "name": "as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path used for file attribute lookups, etc."
            },
            {
              "name": "opts",
              "type": "git_blob_filter_options *",
              "direction": "in",
              "comment": "Options to use for filtering the blob"
            }
          ],
          "comment": [
            "Get a buffer with the filtered content of a blob.",
            "This applies filters as if the blob was being checked out to the\n working directory under the specified filename.  This may apply\n CRLF filtering or other types of changes depending on the file\n attributes set for the blob and the content detected in it.",
            "The output is written into a `git_buf` which the caller must free\n when done (via `git_buf_dispose`).",
            "If no filters need to be applied, then the `out` buffer will just\n be populated with a pointer to the raw content of the blob.  In\n that case, be careful to *not* free the blob until done with the\n buffer or copy it into memory you own."
          ],
          "group": "blob"
        },
        "git_blob_create_from_workdir": {
          "kind": "function",
          "name": "git_blob_create_from_workdir",
          "location": {
            "file": "blob.h",
            "line": 171,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the id of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the blob will be written.\n\tthis repository cannot be bare"
            },
            {
              "name": "relative_path",
              "type": "const char *",
              "direction": "in",
              "comment": "file from which the blob will be created,\n\trelative to the repository's working dir"
            }
          ],
          "comment": [
            "Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob"
          ],
          "group": "blob"
        },
        "git_blob_create_from_disk": {
          "kind": "function",
          "name": "git_blob_create_from_disk",
          "location": {
            "file": "blob.h",
            "line": 183,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the id of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the blob will be written.\n\tthis repository can be bare or not"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "file from which the blob will be created"
            }
          ],
          "comment": [
            "Read a file from the filesystem and write its content\n to the Object Database as a loose blob"
          ],
          "group": "blob"
        },
        "git_blob_create_from_stream": {
          "kind": "function",
          "name": "git_blob_create_from_stream",
          "location": {
            "file": "blob.h",
            "line": 210,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_writestream **",
              "direction": "in",
              "comment": "the stream into which to write"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where the blob will be written.\n        This repository can be bare or not."
            },
            {
              "name": "hintpath",
              "type": "const char *",
              "direction": "in",
              "comment": "If not NULL, will be used to select data filters\n        to apply onto the content of the blob to be created."
            }
          ],
          "comment": [
            "Create a stream to write a new blob into the object db",
            "This function may need to buffer the data on disk and will in\n general not be the right choice if you know the size of the data\n to write. If you have data in memory, use\n `git_blob_create_from_buffer()`. If you do not, but know the size of\n the contents (and don't want/need to perform filtering), use\n `git_odb_open_wstream()`.",
            "Don't close this stream yourself but pass it to\n `git_blob_create_from_stream_commit()` to commit the write to the\n object db and get the object id.",
            "If the `hintpath` parameter is filled, it will be used to determine\n what git filters should be applied to the object before it is written\n to the object database."
          ],
          "group": "blob"
        },
        "git_blob_create_from_stream_commit": {
          "kind": "function",
          "name": "git_blob_create_from_stream_commit",
          "location": {
            "file": "blob.h",
            "line": 224,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the id of the new blob"
            },
            {
              "name": "stream",
              "type": "git_writestream *",
              "direction": "in",
              "comment": "the stream to close"
            }
          ],
          "comment": [
            "Close the stream and write the blob to the object db",
            "The stream will be closed and freed."
          ],
          "group": "blob"
        },
        "git_blob_create_from_buffer": {
          "kind": "function",
          "name": "git_blob_create_from_buffer",
          "location": {
            "file": "blob.h",
            "line": 237,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "return the id of the written blob"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to blob will be written"
            },
            {
              "name": "buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "data to be written into the blob"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "length of the data"
            }
          ],
          "comment": [
            "Write an in-memory buffer to the ODB as a blob"
          ],
          "group": "blob"
        },
        "git_blob_is_binary": {
          "kind": "function",
          "name": "git_blob_is_binary",
          "location": {
            "file": "blob.h",
            "line": 251,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the content of the blob is detected\n as binary; 0 otherwise."
          },
          "params": [
            {
              "name": "blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "The blob which content should be analyzed"
            }
          ],
          "comment": [
            "Determine if the blob content is most certainly binary or not.",
            "The heuristic used to guess if a file is binary is taken from core git:\n Searching for NUL bytes and looking for a reasonable ratio of printable\n to non-printable characters among the first 8000 bytes."
          ],
          "group": "blob"
        },
        "git_blob_dup": {
          "kind": "function",
          "name": "git_blob_dup",
          "location": {
            "file": "blob.h",
            "line": 260,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_blob **",
              "direction": "in",
              "comment": "Pointer to store the copy of the object"
            },
            {
              "name": "source",
              "type": "git_blob *",
              "direction": "in",
              "comment": "Original object to copy"
            }
          ],
          "comment": [
            "Create an in-memory copy of a blob. The copy must be explicitly\n free'd or it will leak."
          ],
          "group": "blob"
        },
        "git_blob": {
          "kind": "struct",
          "name": "git_blob",
          "referenceName": "struct git_blob",
          "opaque": true,
          "comment": [
            "In-memory representation of a blob object."
          ],
          "location": {
            "file": "types.h",
            "line": 124,
            "column": 25
          },
          "group": "blob",
          "parameterTo": [
            "git_blob_lookup",
            "git_blob_lookup_prefix",
            "git_blob_free",
            "git_blob_id",
            "git_blob_owner",
            "git_blob_rawcontent",
            "git_blob_rawsize",
            "git_blob_filter",
            "git_blob_is_binary",
            "git_blob_dup",
            "git_blob_filtered_content",
            "git_diff_blobs",
            "git_diff_blob_to_buffer",
            "git_filter_list_load",
            "git_filter_list_apply_to_blob",
            "git_filter_list_stream_blob",
            "git_patch_from_blobs",
            "git_patch_from_blob_and_buffer"
          ]
        }
      },
      "info": {
        "summary": "Git blob load and write routines"
      }
    },
    "branch": {
      "apis": {
        "git_branch_create": {
          "kind": "function",
          "name": "git_branch_create",
          "location": {
            "file": "branch.h",
            "line": 50,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EINVALIDSPEC or an error code.\n A proper reference is written in the refs/heads namespace\n pointing to the provided target commit."
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer where to store the underlying reference."
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name for the branch; this name is\n validated for consistency. It should also not conflict with\n an already existing branch name."
            },
            {
              "name": "target",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "Commit to which this branch should point. This object\n must belong to the given `repo`."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing branch."
            }
          ],
          "comment": [
            "Create a new branch pointing at a target commit",
            "A new direct reference will be created pointing to\n this target commit. If `force` is true and a reference\n already exists with the given name, it'll be replaced.",
            "The returned reference must be freed by the user.",
            "The branch name will be checked for validity.\n See `git_tag_create()` for rules about valid names."
          ],
          "group": "branch"
        },
        "git_branch_create_from_annotated": {
          "kind": "function",
          "name": "git_branch_create_from_annotated",
          "location": {
            "file": "branch.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "ref_out",
              "type": "git_reference **"
            },
            {
              "name": "repository",
              "type": "git_repository *"
            },
            {
              "name": "branch_name",
              "type": "const char *"
            },
            {
              "name": "commit",
              "type": "const git_annotated_commit *"
            },
            {
              "name": "force",
              "type": "int"
            }
          ],
          "comment": [
            "Create a new branch pointing at a target commit",
            "This behaves like `git_branch_create()` but takes an annotated\n commit, which lets you specify which extended sha syntax string was\n specified by a user, allowing for more exact reflog messages.",
            "See the documentation for `git_branch_create()`."
          ],
          "see": [
            "git_branch_create"
          ],
          "group": "branch"
        },
        "git_branch_delete": {
          "kind": "function",
          "name": "git_branch_delete",
          "location": {
            "file": "branch.h",
            "line": 85,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code."
          },
          "params": [
            {
              "name": "branch",
              "type": "git_reference *",
              "direction": "in",
              "comment": "A valid reference representing a branch"
            }
          ],
          "comment": [
            "Delete an existing branch reference.",
            "Note that if the deletion succeeds, the reference object will not\n be valid anymore, and should be freed immediately by the user using\n `git_reference_free()`."
          ],
          "group": "branch"
        },
        "git_branch_iterator": {
          "kind": "struct",
          "name": "git_branch_iterator",
          "referenceName": "struct git_branch_iterator",
          "opaque": true,
          "comment": [
            "Iterator type for branches"
          ],
          "location": {
            "file": "branch.h",
            "line": 88,
            "column": 36
          },
          "group": "branch",
          "parameterTo": [
            "git_branch_iterator_new",
            "git_branch_next",
            "git_branch_iterator_free"
          ]
        },
        "git_branch_iterator_new": {
          "kind": "function",
          "name": "git_branch_iterator_new",
          "location": {
            "file": "branch.h",
            "line": 101,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success  or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_branch_iterator **",
              "direction": "in",
              "comment": "the iterator"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the branches."
            },
            {
              "name": "list_flags",
              "type": "git_branch_t",
              "direction": "in",
              "comment": "Filtering flags for the branch\n listing. Valid values are GIT_BRANCH_LOCAL, GIT_BRANCH_REMOTE\n or GIT_BRANCH_ALL.",
              "referenceType": "enum git_branch_t"
            }
          ],
          "comment": [
            "Create an iterator which loops over the requested branches."
          ],
          "group": "branch"
        },
        "git_branch_next": {
          "kind": "function",
          "name": "git_branch_next",
          "location": {
            "file": "branch.h",
            "line": 114,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ITEROVER if there are no more branches or an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "the reference"
            },
            {
              "name": "out_type",
              "type": "git_branch_t *",
              "direction": "in",
              "comment": "the type of branch (local or remote-tracking)"
            },
            {
              "name": "iter",
              "type": "git_branch_iterator *",
              "direction": "in",
              "comment": "the branch iterator"
            }
          ],
          "comment": [
            "Retrieve the next branch from the iterator"
          ],
          "group": "branch"
        },
        "git_branch_iterator_free": {
          "kind": "function",
          "name": "git_branch_iterator_free",
          "location": {
            "file": "branch.h",
            "line": 121,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "iter",
              "type": "git_branch_iterator *",
              "direction": "in",
              "comment": "the iterator to free"
            }
          ],
          "comment": [
            "Free a branch iterator"
          ],
          "group": "branch"
        },
        "git_branch_move": {
          "kind": "function",
          "name": "git_branch_move",
          "location": {
            "file": "branch.h",
            "line": 144,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC or an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "New reference object for the updated name."
            },
            {
              "name": "branch",
              "type": "git_reference *",
              "direction": "in",
              "comment": "Current underlying reference of the branch."
            },
            {
              "name": "new_branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Target name of the branch once the move\n is performed; this name is validated for consistency."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing branch."
            }
          ],
          "comment": [
            "Move/rename an existing local branch reference.",
            "The new branch name will be checked for validity.\n See `git_tag_create()` for rules about valid names.",
            "Note that if the move succeeds, the old reference object will not\n + be valid anymore, and should be freed immediately by the user using\n + `git_reference_free()`."
          ],
          "group": "branch"
        },
        "git_branch_lookup": {
          "kind": "function",
          "name": "git_branch_lookup",
          "location": {
            "file": "branch.h",
            "line": 168,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_ENOTFOUND when no matching branch\n exists, GIT_EINVALIDSPEC, otherwise an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to the looked-up branch reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the branch"
            },
            {
              "name": "branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the branch to be looked-up;\n this name is validated for consistency."
            },
            {
              "name": "branch_type",
              "type": "git_branch_t",
              "direction": "in",
              "comment": "Type of the considered branch. This should\n be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE.",
              "referenceType": "enum git_branch_t"
            }
          ],
          "comment": [
            "Lookup a branch by its name in a repository.",
            "The generated reference must be freed by the user.\n The branch name will be checked for validity."
          ],
          "see": [
            "git_tag_create for rules about valid names."
          ],
          "group": "branch"
        },
        "git_branch_name": {
          "kind": "function",
          "name": "git_branch_name",
          "location": {
            "file": "branch.h",
            "line": 189,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_EINVALID if the reference isn't either a local or\n         remote branch, otherwise an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "const char **",
              "direction": "in",
              "comment": "Pointer to the abbreviated reference name.\n        Owned by ref, do not free."
            },
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "A reference object, ideally pointing to a branch"
            }
          ],
          "comment": [
            "Get the branch name",
            "Given a reference object, this will check that it really is a branch (ie.\n it lives under \"refs/heads/\" or \"refs/remotes/\"), and return the branch part\n of it."
          ],
          "group": "branch"
        },
        "git_branch_upstream": {
          "kind": "function",
          "name": "git_branch_upstream",
          "location": {
            "file": "branch.h",
            "line": 207,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_ENOTFOUND when no remote tracking\n         reference exists, otherwise an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer where to store the retrieved reference."
            },
            {
              "name": "branch",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "Current underlying reference of the branch."
            }
          ],
          "comment": [
            "Get the upstream of a branch",
            "Given a reference, this will return a new reference object corresponding\n to its remote tracking branch. The reference must be a local branch."
          ],
          "see": [
            "git_branch_upstream_name for details on the resolution."
          ],
          "group": "branch"
        },
        "git_branch_set_upstream": {
          "kind": "function",
          "name": "git_branch_set_upstream",
          "location": {
            "file": "branch.h",
            "line": 226,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_ENOTFOUND if there's no branch named `branch_name`\n         or an error code"
          },
          "params": [
            {
              "name": "branch",
              "type": "git_reference *",
              "direction": "in",
              "comment": "the branch to configure"
            },
            {
              "name": "branch_name",
              "type": "const char *",
              "direction": "in",
              "comment": "remote-tracking or local branch to set as upstream."
            }
          ],
          "comment": [
            "Set a branch's upstream branch",
            "This will update the configuration to set the branch named `branch_name` as the upstream of `branch`.\n Pass a NULL name to unset the upstream information."
          ],
          "notes": [
            "the actual tracking reference must have been already created for the\n operation to succeed."
          ],
          "group": "branch"
        },
        "git_branch_upstream_name": {
          "kind": "function",
          "name": "git_branch_upstream_name",
          "location": {
            "file": "branch.h",
            "line": 244,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND when no remote tracking reference exists,\n         or an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the buffer into which the name will be written."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the branches live."
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "reference name of the local branch."
            }
          ],
          "comment": [
            "Get the upstream name of a branch",
            "Given a local branch, this will return its remote-tracking branch information,\n as a full reference name, ie. \"feature/nice\" would become\n \"refs/remote/origin/feature/nice\", depending on that branch's configuration."
          ],
          "group": "branch"
        },
        "git_branch_is_head": {
          "kind": "function",
          "name": "git_branch_is_head",
          "location": {
            "file": "branch.h",
            "line": 257,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if HEAD points at the branch, 0 if it isn't, or a negative value\n \t\t   as an error code."
          },
          "params": [
            {
              "name": "branch",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "A reference to a local branch."
            }
          ],
          "comment": [
            "Determine if HEAD points to the given branch"
          ],
          "group": "branch"
        },
        "git_branch_is_checked_out": {
          "kind": "function",
          "name": "git_branch_is_checked_out",
          "location": {
            "file": "branch.h",
            "line": 270,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if branch is checked out, 0 if it isn't, an error code otherwise."
          },
          "params": [
            {
              "name": "branch",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "A reference to a local branch."
            }
          ],
          "comment": [
            "Determine if any HEAD points to the current branch",
            "This will iterate over all known linked repositories (usually in the form of\n worktrees) and report whether any HEAD is pointing at the current branch."
          ],
          "group": "branch"
        },
        "git_branch_remote_name": {
          "kind": "function",
          "name": "git_branch_remote_name",
          "location": {
            "file": "branch.h",
            "line": 289,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND when no matching remote was found,\n         GIT_EAMBIGUOUS when the branch maps to several remotes,\n         otherwise an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The buffer into which the name will be written."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository where the branch lives."
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "complete name of the remote tracking branch."
            }
          ],
          "comment": [
            "Find the remote name of a remote-tracking branch",
            "This will return the name of the remote whose fetch refspec is matching\n the given branch. E.g. given a branch \"refs/remotes/test/master\", it will\n extract the \"test\" part. If refspecs from multiple remotes match,\n the function will return GIT_EAMBIGUOUS."
          ],
          "group": "branch"
        },
        "git_branch_upstream_remote": {
          "kind": "function",
          "name": "git_branch_upstream_remote",
          "location": {
            "file": "branch.h",
            "line": 305,
            "column": 18
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "buf",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the buffer into which to write the name"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to look"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the full name of the branch"
            }
          ],
          "comment": [
            "Retrieve the upstream remote of a local branch",
            "This will return the currently configured \"branch.*.remote\" for a given\n branch. This branch must be local."
          ],
          "group": "branch"
        },
        "git_branch_t": {
          "kind": "enum",
          "name": "git_branch_t",
          "referenceName": "git_branch_t",
          "members": [
            {
              "name": "GIT_BRANCH_LOCAL",
              "value": "1"
            },
            {
              "name": "GIT_BRANCH_REMOTE",
              "value": "2"
            },
            {
              "name": "GIT_BRANCH_ALL",
              "value": "3"
            }
          ],
          "comment": [
            "Basic type of any Git branch."
          ],
          "location": {
            "file": "types.h",
            "line": 206,
            "column": 9
          },
          "group": "branch",
          "parameterTo": [
            "git_branch_iterator_new",
            "git_branch_next",
            "git_branch_lookup"
          ]
        }
      },
      "info": {
        "summary": "Git branch parsing routines"
      }
    },
    "buffer": {
      "apis": {
        "git_buf": {
          "kind": "struct",
          "name": "git_buf",
          "referenceName": "git_buf",
          "comment": [
            "A data buffer for exporting data from libgit2",
            "Sometimes libgit2 wants to return an allocated data buffer to the\n caller and have the caller take responsibility for freeing that memory.\n This can be awkward if the caller does not have easy access to the same\n allocation functions that libgit2 is using.  In those cases, libgit2\n will fill in a `git_buf` and the caller can use `git_buf_dispose()` to\n release it when they are done.",
            "A `git_buf` may also be used for the caller to pass in a reference to\n a block of memory they hold.  In this case, libgit2 will not resize or\n free the memory, but will read from it as needed.",
            "Some APIs may occasionally do something slightly unusual with a buffer,\n such as setting `ptr` to a value that was passed in by the user.  In\n those cases, the behavior will be clearly documented by the API."
          ],
          "members": [
            {
              "name": "ptr",
              "type": "char *",
              "comment": [
                "The buffer contents.",
                "`ptr` points to the start of the allocated memory.  If it is NULL,\n then the `git_buf` is considered empty and libgit2 will feel free\n to overwrite it with new data."
              ]
            },
            {
              "name": "asize",
              "type": "size_t",
              "comment": [
                "`asize` holds the known total amount of allocated memory if the `ptr`\n  was allocated by libgit2.  It may be larger than `size`.  If `ptr`\n  was not allocated by libgit2 and should not be resized and/or freed,\n  then `asize` will be set to zero."
              ]
            },
            {
              "name": "size",
              "type": "size_t",
              "comment": [
                "`size` holds the size (in bytes) of the data that is actually used."
              ]
            }
          ],
          "location": {
            "file": "buffer.h",
            "line": 39,
            "column": 9
          },
          "group": "buffer",
          "parameterTo": [
            "git_blob_filter",
            "git_branch_upstream_name",
            "git_branch_remote_name",
            "git_branch_upstream_remote",
            "git_buf_dispose",
            "git_buf_grow",
            "git_buf_set",
            "git_buf_is_binary",
            "git_buf_contains_nul",
            "git_commit_header_field",
            "git_commit_extract_signature",
            "git_commit_create_buffer",
            "git_commit_signing_cb",
            "git_config_find_global",
            "git_config_find_xdg",
            "git_config_find_system",
            "git_config_find_programdata",
            "git_config_get_path",
            "git_config_get_string_buf",
            "git_config_parse_path",
            "git_blob_filtered_content",
            "git_buf_free",
            "git_describe_format",
            "git_diff_to_buf",
            "git_diff_stats_to_buf",
            "git_diff_format_email",
            "git_diff_commit_as_email",
            "git_filter_list_apply_to_data",
            "git_filter_list_apply_to_file",
            "git_filter_list_apply_to_blob",
            "git_filter_list_stream_data",
            "git_message_prettify",
            "git_note_default_ref",
            "git_object_short_id",
            "git_packbuilder_write_buf",
            "git_patch_to_buf",
            "git_refspec_transform",
            "git_refspec_rtransform",
            "git_url_resolve_cb",
            "git_remote_default_branch",
            "git_repository_discover",
            "git_repository_item_path",
            "git_repository_message",
            "git_submodule_resolve_url",
            "git_treebuilder_write_with_buffer",
            "git_worktree_is_locked",
            "git_filter_apply_fn",
            "git_mempack_dump",
            "git_merge_driver_apply_fn"
          ]
        },
        "GIT_BUF_INIT_CONST(STR,LEN)": {
          "kind": "macro",
          "name": "GIT_BUF_INIT_CONST(STR,LEN)",
          "location": {
            "file": "buffer.h",
            "line": 66,
            "column": 9
          },
          "value": "{ (char *)(STR), 0, (size_t)(LEN) }",
          "comment": "Static initializer for git_buf from static buffer",
          "group": "buffer"
        },
        "git_buf_dispose": {
          "kind": "function",
          "name": "git_buf_dispose",
          "location": {
            "file": "buffer.h",
            "line": 78,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "buffer",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The buffer to deallocate"
            }
          ],
          "comment": [
            "Free the memory referred to by the git_buf.",
            "Note that this does not free the `git_buf` itself, just the memory\n pointed to by `buffer->ptr`.  This will not free the memory if it looks\n like it was not allocated internally, but it will clear the buffer back\n to the empty state."
          ],
          "group": "buffer"
        },
        "git_buf_grow": {
          "kind": "function",
          "name": "git_buf_grow",
          "location": {
            "file": "buffer.h",
            "line": 101,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on allocation failure"
          },
          "params": [
            {
              "name": "buffer",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The buffer to be resized; may or may not be allocated yet"
            },
            {
              "name": "target_size",
              "type": "size_t",
              "direction": "in",
              "comment": "The desired available size"
            }
          ],
          "comment": [
            "Resize the buffer allocation to make more space.",
            "This will attempt to grow the buffer to accommodate the target size.",
            "If the buffer refers to memory that was not allocated by libgit2 (i.e.\n the `asize` field is zero), then `ptr` will be replaced with a newly\n allocated block of data.  Be careful so that memory allocated by the\n caller is not lost.  As a special variant, if you pass `target_size` as\n 0 and the memory is not allocated by libgit2, this will allocate a new\n buffer of size `size` and copy the external data into it.",
            "Currently, this will never shrink a buffer, only expand it.",
            "If the allocation fails, this will return an error and the buffer will be\n marked as invalid for future operations, invaliding the contents."
          ],
          "group": "buffer"
        },
        "git_buf_set": {
          "kind": "function",
          "name": "git_buf_set",
          "location": {
            "file": "buffer.h",
            "line": 111,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on allocation failure"
          },
          "params": [
            {
              "name": "buffer",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The buffer to set"
            },
            {
              "name": "data",
              "type": "const void *",
              "direction": "in",
              "comment": "The data to copy into the buffer"
            },
            {
              "name": "datalen",
              "type": "size_t",
              "direction": "in",
              "comment": "The length of the data to copy into the buffer"
            }
          ],
          "comment": [
            "Set buffer to a copy of some raw data."
          ],
          "group": "buffer"
        },
        "git_buf_is_binary": {
          "kind": "function",
          "name": "git_buf_is_binary",
          "location": {
            "file": "buffer.h",
            "line": 120,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if buffer looks like non-text data"
          },
          "params": [
            {
              "name": "buf",
              "type": "const git_buf *",
              "direction": "in",
              "comment": "Buffer to check"
            }
          ],
          "comment": [
            "Check quickly if buffer looks like it contains binary data"
          ],
          "group": "buffer"
        },
        "git_buf_contains_nul": {
          "kind": "function",
          "name": "git_buf_contains_nul",
          "location": {
            "file": "buffer.h",
            "line": 128,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if buffer contains a NUL byte"
          },
          "params": [
            {
              "name": "buf",
              "type": "const git_buf *",
              "direction": "in",
              "comment": "Buffer to check"
            }
          ],
          "comment": [
            "Check quickly if buffer contains a NUL byte"
          ],
          "group": "buffer"
        }
      },
      "info": {
        "summary": "Buffer export structure"
      }
    },
    "cert": {
      "apis": {
        "git_cert_t": {
          "kind": "enum",
          "name": "git_cert_t",
          "referenceName": "git_cert_t",
          "members": [
            {
              "name": "GIT_CERT_NONE",
              "comment": [
                "No information about the certificate is available. This may\n happen when using curl."
              ]
            },
            {
              "name": "GIT_CERT_X509",
              "comment": [
                "The `data` argument to the callback will be a pointer to\n the DER-encoded data."
              ]
            },
            {
              "name": "GIT_CERT_HOSTKEY_LIBSSH2",
              "comment": [
                "The `data` argument to the callback will be a pointer to a\n `git_cert_hostkey` structure."
              ]
            },
            {
              "name": "GIT_CERT_STRARRAY",
              "comment": [
                "The `data` argument to the callback will be a pointer to a\n `git_strarray` with `name:content` strings containing\n information about the certificate. This is used when using\n curl."
              ]
            }
          ],
          "comment": [
            "Type of host certificate structure that is passed to the check callback"
          ],
          "location": {
            "file": "cert.h",
            "line": 24,
            "column": 14
          },
          "group": "cert"
        },
        "git_cert": {
          "kind": "struct",
          "name": "git_cert",
          "referenceName": "struct git_cert",
          "comment": [
            "Parent type for `git_cert_hostkey` and `git_cert_x509`."
          ],
          "members": [
            {
              "name": "cert_type",
              "type": "git_cert_t",
              "comment": [
                "Type of certificate. A `GIT_CERT_` value."
              ],
              "referenceType": "enum git_cert_t"
            }
          ],
          "location": {
            "file": "cert.h",
            "line": 52,
            "column": 8
          },
          "group": "cert",
          "parameterTo": [
            "git_transport_certificate_check_cb",
            "git_transport_smart_certificate_check"
          ]
        },
        "git_transport_certificate_check_cb": {
          "kind": "callback",
          "name": "git_transport_certificate_check_cb",
          "type": "int (*)(git_cert *, int, const char *, void *)",
          "comment": [
            "Callback for the user's custom certificate checks."
          ],
          "location": {
            "file": "cert.h",
            "line": 71,
            "column": 26
          },
          "params": [
            {
              "name": "cert",
              "direction": "in",
              "comment": "The host certificate",
              "type": "git_cert *"
            },
            {
              "name": "valid",
              "direction": "in",
              "comment": "Whether the libgit2 checks (OpenSSL or WinHTTP) think\n this certificate is valid",
              "type": "int"
            },
            {
              "name": "host",
              "direction": "in",
              "comment": "Hostname of the host libgit2 connected to",
              "type": "const char *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload provided by the caller",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0 to proceed with the connection, \n<\n 0 to fail the connection\n         or > 0 to indicate that the callback refused to act and that\n         the existing validity determination should be honored",
            "type": "int"
          },
          "group": "cert",
          "typedef": true
        },
        "git_cert_ssh_t": {
          "kind": "enum",
          "name": "git_cert_ssh_t",
          "referenceName": "git_cert_ssh_t",
          "members": [
            {
              "name": "GIT_CERT_SSH_MD5",
              "value": "1",
              "comment": [
                "MD5 is available"
              ]
            },
            {
              "name": "GIT_CERT_SSH_SHA1",
              "value": "2",
              "comment": [
                "SHA-1 is available"
              ]
            },
            {
              "name": "GIT_CERT_SSH_SHA256",
              "value": "4",
              "comment": [
                "SHA-256 is available"
              ]
            }
          ],
          "comment": [
            "Type of SSH host fingerprint"
          ],
          "location": {
            "file": "cert.h",
            "line": 76,
            "column": 9
          },
          "group": "cert"
        },
        "git_cert_hostkey": {
          "kind": "struct",
          "name": "git_cert_hostkey",
          "referenceName": "git_cert_hostkey",
          "comment": [
            "Hostkey information taken from libssh2"
          ],
          "members": [
            {
              "name": "parent",
              "type": "git_cert",
              "comment": [
                "The parent cert"
              ],
              "referenceType": "struct git_cert"
            },
            {
              "name": "type",
              "type": "git_cert_ssh_t",
              "comment": [
                "A hostkey type from libssh2, either\n `GIT_CERT_SSH_MD5` or `GIT_CERT_SSH_SHA1`"
              ],
              "referenceType": "enum git_cert_ssh_t"
            },
            {
              "name": "hash_md5",
              "type": "unsigned char[16]",
              "comment": [
                "Hostkey hash. If type has `GIT_CERT_SSH_MD5` set, this will\n have the MD5 hash of the hostkey."
              ]
            },
            {
              "name": "hash_sha1",
              "type": "unsigned char[20]",
              "comment": [
                "Hostkey hash. If type has `GIT_CERT_SSH_SHA1` set, this will\n have the SHA-1 hash of the hostkey."
              ]
            },
            {
              "name": "hash_sha256",
              "type": "unsigned char[32]",
              "comment": [
                "Hostkey hash. If type has `GIT_CERT_SSH_SHA256` set, this will\n have the SHA-256 hash of the hostkey."
              ]
            }
          ],
          "location": {
            "file": "cert.h",
            "line": 88,
            "column": 9
          },
          "group": "cert"
        },
        "git_cert_x509": {
          "kind": "struct",
          "name": "git_cert_x509",
          "referenceName": "git_cert_x509",
          "comment": [
            "X.509 certificate information"
          ],
          "members": [
            {
              "name": "parent",
              "type": "git_cert",
              "comment": [
                "The parent cert"
              ],
              "referenceType": "struct git_cert"
            },
            {
              "name": "data",
              "type": "void *",
              "comment": [
                "Pointer to the X.509 certificate data"
              ]
            },
            {
              "name": "len",
              "type": "size_t",
              "comment": [
                "Length of the memory block pointed to by `data`."
              ]
            }
          ],
          "location": {
            "file": "cert.h",
            "line": 119,
            "column": 9
          },
          "group": "cert"
        }
      },
      "info": {
        "summary": "Git certificate objects"
      }
    },
    "checkout": {
      "apis": {
        "git_checkout_strategy_t": {
          "kind": "enum",
          "name": "git_checkout_strategy_t",
          "referenceName": "git_checkout_strategy_t",
          "members": [
            {
              "name": "GIT_CHECKOUT_NONE",
              "value": "0",
              "comment": [
                "default is a dry run, no actual updates"
              ]
            },
            {
              "name": "GIT_CHECKOUT_SAFE",
              "comment": [
                "Allow safe updates that cannot overwrite uncommitted data.\n If the uncommitted changes don't conflict with the checked out files,\n the checkout will still proceed, leaving the changes intact.",
                "Mutually exclusive with GIT_CHECKOUT_FORCE.\n GIT_CHECKOUT_FORCE takes precedence over GIT_CHECKOUT_SAFE."
              ]
            },
            {
              "name": "GIT_CHECKOUT_FORCE",
              "comment": [
                "Allow all updates to force working directory to look like index.",
                "Mutually exclusive with GIT_CHECKOUT_SAFE.\n GIT_CHECKOUT_FORCE takes precedence over GIT_CHECKOUT_SAFE."
              ]
            },
            {
              "name": "GIT_CHECKOUT_RECREATE_MISSING",
              "comment": [
                "Allow checkout to recreate missing files"
              ]
            },
            {
              "name": "GIT_CHECKOUT_ALLOW_CONFLICTS",
              "comment": [
                "Allow checkout to make safe updates even if conflicts are found"
              ]
            },
            {
              "name": "GIT_CHECKOUT_REMOVE_UNTRACKED",
              "comment": [
                "Remove untracked files not in index (that are not ignored)"
              ]
            },
            {
              "name": "GIT_CHECKOUT_REMOVE_IGNORED",
              "comment": [
                "Remove ignored files not in index"
              ]
            },
            {
              "name": "GIT_CHECKOUT_UPDATE_ONLY",
              "comment": [
                "Only update existing files, don't create new ones"
              ]
            },
            {
              "name": "GIT_CHECKOUT_DONT_UPDATE_INDEX",
              "comment": [
                "Normally checkout updates index entries as it goes; this stops that.\n Implies `GIT_CHECKOUT_DONT_WRITE_INDEX`."
              ]
            },
            {
              "name": "GIT_CHECKOUT_NO_REFRESH",
              "comment": [
                "Don't refresh index/config/etc before doing checkout"
              ]
            },
            {
              "name": "GIT_CHECKOUT_SKIP_UNMERGED",
              "comment": [
                "Allow checkout to skip unmerged files"
              ]
            },
            {
              "name": "GIT_CHECKOUT_USE_OURS",
              "comment": [
                "For unmerged files, checkout stage 2 from index"
              ]
            },
            {
              "name": "GIT_CHECKOUT_USE_THEIRS",
              "comment": [
                "For unmerged files, checkout stage 3 from index"
              ]
            },
            {
              "name": "GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH",
              "comment": [
                "Treat pathspec as simple list of exact match file paths"
              ]
            },
            {
              "name": "GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES",
              "comment": [
                "Ignore directories in use, they will be left empty"
              ]
            },
            {
              "name": "GIT_CHECKOUT_DONT_OVERWRITE_IGNORED",
              "comment": [
                "Don't overwrite ignored files that exist in the checkout target"
              ]
            },
            {
              "name": "GIT_CHECKOUT_CONFLICT_STYLE_MERGE",
              "comment": [
                "Write normal merge files for conflicts"
              ]
            },
            {
              "name": "GIT_CHECKOUT_CONFLICT_STYLE_DIFF3",
              "comment": [
                "Include common ancestor data in diff3 format files for conflicts"
              ]
            },
            {
              "name": "GIT_CHECKOUT_DONT_REMOVE_EXISTING",
              "comment": [
                "Don't overwrite existing files or folders"
              ]
            },
            {
              "name": "GIT_CHECKOUT_DONT_WRITE_INDEX",
              "comment": [
                "Normally checkout writes the index upon completion; this prevents that."
              ]
            },
            {
              "name": "GIT_CHECKOUT_UPDATE_SUBMODULES",
              "comment": [
                "Recursively checkout submodules with same options (NOT IMPLEMENTED)"
              ]
            },
            {
              "name": "GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED",
              "comment": [
                "Recursively checkout submodules if HEAD moved in super repo (NOT IMPLEMENTED)"
              ]
            }
          ],
          "comment": [
            "Checkout behavior flags",
            "In libgit2, checkout is used to update the working directory and index\n to match a target tree.  Unlike git checkout, it does not move the HEAD\n commit for you - use `git_repository_set_head` or the like to do that.",
            "Checkout looks at (up to) four things: the \"target\" tree you want to\n check out, the \"baseline\" tree of what was checked out previously, the\n working directory for actual files, and the index for staged changes.",
            "You give checkout one of three strategies for update:",
            "- `GIT_CHECKOUT_NONE` is a dry-run strategy that checks for conflicts,\n   etc., but doesn't make any actual changes.",
            "- `GIT_CHECKOUT_FORCE` is at the opposite extreme, taking any action to\n   make the working directory match the target (including potentially\n   discarding modified files).",
            "- `GIT_CHECKOUT_SAFE` is between these two options, it will only make\n   modifications that will not lose changes.",
            "|  target == baseline   |  target != baseline  |\n    ---------------------|-----------------------|----------------------|\n     workdir == baseline |       no action       |  create, update, or  |\n                         |                       |     delete file      |\n    ---------------------|-----------------------|----------------------|\n     workdir exists and  |       no action       |   conflict (notify   |\n       is != baseline    | notify dirty MODIFIED | and cancel checkout) |\n    ---------------------|-----------------------|----------------------|\n      workdir missing,   | notify dirty DELETED  |     create file      |\n      baseline present   |                       |                      |\n    ---------------------|-----------------------|----------------------|",
            "To emulate `git checkout`, use `GIT_CHECKOUT_SAFE` with a checkout\n notification callback (see below) that displays information about dirty\n files.  The default behavior will cancel checkout on conflicts.",
            "To emulate `git checkout-index`, use `GIT_CHECKOUT_SAFE` with a\n notification callback that cancels the operation if a dirty-but-existing\n file is found in the working directory.  This core git command isn't\n quite \"force\" but is sensitive about some types of changes.",
            "To emulate `git checkout -f`, use `GIT_CHECKOUT_FORCE`.",
            "There are some additional flags to modify the behavior of checkout:",
            "- GIT_CHECKOUT_ALLOW_CONFLICTS makes SAFE mode apply safe file updates\n   even if there are conflicts (instead of cancelling the checkout).",
            "- GIT_CHECKOUT_REMOVE_UNTRACKED means remove untracked files (i.e. not\n   in target, baseline, or index, and not ignored) from the working dir.",
            "- GIT_CHECKOUT_REMOVE_IGNORED means remove ignored files (that are also\n   untracked) from the working directory as well.",
            "- GIT_CHECKOUT_UPDATE_ONLY means to only update the content of files that\n   already exist.  Files will not be created nor deleted.  This just skips\n   applying adds, deletes, and typechanges.",
            "- GIT_CHECKOUT_DONT_UPDATE_INDEX prevents checkout from writing the\n   updated files' information to the index.",
            "- Normally, checkout will reload the index and git attributes from disk\n   before any operations.  GIT_CHECKOUT_NO_REFRESH prevents this reload.",
            "- Unmerged index entries are conflicts.  GIT_CHECKOUT_SKIP_UNMERGED skips\n   files with unmerged index entries instead.  GIT_CHECKOUT_USE_OURS and\n   GIT_CHECKOUT_USE_THEIRS to proceed with the checkout using either the\n   stage 2 (\"ours\") or stage 3 (\"theirs\") version of files in the index.",
            "- GIT_CHECKOUT_DONT_OVERWRITE_IGNORED prevents ignored files from being\n   overwritten.  Normally, files that are ignored in the working directory\n   are not considered \"precious\" and may be overwritten if the checkout\n   target contains that file.",
            "- GIT_CHECKOUT_DONT_REMOVE_EXISTING prevents checkout from removing\n   files or folders that fold to the same name on case insensitive\n   filesystems.  This can cause files to retain their existing names\n   and write through existing symbolic links."
          ],
          "location": {
            "file": "checkout.h",
            "line": 106,
            "column": 9
          },
          "group": "checkout"
        },
        "git_checkout_notify_t": {
          "kind": "enum",
          "name": "git_checkout_notify_t",
          "referenceName": "git_checkout_notify_t",
          "members": [
            {
              "name": "GIT_CHECKOUT_NOTIFY_NONE",
              "value": "0"
            },
            {
              "name": "GIT_CHECKOUT_NOTIFY_CONFLICT"
            },
            {
              "name": "GIT_CHECKOUT_NOTIFY_DIRTY"
            },
            {
              "name": "GIT_CHECKOUT_NOTIFY_UPDATED"
            },
            {
              "name": "GIT_CHECKOUT_NOTIFY_UNTRACKED"
            },
            {
              "name": "GIT_CHECKOUT_NOTIFY_IGNORED"
            },
            {
              "name": "GIT_CHECKOUT_NOTIFY_ALL"
            }
          ],
          "comment": [
            "Checkout notification flags",
            "Checkout will invoke an options notification callback (`notify_cb`) for\n certain cases - you pick which ones via `notify_flags`:",
            "- GIT_CHECKOUT_NOTIFY_CONFLICT invokes checkout on conflicting paths.",
            "- GIT_CHECKOUT_NOTIFY_DIRTY notifies about \"dirty\" files, i.e. those that\n   do not need an update but no longer match the baseline.  Core git\n   displays these files when checkout runs, but won't stop the checkout.",
            "- GIT_CHECKOUT_NOTIFY_UPDATED sends notification for any file changed.",
            "- GIT_CHECKOUT_NOTIFY_UNTRACKED notifies about untracked files.",
            "- GIT_CHECKOUT_NOTIFY_IGNORED notifies about ignored files.",
            "Returning a non-zero value from this callback will cancel the checkout.\n The non-zero return value will be propagated back and returned by the\n git_checkout_... call.",
            "Notification callbacks are made prior to modifying any files on disk,\n so canceling on any notification will still happen prior to any files\n being modified."
          ],
          "location": {
            "file": "checkout.h",
            "line": 217,
            "column": 9
          },
          "group": "checkout",
          "parameterTo": [
            "git_checkout_notify_cb"
          ]
        },
        "git_checkout_perfdata": {
          "kind": "struct",
          "name": "git_checkout_perfdata",
          "referenceName": "git_checkout_perfdata",
          "comment": [
            "Checkout performance-reporting structure"
          ],
          "members": [
            {
              "name": "mkdir_calls",
              "type": "size_t"
            },
            {
              "name": "stat_calls",
              "type": "size_t"
            },
            {
              "name": "chmod_calls",
              "type": "size_t"
            }
          ],
          "location": {
            "file": "checkout.h",
            "line": 229,
            "column": 9
          },
          "group": "checkout",
          "parameterTo": [
            "git_checkout_perfdata_cb"
          ]
        },
        "git_checkout_notify_cb": {
          "kind": "callback",
          "name": "git_checkout_notify_cb",
          "type": "int (*)(git_checkout_notify_t, const char *, const git_diff_file *, const git_diff_file *, const git_diff_file *, void *)",
          "comment": [
            "Checkout notification callback function"
          ],
          "location": {
            "file": "checkout.h",
            "line": 236,
            "column": 26
          },
          "params": [
            {
              "type": "git_checkout_notify_t"
            },
            {
              "type": "const char *"
            },
            {
              "type": "const git_diff_file *"
            },
            {
              "type": "const git_diff_file *"
            },
            {
              "type": "const git_diff_file *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "checkout",
          "typedef": true
        },
        "git_checkout_progress_cb": {
          "kind": "callback",
          "name": "git_checkout_progress_cb",
          "type": "void (*)(const char *, size_t, size_t, void *)",
          "comment": [
            "Checkout progress notification function"
          ],
          "location": {
            "file": "checkout.h",
            "line": 245,
            "column": 27
          },
          "params": [
            {
              "type": "const char *"
            },
            {
              "type": "size_t"
            },
            {
              "type": "size_t"
            },
            {
              "type": "void *"
            }
          ],
          "returns": {
            "type": "void"
          },
          "group": "checkout",
          "typedef": true
        },
        "git_checkout_perfdata_cb": {
          "kind": "callback",
          "name": "git_checkout_perfdata_cb",
          "type": "void (*)(const git_checkout_perfdata *, void *)",
          "comment": [
            "Checkout perfdata notification function"
          ],
          "location": {
            "file": "checkout.h",
            "line": 252,
            "column": 27
          },
          "params": [
            {
              "type": "const git_checkout_perfdata *"
            },
            {
              "type": "void *"
            }
          ],
          "returns": {
            "type": "void"
          },
          "group": "checkout",
          "typedef": true
        },
        "git_checkout_options": {
          "kind": "struct",
          "name": "git_checkout_options",
          "referenceName": "git_checkout_options",
          "comment": [
            "Checkout options structure",
            "Initialize with `GIT_CHECKOUT_OPTIONS_INIT`. Alternatively, you can\n use `git_checkout_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The version"
              ]
            },
            {
              "name": "checkout_strategy",
              "type": "unsigned int",
              "comment": [
                "default will be a safe checkout"
              ]
            },
            {
              "name": "disable_filters",
              "type": "int",
              "comment": [
                "don't apply filters like CRLF conversion"
              ]
            },
            {
              "name": "dir_mode",
              "type": "unsigned int",
              "comment": [
                "default is 0755"
              ]
            },
            {
              "name": "file_mode",
              "type": "unsigned int",
              "comment": [
                "default is 0644 or 0755 as dictated by blob"
              ]
            },
            {
              "name": "file_open_flags",
              "type": "int",
              "comment": [
                "default is O_CREAT | O_TRUNC | O_WRONLY"
              ]
            },
            {
              "name": "notify_flags",
              "type": "unsigned int",
              "comment": [
                "see `git_checkout_notify_t` above"
              ]
            },
            {
              "name": "notify_cb",
              "type": "git_checkout_notify_cb",
              "comment": [
                "Optional callback to get notifications on specific file states."
              ],
              "see": [
                "git_checkout_notify_t"
              ],
              "referenceType": "int (*)(git_checkout_notify_t, const char *, const git_diff_file *, const git_diff_file *, const git_diff_file *, void *)"
            },
            {
              "name": "notify_payload",
              "type": "void *",
              "comment": [
                "Payload passed to notify_cb"
              ]
            },
            {
              "name": "progress_cb",
              "type": "git_checkout_progress_cb",
              "comment": [
                "Optional callback to notify the consumer of checkout progress."
              ],
              "referenceType": "void (*)(const char *, size_t, size_t, void *)"
            },
            {
              "name": "progress_payload",
              "type": "void *",
              "comment": [
                "Payload passed to progress_cb"
              ]
            },
            {
              "name": "paths",
              "type": "git_strarray",
              "comment": [
                "A list of wildmatch patterns or paths.",
                "By default, all paths are processed. If you pass an array of wildmatch\n patterns, those will be used to filter which paths should be taken into\n account.",
                "Use GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH to treat as a simple list."
              ],
              "referenceType": "struct git_strarray"
            },
            {
              "name": "baseline",
              "type": "git_tree *",
              "comment": [
                "The expected content of the working directory; defaults to HEAD.",
                "If the working directory does not match this baseline information,\n that will produce a checkout conflict."
              ]
            },
            {
              "name": "baseline_index",
              "type": "git_index *",
              "comment": [
                "Like `baseline` above, though expressed as an index.  This\n option overrides `baseline`."
              ]
            },
            {
              "name": "target_directory",
              "type": "const char *",
              "comment": [
                "alternative checkout path to workdir"
              ]
            },
            {
              "name": "ancestor_label",
              "type": "const char *",
              "comment": [
                "the name of the common ancestor side of conflicts"
              ]
            },
            {
              "name": "our_label",
              "type": "const char *",
              "comment": [
                "the name of the \"our\" side of conflicts"
              ]
            },
            {
              "name": "their_label",
              "type": "const char *",
              "comment": [
                "the name of the \"their\" side of conflicts"
              ]
            },
            {
              "name": "perfdata_cb",
              "type": "git_checkout_perfdata_cb",
              "comment": [
                "Optional callback to notify the consumer of performance data."
              ],
              "referenceType": "void (*)(const git_checkout_perfdata *, void *)"
            },
            {
              "name": "perfdata_payload",
              "type": "void *",
              "comment": [
                "Payload passed to perfdata_cb"
              ]
            }
          ],
          "location": {
            "file": "checkout.h",
            "line": 263,
            "column": 16
          },
          "group": "checkout",
          "parameterTo": [
            "git_checkout_options_init",
            "git_checkout_head",
            "git_checkout_index",
            "git_checkout_tree",
            "git_checkout_init_options",
            "git_merge",
            "git_reset",
            "git_reset_from_annotated"
          ]
        },
        "GIT_CHECKOUT_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_CHECKOUT_OPTIONS_VERSION",
          "location": {
            "file": "checkout.h",
            "line": 328,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "checkout"
        },
        "GIT_CHECKOUT_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_CHECKOUT_OPTIONS_INIT",
          "location": {
            "file": "checkout.h",
            "line": 329,
            "column": 9
          },
          "value": "{GIT_CHECKOUT_OPTIONS_VERSION, GIT_CHECKOUT_SAFE}",
          "comment": "",
          "group": "checkout"
        },
        "git_checkout_options_init": {
          "kind": "function",
          "name": "git_checkout_options_init",
          "location": {
            "file": "checkout.h",
            "line": 341,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_checkout_options *",
              "direction": "in",
              "comment": "The `git_checkout_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_CHECKOUT_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_checkout_options structure",
            "Initializes a `git_checkout_options` with default values. Equivalent to creating\n an instance with GIT_CHECKOUT_OPTIONS_INIT."
          ],
          "group": "checkout"
        },
        "git_checkout_head": {
          "kind": "function",
          "name": "git_checkout_head",
          "location": {
            "file": "checkout.h",
            "line": 362,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EUNBORNBRANCH if HEAD points to a non\n         existing branch, non-zero value returned by `notify_cb`, or\n         other error code \n<\n 0 (use git_error_last for error details)"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository to check out (must be non-bare)"
            },
            {
              "name": "opts",
              "type": "const git_checkout_options *",
              "direction": "in",
              "comment": "specifies checkout options (may be NULL)"
            }
          ],
          "comment": [
            "Updates files in the index and the working tree to match the content of\n the commit pointed at by HEAD.",
            "Note that this is _not_ the correct mechanism used to switch branches;\n do not change your `HEAD` and then call this method, that would leave\n you with checkout conflicts since your working directory would then\n appear to be dirty.  Instead, checkout the target of the branch and\n then update `HEAD` using `git_repository_set_head` to point to the\n branch you checked out."
          ],
          "group": "checkout"
        },
        "git_checkout_index": {
          "kind": "function",
          "name": "git_checkout_index",
          "location": {
            "file": "checkout.h",
            "line": 375,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero return value from `notify_cb`, or error\n         code \n<\n 0 (use git_error_last for error details)"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository into which to check out (must be non-bare)"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "index to be checked out (or NULL to use repository index)"
            },
            {
              "name": "opts",
              "type": "const git_checkout_options *",
              "direction": "in",
              "comment": "specifies checkout options (may be NULL)"
            }
          ],
          "comment": [
            "Updates files in the working tree to match the content of the index."
          ],
          "group": "checkout"
        },
        "git_checkout_tree": {
          "kind": "function",
          "name": "git_checkout_tree",
          "location": {
            "file": "checkout.h",
            "line": 391,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero return value from `notify_cb`, or error\n         code \n<\n 0 (use git_error_last for error details)"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository to check out (must be non-bare)"
            },
            {
              "name": "treeish",
              "type": "const git_object *",
              "direction": "in",
              "comment": "a commit, tag or tree which content will be used to update\n the working directory (or NULL to use HEAD)"
            },
            {
              "name": "opts",
              "type": "const git_checkout_options *",
              "direction": "in",
              "comment": "specifies checkout options (may be NULL)"
            }
          ],
          "comment": [
            "Updates files in the index and working tree to match the content of the\n tree pointed at by the treeish."
          ],
          "group": "checkout"
        }
      },
      "info": {
        "summary": "Git checkout routines"
      }
    },
    "cherrypick": {
      "apis": {
        "git_cherrypick_options": {
          "kind": "struct",
          "name": "git_cherrypick_options",
          "referenceName": "git_cherrypick_options",
          "comment": [
            "Cherry-pick options"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "mainline",
              "type": "unsigned int",
              "comment": [
                "For merge commits, the \"mainline\" is treated as the parent."
              ]
            },
            {
              "name": "merge_opts",
              "type": "git_merge_options",
              "comment": [
                "Options for the merging"
              ],
              "referenceType": "struct git_merge_options"
            },
            {
              "name": "checkout_opts",
              "type": "git_checkout_options",
              "comment": [
                "Options for the checkout"
              ],
              "referenceType": "struct git_checkout_options"
            }
          ],
          "location": {
            "file": "cherrypick.h",
            "line": 26,
            "column": 9
          },
          "group": "cherrypick",
          "parameterTo": [
            "git_cherrypick_options_init",
            "git_cherrypick",
            "git_cherrypick_init_options"
          ]
        },
        "GIT_CHERRYPICK_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_CHERRYPICK_OPTIONS_VERSION",
          "location": {
            "file": "cherrypick.h",
            "line": 36,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "cherrypick"
        },
        "GIT_CHERRYPICK_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_CHERRYPICK_OPTIONS_INIT",
          "location": {
            "file": "cherrypick.h",
            "line": 37,
            "column": 9
          },
          "value": "{GIT_CHERRYPICK_OPTIONS_VERSION, 0, GIT_MERGE_OPTIONS_INIT, GIT_CHECKOUT_OPTIONS_INIT}",
          "comment": "",
          "group": "cherrypick"
        },
        "git_cherrypick_options_init": {
          "kind": "function",
          "name": "git_cherrypick_options_init",
          "location": {
            "file": "cherrypick.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_cherrypick_options *",
              "direction": "in",
              "comment": "The `git_cherrypick_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_CHERRYPICK_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_cherrypick_options structure",
            "Initializes a `git_cherrypick_options` with default values. Equivalent to creating\n an instance with GIT_CHERRYPICK_OPTIONS_INIT."
          ],
          "group": "cherrypick"
        },
        "git_cherrypick_commit": {
          "kind": "function",
          "name": "git_cherrypick_commit",
          "location": {
            "file": "cherrypick.h",
            "line": 67,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "zero on success, -1 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "pointer to store the index result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository that contains the given commits"
            },
            {
              "name": "cherrypick_commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to cherry-pick"
            },
            {
              "name": "our_commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to cherry-pick against (eg, HEAD)"
            },
            {
              "name": "mainline",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the parent of the `cherrypick_commit`, if it is a merge"
            },
            {
              "name": "merge_options",
              "type": "const git_merge_options *",
              "direction": "in",
              "comment": "the merge options (or null for defaults)"
            }
          ],
          "comment": [
            "Cherry-picks the given commit against the given \"our\" commit, producing an\n index that reflects the result of the cherry-pick.",
            "The returned index must be freed explicitly with `git_index_free`."
          ],
          "group": "cherrypick"
        },
        "git_cherrypick": {
          "kind": "function",
          "name": "git_cherrypick",
          "location": {
            "file": "cherrypick.h",
            "line": 83,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "zero on success, -1 on failure."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to cherry-pick"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to cherry-pick"
            },
            {
              "name": "cherrypick_options",
              "type": "const git_cherrypick_options *",
              "direction": "in",
              "comment": "the cherry-pick options (or null for defaults)"
            }
          ],
          "comment": [
            "Cherry-pick the given commit, producing changes in the index and working directory."
          ],
          "group": "cherrypick"
        }
      },
      "info": {
        "summary": "Git cherry-pick routines"
      }
    },
    "clone": {
      "apis": {
        "git_clone_local_t": {
          "kind": "enum",
          "name": "git_clone_local_t",
          "referenceName": "git_clone_local_t",
          "members": [
            {
              "name": "GIT_CLONE_LOCAL_AUTO",
              "comment": [
                "Auto-detect (default), libgit2 will bypass the git-aware\n transport for local paths, but use a normal fetch for\n `file://` urls."
              ]
            },
            {
              "name": "GIT_CLONE_LOCAL",
              "comment": [
                "Bypass the git-aware transport even for a `file://` url."
              ]
            },
            {
              "name": "GIT_CLONE_NO_LOCAL",
              "comment": [
                "Do no bypass the git-aware transport"
              ]
            },
            {
              "name": "GIT_CLONE_LOCAL_NO_LINKS",
              "comment": [
                "Bypass the git-aware transport, but do not try to use\n hardlinks."
              ]
            }
          ],
          "comment": [
            "Options for bypassing the git-aware transport on clone. Bypassing\n it means that instead of a fetch, libgit2 will copy the object\n database directory instead of figuring out what it needs, which is\n faster. If possible, it will hardlink the files to save space."
          ],
          "location": {
            "file": "clone.h",
            "line": 33,
            "column": 9
          },
          "group": "clone"
        },
        "git_remote_create_cb": {
          "kind": "callback",
          "name": "git_remote_create_cb",
          "type": "int (*)(git_remote **, git_repository *, const char *, const char *, void *)",
          "comment": [
            "The signature of a function matching git_remote_create, with an additional\n void* as a callback payload.",
            "Callers of git_clone may provide a function matching this signature to override\n the remote creation and customization process during a clone operation."
          ],
          "location": {
            "file": "clone.h",
            "line": 69,
            "column": 26
          },
          "params": [
            {
              "name": "out",
              "direction": "in",
              "comment": "the resulting remote",
              "type": "git_remote **"
            },
            {
              "name": "repo",
              "direction": "in",
              "comment": "the repository in which to create the remote",
              "type": "git_repository *"
            },
            {
              "name": "name",
              "direction": "in",
              "comment": "the remote's name",
              "type": "const char *"
            },
            {
              "name": "url",
              "direction": "in",
              "comment": "the remote's url",
              "type": "const char *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "an opaque payload",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code",
            "type": "int"
          },
          "group": "clone",
          "typedef": true
        },
        "git_repository_create_cb": {
          "kind": "callback",
          "name": "git_repository_create_cb",
          "type": "int (*)(git_repository **, const char *, int, void *)",
          "comment": [
            "The signature of a function matchin git_repository_init, with an\n aditional void * as callback payload.",
            "Callers of git_clone my provide a function matching this signature\n to override the repository creation and customization process\n during a clone operation."
          ],
          "location": {
            "file": "clone.h",
            "line": 90,
            "column": 26
          },
          "params": [
            {
              "name": "out",
              "direction": "in",
              "comment": "the resulting repository",
              "type": "git_repository **"
            },
            {
              "name": "path",
              "direction": "in",
              "comment": "path in which to create the repository",
              "type": "const char *"
            },
            {
              "name": "bare",
              "direction": "in",
              "comment": "whether the repository is bare. This is the value from the clone options",
              "type": "int"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "payload specified by the options",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0, or a negative value to indicate error",
            "type": "int"
          },
          "group": "clone",
          "typedef": true
        },
        "git_clone_options": {
          "kind": "struct",
          "name": "git_clone_options",
          "referenceName": "git_clone_options",
          "comment": [
            "Clone options structure",
            "Initialize with `GIT_CLONE_OPTIONS_INIT`. Alternatively, you can\n use `git_clone_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "checkout_opts",
              "type": "git_checkout_options",
              "comment": [
                "These options are passed to the checkout step. To disable\n checkout, set the `checkout_strategy` to\n `GIT_CHECKOUT_NONE`."
              ],
              "referenceType": "struct git_checkout_options"
            },
            {
              "name": "fetch_opts",
              "type": "git_fetch_options",
              "comment": [
                "Options which control the fetch, including callbacks.",
                "The callbacks are used for reporting fetch progress, and for acquiring\n credentials in the event they are needed."
              ],
              "referenceType": "struct git_fetch_options"
            },
            {
              "name": "bare",
              "type": "int",
              "comment": [
                "Set to zero (false) to create a standard repo, or non-zero\n for a bare repo"
              ]
            },
            {
              "name": "local",
              "type": "git_clone_local_t",
              "comment": [
                "Whether to use a fetch or copy the object database."
              ],
              "referenceType": "enum git_clone_local_t"
            },
            {
              "name": "checkout_branch",
              "type": "const char *",
              "comment": [
                "The name of the branch to checkout. NULL means use the\n remote's default branch."
              ]
            },
            {
              "name": "repository_cb",
              "type": "git_repository_create_cb",
              "comment": [
                "A callback used to create the new repository into which to\n clone. If NULL, the 'bare' field will be used to determine\n whether to create a bare repository."
              ],
              "referenceType": "int (*)(git_repository **, const char *, int, void *)"
            },
            {
              "name": "repository_cb_payload",
              "type": "void *",
              "comment": [
                "An opaque payload to pass to the git_repository creation callback.\n This parameter is ignored unless repository_cb is non-NULL."
              ]
            },
            {
              "name": "remote_cb",
              "type": "git_remote_create_cb",
              "comment": [
                "A callback used to create the git_remote, prior to its being\n used to perform the clone operation. See the documentation for\n git_remote_create_cb for details. This parameter may be NULL,\n indicating that git_clone should provide default behavior."
              ],
              "referenceType": "int (*)(git_remote **, git_repository *, const char *, const char *, void *)"
            },
            {
              "name": "remote_cb_payload",
              "type": "void *",
              "comment": [
                "An opaque payload to pass to the git_remote creation callback.\n This parameter is ignored unless remote_cb is non-NULL."
              ]
            }
          ],
          "location": {
            "file": "clone.h",
            "line": 103,
            "column": 16
          },
          "group": "clone",
          "parameterTo": [
            "git_clone_options_init",
            "git_clone",
            "git_clone_init_options"
          ]
        },
        "GIT_CLONE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_CLONE_OPTIONS_VERSION",
          "location": {
            "file": "clone.h",
            "line": 166,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "clone"
        },
        "GIT_CLONE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_CLONE_OPTIONS_INIT",
          "location": {
            "file": "clone.h",
            "line": 169,
            "column": 9
          },
          "value": "{ GIT_CLONE_OPTIONS_VERSION, { GIT_CHECKOUT_OPTIONS_VERSION, GIT_CHECKOUT_SAFE }, GIT_FETCH_OPTIONS_INIT }",
          "comment": "",
          "group": "clone"
        },
        "git_clone_options_init": {
          "kind": "function",
          "name": "git_clone_options_init",
          "location": {
            "file": "clone.h",
            "line": 181,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_clone_options *",
              "direction": "in",
              "comment": "The `git_clone_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_CLONE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_clone_options structure",
            "Initializes a `git_clone_options` with default values. Equivalent to creating\n an instance with GIT_CLONE_OPTIONS_INIT."
          ],
          "group": "clone"
        },
        "git_clone": {
          "kind": "function",
          "name": "git_clone",
          "location": {
            "file": "clone.h",
            "line": 201,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, any non-zero return value from a callback\n         function, or a negative value to indicate an error (use\n         `git_error_last` for a detailed error message)"
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer that will receive the resulting repository object"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote repository to clone"
            },
            {
              "name": "local_path",
              "type": "const char *",
              "direction": "in",
              "comment": "local directory to clone to"
            },
            {
              "name": "options",
              "type": "const git_clone_options *",
              "direction": "in",
              "comment": "configuration options for the clone.  If NULL, the\n        function works as though GIT_OPTIONS_INIT were passed."
            }
          ],
          "comment": [
            "Clone a remote repository.",
            "By default this creates its repository and initial remote to match\n git's defaults. You can use the options in the callback to\n customize how these are created."
          ],
          "group": "clone"
        }
      },
      "info": {
        "summary": "Git cloning routines"
      }
    },
    "commit": {
      "apis": {
        "git_commit_lookup": {
          "kind": "function",
          "name": "git_commit_lookup",
          "location": {
            "file": "commit.h",
            "line": 36,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the looked up commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the commit."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit."
            }
          ],
          "comment": [
            "Lookup a commit object from a repository.",
            "The returned object should be released with `git_commit_free` when no\n longer needed."
          ],
          "group": "commit"
        },
        "git_commit_lookup_prefix": {
          "kind": "function",
          "name": "git_commit_lookup_prefix",
          "location": {
            "file": "commit.h",
            "line": 55,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit **",
              "direction": "in",
              "comment": "pointer to the looked up commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the commit."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit."
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a commit object from a repository, given a prefix of its\n identifier (short id).",
            "The returned object should be released with `git_commit_free` when no\n longer needed."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "commit"
        },
        "git_commit_free": {
          "kind": "function",
          "name": "git_commit_free",
          "location": {
            "file": "commit.h",
            "line": 70,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to close"
            }
          ],
          "comment": [
            "Close an open commit",
            "This is a wrapper around git_object_free()",
            "IMPORTANT:\n It *is* necessary to call this method when you stop\n using a commit. Failure to do so will cause a memory leak."
          ],
          "group": "commit"
        },
        "git_commit_id": {
          "kind": "function",
          "name": "git_commit_id",
          "location": {
            "file": "commit.h",
            "line": 78,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the commit."
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the id of a commit."
          ],
          "group": "commit"
        },
        "git_commit_owner": {
          "kind": "function",
          "name": "git_commit_owner",
          "location": {
            "file": "commit.h",
            "line": 86,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "Repository that contains this commit."
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "A previously loaded commit."
            }
          ],
          "comment": [
            "Get the repository that contains the commit."
          ],
          "group": "commit"
        },
        "git_commit_message_encoding": {
          "kind": "function",
          "name": "git_commit_message_encoding",
          "location": {
            "file": "commit.h",
            "line": 98,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "NULL, or the encoding"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the encoding for the message of a commit,\n as a string representing a standard encoding name.",
            "The encoding may be NULL if the `encoding` header\n in the commit is missing; in that case UTF-8 is assumed."
          ],
          "group": "commit"
        },
        "git_commit_message": {
          "kind": "function",
          "name": "git_commit_message",
          "location": {
            "file": "commit.h",
            "line": 109,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the message of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the full message of a commit.",
            "The returned message will be slightly prettified by removing any\n potential leading newlines."
          ],
          "group": "commit"
        },
        "git_commit_message_raw": {
          "kind": "function",
          "name": "git_commit_message_raw",
          "location": {
            "file": "commit.h",
            "line": 117,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the raw message of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the full raw message of a commit."
          ],
          "group": "commit"
        },
        "git_commit_summary": {
          "kind": "function",
          "name": "git_commit_summary",
          "location": {
            "file": "commit.h",
            "line": 128,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the summary of a commit or NULL on error"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the short \"summary\" of the git commit message.",
            "The returned message is the summary of the commit, comprising the\n first paragraph of the message with whitespace trimmed and squashed."
          ],
          "group": "commit"
        },
        "git_commit_body": {
          "kind": "function",
          "name": "git_commit_body",
          "location": {
            "file": "commit.h",
            "line": 141,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the body of a commit or NULL when no the message only\n   consists of a summary"
          },
          "params": [
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the long \"body\" of the git commit message.",
            "The returned message is the body of the commit, comprising\n everything but the first paragraph of the message. Leading and\n trailing whitespaces are trimmed."
          ],
          "group": "commit"
        },
        "git_commit_time": {
          "kind": "function",
          "name": "git_commit_time",
          "location": {
            "file": "commit.h",
            "line": 149,
            "column": 24
          },
          "returns": {
            "type": "git_time_t",
            "comment": "the time of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the commit time (i.e. committer time) of a commit."
          ],
          "group": "commit"
        },
        "git_commit_time_offset": {
          "kind": "function",
          "name": "git_commit_time_offset",
          "location": {
            "file": "commit.h",
            "line": 157,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "positive or negative timezone offset, in minutes from UTC"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the commit timezone offset (i.e. committer's preferred timezone) of a commit."
          ],
          "group": "commit"
        },
        "git_commit_committer": {
          "kind": "function",
          "name": "git_commit_committer",
          "location": {
            "file": "commit.h",
            "line": 165,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the committer of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the committer of a commit."
          ],
          "group": "commit"
        },
        "git_commit_author": {
          "kind": "function",
          "name": "git_commit_author",
          "location": {
            "file": "commit.h",
            "line": 173,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the author of a commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the author of a commit."
          ],
          "group": "commit"
        },
        "git_commit_committer_with_mailmap": {
          "kind": "function",
          "name": "git_commit_committer_with_mailmap",
          "location": {
            "file": "commit.h",
            "line": 186,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "a pointer to store the resolved signature."
            },
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "mailmap",
              "type": "const git_mailmap *",
              "direction": "in",
              "comment": "the mailmap to resolve with. (may be NULL)"
            }
          ],
          "comment": [
            "Get the committer of a commit, using the mailmap to map names and email\n addresses to canonical real names and email addresses.",
            "Call `git_signature_free` to free the signature."
          ],
          "group": "commit"
        },
        "git_commit_author_with_mailmap": {
          "kind": "function",
          "name": "git_commit_author_with_mailmap",
          "location": {
            "file": "commit.h",
            "line": 200,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "a pointer to store the resolved signature."
            },
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "mailmap",
              "type": "const git_mailmap *",
              "direction": "in",
              "comment": "the mailmap to resolve with. (may be NULL)"
            }
          ],
          "comment": [
            "Get the author of a commit, using the mailmap to map names and email\n addresses to canonical real names and email addresses.",
            "Call `git_signature_free` to free the signature."
          ],
          "group": "commit"
        },
        "git_commit_raw_header": {
          "kind": "function",
          "name": "git_commit_raw_header",
          "location": {
            "file": "commit.h",
            "line": 209,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the header text of the commit"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit"
            }
          ],
          "comment": [
            "Get the full raw text of the commit header."
          ],
          "group": "commit"
        },
        "git_commit_tree": {
          "kind": "function",
          "name": "git_commit_tree",
          "location": {
            "file": "commit.h",
            "line": 218,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tree_out",
              "type": "git_tree **",
              "direction": "in",
              "comment": "pointer where to store the tree object"
            },
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the tree pointed to by a commit."
          ],
          "group": "commit"
        },
        "git_commit_tree_id": {
          "kind": "function",
          "name": "git_commit_tree_id",
          "location": {
            "file": "commit.h",
            "line": 228,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the id of tree pointed to by commit."
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the id of the tree pointed to by a commit. This differs from\n `git_commit_tree` in that no attempts are made to fetch an object\n from the ODB."
          ],
          "group": "commit"
        },
        "git_commit_parentcount": {
          "kind": "function",
          "name": "git_commit_parentcount",
          "location": {
            "file": "commit.h",
            "line": 236,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "integer of count of parents"
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            }
          ],
          "comment": [
            "Get the number of parents of this commit"
          ],
          "group": "commit"
        },
        "git_commit_parent": {
          "kind": "function",
          "name": "git_commit_parent",
          "location": {
            "file": "commit.h",
            "line": 246,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_commit **",
              "direction": "in",
              "comment": "Pointer where to store the parent commit"
            },
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position of the parent (from 0 to `parentcount`)"
            }
          ],
          "comment": [
            "Get the specified parent of the commit."
          ],
          "group": "commit"
        },
        "git_commit_parent_id": {
          "kind": "function",
          "name": "git_commit_parent_id",
          "location": {
            "file": "commit.h",
            "line": 260,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the id of the parent, NULL on error."
          },
          "params": [
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the position of the parent (from 0 to `parentcount`)"
            }
          ],
          "comment": [
            "Get the oid of a specified parent for a commit. This is different from\n `git_commit_parent`, which will attempt to load the parent commit from\n the ODB."
          ],
          "group": "commit"
        },
        "git_commit_nth_gen_ancestor": {
          "kind": "function",
          "name": "git_commit_nth_gen_ancestor",
          "location": {
            "file": "commit.h",
            "line": 278,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_ENOTFOUND if no matching ancestor exists\n or an error code"
          },
          "params": [
            {
              "name": "ancestor",
              "type": "git_commit **",
              "direction": "in",
              "comment": "Pointer where to store the ancestor commit"
            },
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the requested generation"
            }
          ],
          "comment": [
            "Get the commit object that is the \n<n>th generation ancestor\n of the named commit object, following only the first parents.\n The returned commit has to be freed by the caller.",
            "Passing `0` as the generation number returns another instance of the\n base commit itself."
          ],
          "group": "commit"
        },
        "git_commit_header_field": {
          "kind": "function",
          "name": "git_commit_header_field",
          "location": {
            "file": "commit.h",
            "line": 293,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on succeess, GIT_ENOTFOUND if the field does not exist,\n or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the buffer to fill; existing content will be\n overwritten"
            },
            {
              "name": "commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "the commit to look in"
            },
            {
              "name": "field",
              "type": "const char *",
              "direction": "in",
              "comment": "the header field to return"
            }
          ],
          "comment": [
            "Get an arbitrary header field"
          ],
          "group": "commit"
        },
        "git_commit_extract_signature": {
          "kind": "function",
          "name": "git_commit_extract_signature",
          "location": {
            "file": "commit.h",
            "line": 313,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if the id is not for a commit\n or the commit does not have a signature."
          },
          "params": [
            {
              "name": "signature",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the signature block; existing content will be\n overwritten"
            },
            {
              "name": "signed_data",
              "type": "git_buf *",
              "direction": "in",
              "comment": "signed data; this is the commit contents minus the signature block;\n existing content will be overwritten"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which the commit exists"
            },
            {
              "name": "commit_id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the commit from which to extract the data"
            },
            {
              "name": "field",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the header field containing the signature\n block; pass `NULL` to extract the default 'gpgsig'"
            }
          ],
          "comment": [
            "Extract the signature from a commit",
            "If the id is not for a commit, the error class will be\n `GIT_ERROR_INVALID`. If the commit does not have a signature, the\n error class will be `GIT_ERROR_OBJECT`."
          ],
          "group": "commit"
        },
        "git_commit_create": {
          "kind": "function",
          "name": "git_commit_create",
          "location": {
            "file": "commit.h",
            "line": 359,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code\n\tThe created commit will be written to the Object Database and\n\tthe given reference will be updated to point to it"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer in which to store the OID of the newly created commit"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the commit"
            },
            {
              "name": "update_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "If not NULL, name of the reference that\n\twill be updated to point to this commit. If the reference\n\tis not direct, it will be resolved to a direct reference.\n\tUse \"HEAD\" to update the HEAD of the current branch and\n\tmake it point to this commit. If the reference doesn't\n\texist yet, it will be created. If it does exist, the first\n\tparent must be the tip of this branch."
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature with author and author time of commit"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature with committer and * commit time of commit"
            },
            {
              "name": "message_encoding",
              "type": "const char *",
              "direction": "in",
              "comment": "The encoding for the message in the\n  commit, represented with a standard encoding name.\n  E.g. \"UTF-8\". If NULL, no encoding header is written and\n  UTF-8 is assumed."
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "Full message for this commit"
            },
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "An instance of a `git_tree` object that will\n  be used as the tree for the commit. This tree object must\n  also be owned by the given `repo`."
            },
            {
              "name": "parent_count",
              "type": "size_t",
              "direction": "in",
              "comment": "Number of parents for this commit"
            },
            {
              "name": "parents",
              "type": "const git_commit **",
              "direction": "in",
              "comment": "Array of `parent_count` pointers to `git_commit`\n  objects that will be used as the parents for this commit. This\n  array may be NULL if `parent_count` is 0 (root commit). All the\n  given commits must be owned by the `repo`."
            }
          ],
          "comment": [
            "Create new commit in the repository from a list of `git_object` pointers",
            "The message will **not** be cleaned up automatically. You can do that\n with the `git_message_prettify()` function."
          ],
          "group": "commit"
        },
        "git_commit_create_v": {
          "kind": "function",
          "name": "git_commit_create_v",
          "location": {
            "file": "commit.h",
            "line": 385,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "update_ref",
              "type": "const char *"
            },
            {
              "name": "author",
              "type": "const git_signature *"
            },
            {
              "name": "committer",
              "type": "const git_signature *"
            },
            {
              "name": "message_encoding",
              "type": "const char *"
            },
            {
              "name": "message",
              "type": "const char *"
            },
            {
              "name": "tree",
              "type": "const git_tree *"
            },
            {
              "name": "parent_count",
              "type": "size_t"
            }
          ],
          "comment": [
            "Create new commit in the repository using a variable argument list.",
            "The message will **not** be cleaned up automatically. You can do that\n with the `git_message_prettify()` function.",
            "The parents for the commit are specified as a variable list of pointers\n to `const git_commit *`. Note that this is a convenience method which may\n not be safe to export for certain languages or compilers",
            "All other parameters remain the same as `git_commit_create()`."
          ],
          "see": [
            "git_commit_create"
          ],
          "group": "commit"
        },
        "git_commit_amend": {
          "kind": "function",
          "name": "git_commit_amend",
          "location": {
            "file": "commit.h",
            "line": 418,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *"
            },
            {
              "name": "commit_to_amend",
              "type": "const git_commit *"
            },
            {
              "name": "update_ref",
              "type": "const char *"
            },
            {
              "name": "author",
              "type": "const git_signature *"
            },
            {
              "name": "committer",
              "type": "const git_signature *"
            },
            {
              "name": "message_encoding",
              "type": "const char *"
            },
            {
              "name": "message",
              "type": "const char *"
            },
            {
              "name": "tree",
              "type": "const git_tree *"
            }
          ],
          "comment": [
            "Amend an existing commit by replacing only non-NULL values.",
            "This creates a new commit that is exactly the same as the old commit,\n except that any non-NULL values will be updated.  The new commit has\n the same parents as the old commit.",
            "The `update_ref` value works as in the regular `git_commit_create()`,\n updating the ref to point to the newly rewritten commit.  If you want\n to amend a commit that is not currently the tip of the branch and then\n rewrite the following commits to reach a ref, pass this as NULL and\n update the rest of the commit chain and ref separately.",
            "Unlike `git_commit_create()`, the `author`, `committer`, `message`,\n `message_encoding`, and `tree` parameters can be NULL in which case this\n will use the values from the original `commit_to_amend`.",
            "All parameters have the same meanings as in `git_commit_create()`."
          ],
          "see": [
            "git_commit_create"
          ],
          "group": "commit"
        },
        "git_commit_create_buffer": {
          "kind": "function",
          "name": "git_commit_create_buffer",
          "location": {
            "file": "commit.h",
            "line": 463,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the buffer into which to write the commit object content"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where the referenced tree and parents live"
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature with author and author time of commit"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature with committer and * commit time of commit"
            },
            {
              "name": "message_encoding",
              "type": "const char *",
              "direction": "in",
              "comment": "The encoding for the message in the\n  commit, represented with a standard encoding name.\n  E.g. \"UTF-8\". If NULL, no encoding header is written and\n  UTF-8 is assumed."
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "Full message for this commit"
            },
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "An instance of a `git_tree` object that will\n  be used as the tree for the commit. This tree object must\n  also be owned by the given `repo`."
            },
            {
              "name": "parent_count",
              "type": "size_t",
              "direction": "in",
              "comment": "Number of parents for this commit"
            },
            {
              "name": "parents",
              "type": "const git_commit **",
              "direction": "in",
              "comment": "Array of `parent_count` pointers to `git_commit`\n  objects that will be used as the parents for this commit. This\n  array may be NULL if `parent_count` is 0 (root commit). All the\n  given commits must be owned by the `repo`."
            }
          ],
          "comment": [
            "Create a commit and write it into a buffer",
            "Create a commit as with `git_commit_create()` but instead of\n writing it to the objectdb, write the contents of the object into a\n buffer."
          ],
          "group": "commit"
        },
        "git_commit_create_with_signature": {
          "kind": "function",
          "name": "git_commit_create_with_signature",
          "location": {
            "file": "commit.h",
            "line": 489,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the resulting commit id"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "commit_content",
              "type": "const char *",
              "direction": "in",
              "comment": "the content of the unsigned commit object"
            },
            {
              "name": "signature",
              "type": "const char *",
              "direction": "in",
              "comment": "the signature to add to the commit. Leave `NULL`\n to create a commit without adding a signature field."
            },
            {
              "name": "signature_field",
              "type": "const char *",
              "direction": "in",
              "comment": "which header field should contain this\n signature. Leave `NULL` for the default of \"gpgsig\""
            }
          ],
          "comment": [
            "Create a commit object from the given buffer and signature",
            "Given the unsigned commit object's contents, its signature and the\n header field in which to store the signature, attach the signature\n to the commit and write it into the given repository."
          ],
          "group": "commit"
        },
        "git_commit_dup": {
          "kind": "function",
          "name": "git_commit_dup",
          "location": {
            "file": "commit.h",
            "line": 503,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_commit **",
              "direction": "in",
              "comment": "Pointer to store the copy of the commit"
            },
            {
              "name": "source",
              "type": "git_commit *",
              "direction": "in",
              "comment": "Original commit to copy"
            }
          ],
          "comment": [
            "Create an in-memory copy of a commit. The copy must be explicitly\n free'd or it will leak."
          ],
          "group": "commit"
        },
        "git_commit_signing_cb": {
          "kind": "callback",
          "name": "git_commit_signing_cb",
          "type": "int (*)(git_buf *, git_buf *, const char *, void *)",
          "comment": [
            "Commit signing callback.",
            "The callback will be called with the commit content, giving a user an\n opportunity to sign the commit content. The signature_field\n buf may be left empty to specify the default field \"gpgsig\".",
            "Signatures can take the form of any string, and can be created on an arbitrary\n header field. Signatures are most commonly used for verifying authorship of a\n commit using GPG or a similar cryptographically secure signing algorithm.\n See https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work for more\n details.",
            "When the callback:\n - returns GIT_PASSTHROUGH, no signature will be added to the commit.\n - returns \n<\n 0, commit creation will be aborted.\n - returns GIT_OK, the signature parameter is expected to be filled."
          ],
          "location": {
            "file": "commit.h",
            "line": 523,
            "column": 15
          },
          "params": [
            {
              "type": "git_buf *"
            },
            {
              "type": "git_buf *"
            },
            {
              "type": "const char *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "commit",
          "typedef": true
        },
        "git_commit": {
          "kind": "struct",
          "name": "git_commit",
          "referenceName": "struct git_commit",
          "opaque": true,
          "comment": [
            "Parsed representation of a commit object."
          ],
          "location": {
            "file": "types.h",
            "line": 127,
            "column": 27
          },
          "group": "commit",
          "parameterTo": [
            "git_branch_create",
            "git_cherrypick_commit",
            "git_cherrypick",
            "git_commit_lookup",
            "git_commit_lookup_prefix",
            "git_commit_free",
            "git_commit_id",
            "git_commit_owner",
            "git_commit_message_encoding",
            "git_commit_message",
            "git_commit_message_raw",
            "git_commit_summary",
            "git_commit_body",
            "git_commit_time",
            "git_commit_time_offset",
            "git_commit_committer",
            "git_commit_author",
            "git_commit_committer_with_mailmap",
            "git_commit_author_with_mailmap",
            "git_commit_raw_header",
            "git_commit_tree",
            "git_commit_tree_id",
            "git_commit_parentcount",
            "git_commit_parent",
            "git_commit_parent_id",
            "git_commit_nth_gen_ancestor",
            "git_commit_header_field",
            "git_commit_create",
            "git_commit_amend",
            "git_commit_create_buffer",
            "git_commit_dup",
            "git_diff_commit_as_email",
            "git_merge_commits",
            "git_note_commit_iterator_new",
            "git_note_commit_read",
            "git_note_commit_create",
            "git_note_commit_remove",
            "git_revert_commit",
            "git_revert"
          ]
        }
      },
      "info": {
        "summary": "Git commit parsing, formatting routines"
      }
    },
    "sys/commit": {
      "apis": {
        "git_commit_create_from_ids": {
          "kind": "function",
          "name": "git_commit_create_from_ids",
          "location": {
            "file": "sys/commit.h",
            "line": 34,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "update_ref",
              "type": "const char *"
            },
            {
              "name": "author",
              "type": "const git_signature *"
            },
            {
              "name": "committer",
              "type": "const git_signature *"
            },
            {
              "name": "message_encoding",
              "type": "const char *"
            },
            {
              "name": "message",
              "type": "const char *"
            },
            {
              "name": "tree",
              "type": "const git_oid *"
            },
            {
              "name": "parent_count",
              "type": "size_t"
            },
            {
              "name": "parents",
              "type": "const git_oid **"
            }
          ],
          "comment": [
            "Create new commit in the repository from a list of `git_oid` values.",
            "See documentation for `git_commit_create()` for information about the\n parameters, as the meaning is identical excepting that `tree` and\n `parents` now take `git_oid`.  This is a dangerous API in that nor\n the `tree`, neither the `parents` list of `git_oid`s are checked for\n validity."
          ],
          "see": [
            "git_commit_create"
          ],
          "group": "sys/commit"
        },
        "git_commit_parent_callback": {
          "kind": "callback",
          "name": "git_commit_parent_callback",
          "type": "const git_oid *(*)(size_t, void *)",
          "comment": [
            "Callback function to return parents for commit.",
            "This is invoked with the count of the number of parents processed so far\n along with the user supplied payload.  This should return a git_oid of\n the next parent or NULL if all parents have been provided."
          ],
          "location": {
            "file": "sys/commit.h",
            "line": 53,
            "column": 38
          },
          "params": [
            {
              "type": "size_t"
            },
            {
              "type": "void *"
            }
          ],
          "group": "sys/commit",
          "parameterTo": [
            "git_commit_create_from_callback"
          ],
          "typedef": true
        },
        "git_commit_create_from_callback": {
          "kind": "function",
          "name": "git_commit_create_from_callback",
          "location": {
            "file": "sys/commit.h",
            "line": 66,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "update_ref",
              "type": "const char *"
            },
            {
              "name": "author",
              "type": "const git_signature *"
            },
            {
              "name": "committer",
              "type": "const git_signature *"
            },
            {
              "name": "message_encoding",
              "type": "const char *"
            },
            {
              "name": "message",
              "type": "const char *"
            },
            {
              "name": "tree",
              "type": "const git_oid *"
            },
            {
              "name": "parent_cb",
              "type": "git_commit_parent_callback",
              "referenceType": "const git_oid *(*)(size_t, void *)"
            },
            {
              "name": "parent_payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Create a new commit in the repository with an callback to supply parents.",
            "See documentation for `git_commit_create()` for information about the\n parameters, as the meaning is identical excepting that `tree` takes a\n `git_oid` and doesn't check for validity, and `parent_cb` is invoked\n with `parent_payload` and should return `git_oid` values or NULL to\n indicate that all parents are accounted for."
          ],
          "see": [
            "git_commit_create"
          ],
          "group": "sys/commit"
        }
      },
      "info": {
        "summary": "Low-level Git commit creation"
      }
    },
    "common": {
      "apis": {
        "GIT_EXTERN(type)": {
          "kind": "macro",
          "name": "GIT_EXTERN(type)",
          "location": {
            "file": "common.h",
            "line": 41,
            "column": 10
          },
          "value": "extern __attribute__((visibility(\"default\"))) type",
          "comment": "Declare a public function exported for application use.",
          "group": "common"
        },
        "GIT_CALLBACK(name)": {
          "kind": "macro",
          "name": "GIT_CALLBACK(name)",
          "location": {
            "file": "common.h",
            "line": 50,
            "column": 10
          },
          "value": "(__cdecl *name)",
          "comment": "Declare a callback function for application use.",
          "group": "common"
        },
        "GIT_DEPRECATED(func)": {
          "kind": "macro",
          "name": "GIT_DEPRECATED(func)",
          "location": {
            "file": "common.h",
            "line": 60,
            "column": 10
          },
          "value": " __attribute__((deprecated)) __attribute__((used)) func",
          "comment": "Declare a function as deprecated.",
          "group": "common"
        },
        "GIT_FORMAT_PRINTF(a,b)": {
          "kind": "macro",
          "name": "GIT_FORMAT_PRINTF(a,b)",
          "location": {
            "file": "common.h",
            "line": 69,
            "column": 10
          },
          "value": "__attribute__((format (printf, a, b)))",
          "comment": "Declare a function's takes printf style arguments.",
          "group": "common"
        },
        "GIT_PATH_LIST_SEPARATOR": {
          "kind": "macro",
          "name": "GIT_PATH_LIST_SEPARATOR",
          "location": {
            "file": "common.h",
            "line": 98,
            "column": 9
          },
          "value": "';'",
          "comment": "The separator used in path list strings (ie like in the PATH environment variable). A semi-colon \";\" is used on Windows, and a colon \":\" for all other systems.",
          "group": "common"
        },
        "GIT_PATH_MAX": {
          "kind": "macro",
          "name": "GIT_PATH_MAX",
          "location": {
            "file": "common.h",
            "line": 106,
            "column": 9
          },
          "value": "4096",
          "comment": "The maximum length of a valid git path.",
          "group": "common"
        },
        "GIT_OID_HEX_ZERO": {
          "kind": "macro",
          "name": "GIT_OID_HEX_ZERO",
          "location": {
            "file": "common.h",
            "line": 111,
            "column": 9
          },
          "value": "\"0000000000000000000000000000000000000000\"",
          "comment": "The string representation of the null object ID.",
          "group": "common"
        },
        "git_libgit2_version": {
          "kind": "function",
          "name": "git_libgit2_version",
          "location": {
            "file": "common.h",
            "line": 122,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or an error code on failure"
          },
          "params": [
            {
              "name": "major",
              "type": "int *",
              "direction": "in",
              "comment": "Store the major version number"
            },
            {
              "name": "minor",
              "type": "int *",
              "direction": "in",
              "comment": "Store the minor version number"
            },
            {
              "name": "rev",
              "type": "int *",
              "direction": "in",
              "comment": "Store the revision (patch) number"
            }
          ],
          "comment": [
            "Return the version of the libgit2 library\n being currently used."
          ],
          "group": "common"
        },
        "git_feature_t": {
          "kind": "enum",
          "name": "git_feature_t",
          "referenceName": "git_feature_t",
          "members": [
            {
              "name": "GIT_FEATURE_THREADS",
              "value": "1",
              "comment": [
                "If set, libgit2 was built thread-aware and can be safely used from multiple\n threads."
              ]
            },
            {
              "name": "GIT_FEATURE_HTTPS",
              "value": "2",
              "comment": [
                "If set, libgit2 was built with and linked against a TLS implementation.\n Custom TLS streams may still be added by the user to support HTTPS\n regardless of this."
              ]
            },
            {
              "name": "GIT_FEATURE_SSH",
              "value": "4",
              "comment": [
                "If set, libgit2 was built with and linked against libssh2. A custom\n transport may still be added by the user to support libssh2 regardless of\n this."
              ]
            },
            {
              "name": "GIT_FEATURE_NSEC",
              "value": "8",
              "comment": [
                "If set, libgit2 was built with support for sub-second resolution in file\n modification times."
              ]
            }
          ],
          "comment": [
            "Combinations of these values describe the features with which libgit2\n was compiled"
          ],
          "location": {
            "file": "common.h",
            "line": 128,
            "column": 9
          },
          "group": "common"
        },
        "git_libgit2_features": {
          "kind": "function",
          "name": "git_libgit2_features",
          "location": {
            "file": "common.h",
            "line": 171,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "A combination of GIT_FEATURE_* values."
          },
          "comment": [
            "Query compile time options for libgit2.",
            "- GIT_FEATURE_THREADS\n   Libgit2 was compiled with thread support. Note that thread support is\n   still to be seen as a 'work in progress' - basic object lookups are\n   believed to be threadsafe, but other operations may not be.",
            "- GIT_FEATURE_HTTPS\n   Libgit2 supports the https:// protocol. This requires the openssl\n   library to be found when compiling libgit2.",
            "- GIT_FEATURE_SSH\n   Libgit2 supports the SSH protocol for network operations. This requires\n   the libssh2 library to be found when compiling libgit2"
          ],
          "group": "common"
        },
        "git_libgit2_opt_t": {
          "kind": "enum",
          "name": "git_libgit2_opt_t",
          "referenceName": "git_libgit2_opt_t",
          "members": [
            {
              "name": "GIT_OPT_GET_MWINDOW_SIZE"
            },
            {
              "name": "GIT_OPT_SET_MWINDOW_SIZE"
            },
            {
              "name": "GIT_OPT_GET_MWINDOW_MAPPED_LIMIT"
            },
            {
              "name": "GIT_OPT_SET_MWINDOW_MAPPED_LIMIT"
            },
            {
              "name": "GIT_OPT_GET_SEARCH_PATH"
            },
            {
              "name": "GIT_OPT_SET_SEARCH_PATH"
            },
            {
              "name": "GIT_OPT_SET_CACHE_OBJECT_LIMIT"
            },
            {
              "name": "GIT_OPT_SET_CACHE_MAX_SIZE"
            },
            {
              "name": "GIT_OPT_ENABLE_CACHING"
            },
            {
              "name": "GIT_OPT_GET_CACHED_MEMORY"
            },
            {
              "name": "GIT_OPT_GET_TEMPLATE_PATH"
            },
            {
              "name": "GIT_OPT_SET_TEMPLATE_PATH"
            },
            {
              "name": "GIT_OPT_SET_SSL_CERT_LOCATIONS"
            },
            {
              "name": "GIT_OPT_SET_USER_AGENT"
            },
            {
              "name": "GIT_OPT_ENABLE_STRICT_OBJECT_CREATION"
            },
            {
              "name": "GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION"
            },
            {
              "name": "GIT_OPT_SET_SSL_CIPHERS"
            },
            {
              "name": "GIT_OPT_GET_USER_AGENT"
            },
            {
              "name": "GIT_OPT_ENABLE_OFS_DELTA"
            },
            {
              "name": "GIT_OPT_ENABLE_FSYNC_GITDIR"
            },
            {
              "name": "GIT_OPT_GET_WINDOWS_SHAREMODE"
            },
            {
              "name": "GIT_OPT_SET_WINDOWS_SHAREMODE"
            },
            {
              "name": "GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION"
            },
            {
              "name": "GIT_OPT_SET_ALLOCATOR"
            },
            {
              "name": "GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY"
            },
            {
              "name": "GIT_OPT_GET_PACK_MAX_OBJECTS"
            },
            {
              "name": "GIT_OPT_SET_PACK_MAX_OBJECTS"
            },
            {
              "name": "GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS"
            },
            {
              "name": "GIT_OPT_ENABLE_HTTP_EXPECT_CONTINUE"
            },
            {
              "name": "GIT_OPT_GET_MWINDOW_FILE_LIMIT"
            },
            {
              "name": "GIT_OPT_SET_MWINDOW_FILE_LIMIT"
            }
          ],
          "comment": [
            "Global library options",
            "These are used to select which global option to set or get and are\n used in `git_libgit2_opts()`."
          ],
          "location": {
            "file": "common.h",
            "line": 179,
            "column": 9
          },
          "group": "common"
        },
        "git_libgit2_opts": {
          "kind": "function",
          "name": "git_libgit2_opts",
          "location": {
            "file": "common.h",
            "line": 423,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure"
          },
          "params": [
            {
              "name": "option",
              "type": "int",
              "direction": "in",
              "comment": "Option key"
            }
          ],
          "comment": [
            "Set or query a library global option",
            "Available options:",
            "* opts(GIT_OPT_GET_MWINDOW_SIZE, size_t *):",
            "> Get the maximum mmap window size",
            "* opts(GIT_OPT_SET_MWINDOW_SIZE, size_t):",
            "> Set the maximum mmap window size",
            "* opts(GIT_OPT_GET_MWINDOW_MAPPED_LIMIT, size_t *):",
            "> Get the maximum memory that will be mapped in total by the library",
            "* opts(GIT_OPT_SET_MWINDOW_MAPPED_LIMIT, size_t):",
            "> Set the maximum amount of memory that can be mapped at any time\n\t\t> by the library",
            "* opts(GIT_OPT_GET_MWINDOW_FILE_LIMIT, size_t *):",
            "> Get the maximum number of files that will be mapped at any time by the\n\t\t> library",
            "* opts(GIT_OPT_SET_MWINDOW_FILE_LIMIT, size_t):",
            "> Set the maximum number of files that can be mapped at any time\n\t\t> by the library. The default (0) is unlimited.",
            "* opts(GIT_OPT_GET_SEARCH_PATH, int level, git_buf *buf)",
            "> Get the search path for a given level of config data.  \"level\" must\n\t\t> be one of `GIT_CONFIG_LEVEL_SYSTEM`, `GIT_CONFIG_LEVEL_GLOBAL`,\n\t\t> `GIT_CONFIG_LEVEL_XDG`, or `GIT_CONFIG_LEVEL_PROGRAMDATA`.\n\t\t> The search path is written to the `out` buffer.",
            "* opts(GIT_OPT_SET_SEARCH_PATH, int level, const char *path)",
            "> Set the search path for a level of config data.  The search path\n\t\t> applied to shared attributes and ignore files, too.\n\t\t>\n\t\t> - `path` lists directories delimited by GIT_PATH_LIST_SEPARATOR.\n\t\t>   Pass NULL to reset to the default (generally based on environment\n\t\t>   variables).  Use magic path `$PATH` to include the old value\n\t\t>   of the path (if you want to prepend or append, for instance).\n\t\t>\n\t\t> - `level` must be `GIT_CONFIG_LEVEL_SYSTEM`,\n\t\t>   `GIT_CONFIG_LEVEL_GLOBAL`, `GIT_CONFIG_LEVEL_XDG`, or\n\t\t>   `GIT_CONFIG_LEVEL_PROGRAMDATA`.",
            "* opts(GIT_OPT_SET_CACHE_OBJECT_LIMIT, git_object_t type, size_t size)",
            "> Set the maximum data size for the given type of object to be\n\t\t> considered eligible for caching in memory.  Setting to value to\n\t\t> zero means that that type of object will not be cached.\n\t\t> Defaults to 0 for GIT_OBJECT_BLOB (i.e. won't cache blobs) and 4k\n\t\t> for GIT_OBJECT_COMMIT, GIT_OBJECT_TREE, and GIT_OBJECT_TAG.",
            "* opts(GIT_OPT_SET_CACHE_MAX_SIZE, ssize_t max_storage_bytes)",
            "> Set the maximum total data size that will be cached in memory\n\t\t> across all repositories before libgit2 starts evicting objects\n\t\t> from the cache.  This is a soft limit, in that the library might\n\t\t> briefly exceed it, but will start aggressively evicting objects\n\t\t> from cache when that happens.  The default cache size is 256MB.",
            "* opts(GIT_OPT_ENABLE_CACHING, int enabled)",
            "> Enable or disable caching completely.\n\t\t>\n\t\t> Because caches are repository-specific, disabling the cache\n\t\t> cannot immediately clear all cached objects, but each cache will\n\t\t> be cleared on the next attempt to update anything in it.",
            "* opts(GIT_OPT_GET_CACHED_MEMORY, ssize_t *current, ssize_t *allowed)",
            "> Get the current bytes in cache and the maximum that would be\n\t\t> allowed in the cache.",
            "* opts(GIT_OPT_GET_TEMPLATE_PATH, git_buf *out)",
            "> Get the default template path.\n\t\t> The path is written to the `out` buffer.",
            "* opts(GIT_OPT_SET_TEMPLATE_PATH, const char *path)",
            "> Set the default template path.\n\t\t>\n\t\t> - `path` directory of template.",
            "* opts(GIT_OPT_SET_SSL_CERT_LOCATIONS, const char *file, const char *path)",
            "> Set the SSL certificate-authority locations.\n\t\t>\n\t\t> - `file` is the location of a file containing several\n\t\t>   certificates concatenated together.\n\t\t> - `path` is the location of a directory holding several\n\t\t>   certificates, one per file.\n\t\t>\n \t\t> Either parameter may be `NULL`, but not both.",
            "* opts(GIT_OPT_SET_USER_AGENT, const char *user_agent)",
            "> Set the value of the User-Agent header.  This value will be\n\t\t> appended to \"git/1.0\", for compatibility with other git clients.\n\t\t>\n\t\t> - `user_agent` is the value that will be delivered as the\n\t\t>   User-Agent header on HTTP requests.",
            "* opts(GIT_OPT_SET_WINDOWS_SHAREMODE, unsigned long value)",
            "> Set the share mode used when opening files on Windows.\n\t\t> For more information, see the documentation for CreateFile.\n\t\t> The default is: FILE_SHARE_READ | FILE_SHARE_WRITE.  This is\n\t\t> ignored and unused on non-Windows platforms.",
            "* opts(GIT_OPT_GET_WINDOWS_SHAREMODE, unsigned long *value)",
            "> Get the share mode used when opening files on Windows.",
            "* opts(GIT_OPT_ENABLE_STRICT_OBJECT_CREATION, int enabled)",
            "> Enable strict input validation when creating new objects\n\t\t> to ensure that all inputs to the new objects are valid.  For\n\t\t> example, when this is enabled, the parent(s) and tree inputs\n\t\t> will be validated when creating a new commit.  This defaults\n\t\t> to enabled.",
            "* opts(GIT_OPT_ENABLE_STRICT_SYMBOLIC_REF_CREATION, int enabled)",
            "> Validate the target of a symbolic ref when creating it.  For\n\t\t> example, `foobar` is not a valid ref, therefore `foobar` is\n\t\t> not a valid target for a symbolic ref by default, whereas\n\t\t> `refs/heads/foobar` is.  Disabling this bypasses validation\n\t\t> so that an arbitrary strings such as `foobar` can be used\n\t\t> for a symbolic ref target.  This defaults to enabled.",
            "* opts(GIT_OPT_SET_SSL_CIPHERS, const char *ciphers)",
            "> Set the SSL ciphers use for HTTPS connections.\n\t\t>\n\t\t> - `ciphers` is the list of ciphers that are eanbled.",
            "* opts(GIT_OPT_ENABLE_OFS_DELTA, int enabled)",
            "> Enable or disable the use of \"offset deltas\" when creating packfiles,\n\t\t> and the negotiation of them when talking to a remote server.\n\t\t> Offset deltas store a delta base location as an offset into the\n\t\t> packfile from the current location, which provides a shorter encoding\n\t\t> and thus smaller resultant packfiles.\n\t\t> Packfiles containing offset deltas can still be read.\n\t\t> This defaults to enabled.",
            "* opts(GIT_OPT_ENABLE_FSYNC_GITDIR, int enabled)",
            "> Enable synchronized writes of files in the gitdir using `fsync`\n\t\t> (or the platform equivalent) to ensure that new object data\n\t\t> is written to permanent storage, not simply cached.  This\n\t\t> defaults to disabled.",
            "opts(GIT_OPT_ENABLE_STRICT_HASH_VERIFICATION, int enabled)",
            "> Enable strict verification of object hashsums when reading\n\t\t> objects from disk. This may impact performance due to an\n\t\t> additional checksum calculation on each object. This defaults\n\t\t> to enabled.",
            "opts(GIT_OPT_SET_ALLOCATOR, git_allocator *allocator)",
            "> Set the memory allocator to a different memory allocator. This\n\t\t> allocator will then be used to make all memory allocations for\n\t\t> libgit2 operations.  If the given `allocator` is NULL, then the\n\t\t> system default will be restored.",
            "opts(GIT_OPT_ENABLE_UNSAVED_INDEX_SAFETY, int enabled)",
            "> Ensure that there are no unsaved changes in the index before\n\t\t> beginning any operation that reloads the index from disk (eg,\n\t\t> checkout).  If there are unsaved changes, the instruction will\n\t\t> fail.  (Using the FORCE flag to checkout will still overwrite\n\t\t> these changes.)",
            "opts(GIT_OPT_GET_PACK_MAX_OBJECTS, size_t *out)",
            "> Get the maximum number of objects libgit2 will allow in a pack\n\t\t> file when downloading a pack file from a remote. This can be\n\t\t> used to limit maximum memory usage when fetching from an untrusted\n\t\t> remote.",
            "opts(GIT_OPT_SET_PACK_MAX_OBJECTS, size_t objects)",
            "> Set the maximum number of objects libgit2 will allow in a pack\n\t\t> file when downloading a pack file from a remote.",
            "opts(GIT_OPT_DISABLE_PACK_KEEP_FILE_CHECKS, int enabled)\n\t\t> This will cause .keep file existence checks to be skipped when\n\t\t> accessing packfiles, which can help performance with remote filesystems.",
            "opts(GIT_OPT_ENABLE_HTTP_EXPECT_CONTINUE, int enabled)\n\t\t> When connecting to a server using NTLM or Negotiate\n\t\t> authentication, use expect/continue when POSTing data.\n\t\t> This option is not available on Windows."
          ],
          "group": "common"
        }
      },
      "info": {
        "summary": "Git common platform definitions"
      }
    },
    "config": {
      "apis": {
        "git_config_level_t": {
          "kind": "enum",
          "name": "git_config_level_t",
          "referenceName": "git_config_level_t",
          "members": [
            {
              "name": "GIT_CONFIG_LEVEL_PROGRAMDATA",
              "value": "1",
              "comment": [
                "System-wide on Windows, for compatibility with portable git"
              ]
            },
            {
              "name": "GIT_CONFIG_LEVEL_SYSTEM",
              "value": "2",
              "comment": [
                "System-wide configuration file; /etc/gitconfig on Linux systems"
              ]
            },
            {
              "name": "GIT_CONFIG_LEVEL_XDG",
              "value": "3",
              "comment": [
                "XDG compatible configuration file; typically ~/.config/git/config"
              ]
            },
            {
              "name": "GIT_CONFIG_LEVEL_GLOBAL",
              "value": "4",
              "comment": [
                "User-specific configuration file (also called Global configuration\n file); typically ~/.gitconfig"
              ]
            },
            {
              "name": "GIT_CONFIG_LEVEL_LOCAL",
              "value": "5",
              "comment": [
                "Repository specific configuration file; $WORK_DIR/.git/config on\n non-bare repos"
              ]
            },
            {
              "name": "GIT_CONFIG_LEVEL_APP",
              "value": "6",
              "comment": [
                "Application specific configuration file; freely defined by applications"
              ]
            },
            {
              "name": "GIT_CONFIG_HIGHEST_LEVEL",
              "value": "-1",
              "comment": [
                "Represents the highest level available config file (i.e. the most\n specific config file available that actually is loaded)"
              ]
            }
          ],
          "comment": [
            "Priority level of a config file.\n These priority levels correspond to the natural escalation logic\n (from higher to lower) when searching for config entries in git.git.",
            "git_config_open_default() and git_repository_config() honor those\n priority levels as well."
          ],
          "location": {
            "file": "config.h",
            "line": 31,
            "column": 9
          },
          "group": "config",
          "parameterTo": [
            "git_config_add_file_ondisk",
            "git_config_open_level",
            "git_config_add_backend"
          ]
        },
        "git_config_entry": {
          "kind": "struct",
          "name": "git_config_entry",
          "referenceName": "git_config_entry",
          "comment": [
            "An entry in a configuration file"
          ],
          "members": [
            {
              "name": "name",
              "type": "const char *",
              "comment": [
                "Name of the entry (normalised)"
              ]
            },
            {
              "name": "value",
              "type": "const char *",
              "comment": [
                "String value of the entry"
              ]
            },
            {
              "name": "include_depth",
              "type": "unsigned int",
              "comment": [
                "Depth of includes where this variable was found"
              ]
            },
            {
              "name": "level",
              "type": "git_config_level_t",
              "comment": [
                "Which config file this was found in"
              ],
              "referenceType": "enum git_config_level_t"
            },
            {
              "name": "free",
              "type": "void (*)(struct git_config_entry *)",
              "comment": [
                "Free function for this entry"
              ]
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "Opaque value for the free function. Do not read or write"
              ]
            }
          ],
          "location": {
            "file": "config.h",
            "line": 64,
            "column": 16
          },
          "group": "config",
          "parameterTo": [
            "git_config_entry_free",
            "git_config_foreach_cb",
            "git_config_get_entry",
            "git_config_next"
          ]
        },
        "git_config_entry_free": {
          "kind": "function",
          "name": "git_config_entry_free",
          "location": {
            "file": "config.h",
            "line": 76,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "type": "git_config_entry *"
            }
          ],
          "comment": [
            "Free a config entry"
          ],
          "group": "config"
        },
        "git_config_foreach_cb": {
          "kind": "callback",
          "name": "git_config_foreach_cb",
          "type": "int (*)(const git_config_entry *, void *)",
          "comment": [
            "A config enumeration callback"
          ],
          "location": {
            "file": "config.h",
            "line": 84,
            "column": 26
          },
          "params": [
            {
              "name": "entry",
              "direction": "in",
              "comment": "the entry currently being enumerated",
              "type": "const git_config_entry *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "a user-specified pointer",
              "type": "void *"
            }
          ],
          "group": "config",
          "parameterTo": [
            "git_config_get_multivar_foreach",
            "git_config_foreach",
            "git_config_foreach_match",
            "git_config_backend_foreach_match"
          ],
          "typedef": true
        },
        "git_configmap_t": {
          "kind": "enum",
          "name": "git_configmap_t",
          "referenceName": "git_configmap_t",
          "members": [
            {
              "name": "GIT_CONFIGMAP_FALSE",
              "value": "0"
            },
            {
              "name": "GIT_CONFIGMAP_TRUE",
              "value": "1"
            },
            {
              "name": "GIT_CONFIGMAP_INT32"
            },
            {
              "name": "GIT_CONFIGMAP_STRING"
            }
          ],
          "comment": [
            "Config var type"
          ],
          "location": {
            "file": "config.h",
            "line": 94,
            "column": 9
          },
          "group": "config"
        },
        "git_configmap": {
          "kind": "struct",
          "name": "git_configmap",
          "referenceName": "git_configmap",
          "comment": [
            "Mapping from config variables to values."
          ],
          "members": [
            {
              "name": "type",
              "type": "git_configmap_t",
              "referenceType": "enum git_configmap_t"
            },
            {
              "name": "str_match",
              "type": "const char *"
            },
            {
              "name": "map_value",
              "type": "int"
            }
          ],
          "location": {
            "file": "config.h",
            "line": 104,
            "column": 9
          },
          "group": "config",
          "parameterTo": [
            "git_config_get_mapped",
            "git_config_lookup_map_value"
          ]
        },
        "git_config_find_global": {
          "kind": "function",
          "name": "git_config_find_global",
          "location": {
            "file": "config.h",
            "line": 127,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if a global configuration file has been found. Its path will be stored in `out`."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Pointer to a user-allocated git_buf in which to store the path"
            }
          ],
          "comment": [
            "Locate the path to the global configuration file",
            "The user or global configuration file is usually\n located in `$HOME/.gitconfig`.",
            "This method will try to guess the full path to that\n file, if the file exists. The returned path\n may be used on any `git_config` call to load the\n global configuration file.",
            "This method will not guess the path to the xdg compatible\n config file (.config/git/config)."
          ],
          "group": "config"
        },
        "git_config_find_xdg": {
          "kind": "function",
          "name": "git_config_find_xdg",
          "location": {
            "file": "config.h",
            "line": 144,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if a xdg compatible configuration file has been\n\tfound. Its path will be stored in `out`."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Pointer to a user-allocated git_buf in which to store the path"
            }
          ],
          "comment": [
            "Locate the path to the global xdg compatible configuration file",
            "The xdg compatible configuration file is usually\n located in `$HOME/.config/git/config`.",
            "This method will try to guess the full path to that\n file, if the file exists. The returned path\n may be used on any `git_config` call to load the\n xdg compatible configuration file."
          ],
          "group": "config"
        },
        "git_config_find_system": {
          "kind": "function",
          "name": "git_config_find_system",
          "location": {
            "file": "config.h",
            "line": 156,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if a system configuration file has been\n\tfound. Its path will be stored in `out`."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Pointer to a user-allocated git_buf in which to store the path"
            }
          ],
          "comment": [
            "Locate the path to the system configuration file",
            "If /etc/gitconfig doesn't exist, it will look for\n %PROGRAMFILES%\\Git\\etc\\gitconfig\n."
          ],
          "group": "config"
        },
        "git_config_find_programdata": {
          "kind": "function",
          "name": "git_config_find_programdata",
          "location": {
            "file": "config.h",
            "line": 167,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if a ProgramData configuration file has been\n\tfound. Its path will be stored in `out`."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Pointer to a user-allocated git_buf in which to store the path"
            }
          ],
          "comment": [
            "Locate the path to the configuration file in ProgramData",
            "Look for the file in %PROGRAMDATA%\\Git\\config\n used by portable git."
          ],
          "group": "config"
        },
        "git_config_open_default": {
          "kind": "function",
          "name": "git_config_open_default",
          "location": {
            "file": "config.h",
            "line": 179,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "Pointer to store the config instance"
            }
          ],
          "comment": [
            "Open the global, XDG and system configuration files",
            "Utility wrapper that finds the global, XDG and system configuration files\n and opens them into a single prioritized config object that can be\n used when accessing default config data outside a repository."
          ],
          "group": "config"
        },
        "git_config_new": {
          "kind": "function",
          "name": "git_config_new",
          "location": {
            "file": "config.h",
            "line": 190,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "pointer to the new configuration"
            }
          ],
          "comment": [
            "Allocate a new configuration object",
            "This object is empty, so you have to add a file to it before you\n can do anything with it."
          ],
          "group": "config"
        },
        "git_config_add_file_ondisk": {
          "kind": "function",
          "name": "git_config_add_file_ondisk",
          "location": {
            "file": "config.h",
            "line": 219,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EEXISTS when adding more than one file\n  for a given priority level (and force_replace set to 0),\n  GIT_ENOTFOUND when the file doesn't exist or error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration to add the file to"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to the configuration file to add"
            },
            {
              "name": "level",
              "type": "git_config_level_t",
              "direction": "in",
              "comment": "the priority level of the backend",
              "referenceType": "enum git_config_level_t"
            },
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "optional repository to allow parsing of\n  conditional includes"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "replace config file at the given priority level"
            }
          ],
          "comment": [
            "Add an on-disk config file instance to an existing config",
            "The on-disk file pointed at by `path` will be opened and\n parsed; it's expected to be a native Git config file following\n the default Git config syntax (see man git-config).",
            "If the file does not exist, the file will still be added and it\n will be created the first time we write to it.",
            "Note that the configuration object will free the file\n automatically.",
            "Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority level will be accessed first)."
          ],
          "group": "config"
        },
        "git_config_open_ondisk": {
          "kind": "function",
          "name": "git_config_open_ondisk",
          "location": {
            "file": "config.h",
            "line": 238,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "The configuration instance to create"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to the on-disk file to open"
            }
          ],
          "comment": [
            "Create a new config instance containing a single on-disk file",
            "This method is a simple utility wrapper for the following sequence\n of calls:\n\t- git_config_new\n\t- git_config_add_file_ondisk"
          ],
          "group": "config"
        },
        "git_config_open_level": {
          "kind": "function",
          "name": "git_config_open_level",
          "location": {
            "file": "config.h",
            "line": 256,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if the passed level cannot be found in the\n multi-level parent config, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "The configuration instance to create"
            },
            {
              "name": "parent",
              "type": "const git_config *",
              "direction": "in",
              "comment": "Multi-level config to search for the given level"
            },
            {
              "name": "level",
              "type": "git_config_level_t",
              "direction": "in",
              "comment": "Configuration level to search for",
              "referenceType": "enum git_config_level_t"
            }
          ],
          "comment": [
            "Build a single-level focused config object from a multi-level one.",
            "The returned config object can be used to perform get/set/delete operations\n on a single specific level.",
            "Getting several times the same level from the same parent multi-level config\n will return different config instances, but containing the same config_file\n instance."
          ],
          "group": "config"
        },
        "git_config_open_global": {
          "kind": "function",
          "name": "git_config_open_global",
          "location": {
            "file": "config.h",
            "line": 273,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "pointer in which to store the config object"
            },
            {
              "name": "config",
              "type": "git_config *",
              "direction": "in",
              "comment": "the config object in which to look"
            }
          ],
          "comment": [
            "Open the global/XDG configuration file according to git's rules",
            "Git allows you to store your global configuration at\n `$HOME/.gitconfig` or `$XDG_CONFIG_HOME/git/config`. For backwards\n compatability, the XDG file shouldn't be used unless the use has\n created it explicitly. With this function you'll open the correct\n one to write to."
          ],
          "group": "config"
        },
        "git_config_snapshot": {
          "kind": "function",
          "name": "git_config_snapshot",
          "location": {
            "file": "config.h",
            "line": 289,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "pointer in which to store the snapshot config object"
            },
            {
              "name": "config",
              "type": "git_config *",
              "direction": "in",
              "comment": "configuration to snapshot"
            }
          ],
          "comment": [
            "Create a snapshot of the configuration",
            "Create a snapshot of the current state of a configuration, which\n allows you to look into a consistent view of the configuration for\n looking up complex values (e.g. a remote, submodule).",
            "The string returned when querying such a config object is valid\n until it is freed."
          ],
          "group": "config"
        },
        "git_config_free": {
          "kind": "function",
          "name": "git_config_free",
          "location": {
            "file": "config.h",
            "line": 296,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration to free"
            }
          ],
          "comment": [
            "Free the configuration and its associated memory and files"
          ],
          "group": "config"
        },
        "git_config_get_entry": {
          "kind": "function",
          "name": "git_config_get_entry",
          "location": {
            "file": "config.h",
            "line": 308,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config_entry **",
              "direction": "in",
              "comment": "pointer to the variable git_config_entry"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the git_config_entry of a config variable.",
            "Free the git_config_entry after use with `git_config_entry_free()`."
          ],
          "group": "config"
        },
        "git_config_get_int32": {
          "kind": "function",
          "name": "git_config_get_int32",
          "location": {
            "file": "config.h",
            "line": 325,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "int32_t *",
              "direction": "in",
              "comment": "pointer to the variable where the value should be stored"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of an integer config variable.",
            "All config files will be looked into, in the order of their\n defined level. A higher level means a higher priority. The\n first occurrence of the variable will be returned here."
          ],
          "group": "config"
        },
        "git_config_get_int64": {
          "kind": "function",
          "name": "git_config_get_int64",
          "location": {
            "file": "config.h",
            "line": 339,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "int64_t *",
              "direction": "in",
              "comment": "pointer to the variable where the value should be stored"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a long integer config variable.",
            "All config files will be looked into, in the order of their\n defined level. A higher level means a higher priority. The\n first occurrence of the variable will be returned here."
          ],
          "group": "config"
        },
        "git_config_get_bool": {
          "kind": "function",
          "name": "git_config_get_bool",
          "location": {
            "file": "config.h",
            "line": 356,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "int *",
              "direction": "in",
              "comment": "pointer to the variable where the value should be stored"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a boolean config variable.",
            "This function uses the usual C convention of 0 being false and\n anything else true.",
            "All config files will be looked into, in the order of their\n defined level. A higher level means a higher priority. The\n first occurrence of the variable will be returned here."
          ],
          "group": "config"
        },
        "git_config_get_path": {
          "kind": "function",
          "name": "git_config_get_path",
          "location": {
            "file": "config.h",
            "line": 374,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the buffer in which to store the result"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a path config variable.",
            "A leading '~' will be expanded to the global search path (which\n defaults to the user's home directory but can be overridden via\n `git_libgit2_opts()`.",
            "All config files will be looked into, in the order of their\n defined level. A higher level means a higher priority. The\n first occurrence of the variable will be returned here."
          ],
          "group": "config"
        },
        "git_config_get_string": {
          "kind": "function",
          "name": "git_config_get_string",
          "location": {
            "file": "config.h",
            "line": 392,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "const char **",
              "direction": "in",
              "comment": "pointer to the string"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a string config variable.",
            "This function can only be used on snapshot config objects. The\n string is owned by the config and should not be freed by the\n user. The pointer will be valid until the config is freed.",
            "All config files will be looked into, in the order of their\n defined level. A higher level means a higher priority. The\n first occurrence of the variable will be returned here."
          ],
          "group": "config"
        },
        "git_config_get_string_buf": {
          "kind": "function",
          "name": "git_config_get_string_buf",
          "location": {
            "file": "config.h",
            "line": 408,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer in which to store the string"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            }
          ],
          "comment": [
            "Get the value of a string config variable.",
            "The value of the config will be copied into the buffer.",
            "All config files will be looked into, in the order of their\n defined level. A higher level means a higher priority. The\n first occurrence of the variable will be returned here."
          ],
          "group": "config"
        },
        "git_config_get_multivar_foreach": {
          "kind": "function",
          "name": "git_config_get_multivar_foreach",
          "location": {
            "file": "config.h",
            "line": 426,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "regular expression to filter which variables we're\n interested in. Use NULL to indicate all"
            },
            {
              "name": "callback",
              "type": "git_config_foreach_cb",
              "direction": "in",
              "comment": "the function to be called on each value of the variable",
              "referenceType": "int (*)(const git_config_entry *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "opaque pointer to pass to the callback"
            }
          ],
          "comment": [
            "Get each value of a multivar in a foreach callback",
            "The callback will be called on each variable found",
            "The regular expression is applied case-sensitively on the normalized form of\n the variable name: the section and variable parts are lower-cased. The\n subsection is left unchanged."
          ],
          "group": "config"
        },
        "git_config_multivar_iterator_new": {
          "kind": "function",
          "name": "git_config_multivar_iterator_new",
          "location": {
            "file": "config.h",
            "line": 441,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config_iterator **",
              "direction": "in",
              "comment": "pointer to store the iterator"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "regular expression to filter which variables we're\n interested in. Use NULL to indicate all"
            }
          ],
          "comment": [
            "Get each value of a multivar",
            "The regular expression is applied case-sensitively on the normalized form of\n the variable name: the section and variable parts are lower-cased. The\n subsection is left unchanged."
          ],
          "group": "config"
        },
        "git_config_next": {
          "kind": "function",
          "name": "git_config_next",
          "location": {
            "file": "config.h",
            "line": 453,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code. GIT_ITEROVER if the iteration has completed"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_config_entry **",
              "direction": "in",
              "comment": "pointer to store the entry"
            },
            {
              "name": "iter",
              "type": "git_config_iterator *",
              "direction": "in",
              "comment": "the iterator"
            }
          ],
          "comment": [
            "Return the current entry and advance the iterator",
            "The pointers returned by this function are valid until the iterator\n is freed."
          ],
          "group": "config"
        },
        "git_config_iterator_free": {
          "kind": "function",
          "name": "git_config_iterator_free",
          "location": {
            "file": "config.h",
            "line": 460,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "iter",
              "type": "git_config_iterator *",
              "direction": "in",
              "comment": "the iterator to free"
            }
          ],
          "comment": [
            "Free a config iterator"
          ],
          "group": "config"
        },
        "git_config_set_int32": {
          "kind": "function",
          "name": "git_config_set_int32",
          "location": {
            "file": "config.h",
            "line": 471,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "int32_t",
              "direction": "in",
              "comment": "Integer value for the variable"
            }
          ],
          "comment": [
            "Set the value of an integer config variable in the config file\n with the highest level (usually the local one)."
          ],
          "group": "config"
        },
        "git_config_set_int64": {
          "kind": "function",
          "name": "git_config_set_int64",
          "location": {
            "file": "config.h",
            "line": 482,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "int64_t",
              "direction": "in",
              "comment": "Long integer value for the variable"
            }
          ],
          "comment": [
            "Set the value of a long integer config variable in the config file\n with the highest level (usually the local one)."
          ],
          "group": "config"
        },
        "git_config_set_bool": {
          "kind": "function",
          "name": "git_config_set_bool",
          "location": {
            "file": "config.h",
            "line": 493,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "int",
              "direction": "in",
              "comment": "the value to store"
            }
          ],
          "comment": [
            "Set the value of a boolean config variable in the config file\n with the highest level (usually the local one)."
          ],
          "group": "config"
        },
        "git_config_set_string": {
          "kind": "function",
          "name": "git_config_set_string",
          "location": {
            "file": "config.h",
            "line": 507,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "the string to store."
            }
          ],
          "comment": [
            "Set the value of a string config variable in the config file\n with the highest level (usually the local one).",
            "A copy of the string is made and the user is free to use it\n afterwards."
          ],
          "group": "config"
        },
        "git_config_set_multivar": {
          "kind": "function",
          "name": "git_config_set_multivar",
          "location": {
            "file": "config.h",
            "line": 519,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variable"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "a regular expression to indicate which values to replace"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "the new value."
            }
          ],
          "comment": [
            "Set a multivar in the local config file.",
            "The regular expression is applied case-sensitively on the value."
          ],
          "group": "config"
        },
        "git_config_delete_entry": {
          "kind": "function",
          "name": "git_config_delete_entry",
          "location": {
            "file": "config.h",
            "line": 528,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable to delete"
            }
          ],
          "comment": [
            "Delete a config variable from the config file\n with the highest level (usually the local one)."
          ],
          "group": "config"
        },
        "git_config_delete_multivar": {
          "kind": "function",
          "name": "git_config_delete_multivar",
          "location": {
            "file": "config.h",
            "line": 541,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "where to look for the variables"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the variable's name"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "a regular expression to indicate which values to delete"
            }
          ],
          "comment": [
            "Deletes one or several entries from a multivar in the local config file.",
            "The regular expression is applied case-sensitively on the value."
          ],
          "group": "config"
        },
        "git_config_foreach": {
          "kind": "function",
          "name": "git_config_foreach",
          "location": {
            "file": "config.h",
            "line": 559,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to get the variables from"
            },
            {
              "name": "callback",
              "type": "git_config_foreach_cb",
              "direction": "in",
              "comment": "the function to call on each variable",
              "referenceType": "int (*)(const git_config_entry *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "the data to pass to the callback"
            }
          ],
          "comment": [
            "Perform an operation on each config variable.",
            "The callback receives the normalized name and value of each variable\n in the config backend, and the data pointer passed to this function.\n If the callback returns a non-zero value, the function stops iterating\n and returns that value to the caller.",
            "The pointers passed to the callback are only valid as long as the\n iteration is ongoing."
          ],
          "group": "config"
        },
        "git_config_iterator_new": {
          "kind": "function",
          "name": "git_config_iterator_new",
          "location": {
            "file": "config.h",
            "line": 573,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config_iterator **",
              "direction": "in",
              "comment": "pointer to store the iterator"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to ge the variables from"
            }
          ],
          "comment": [
            "Iterate over all the config variables",
            "Use `git_config_next` to advance the iteration and\n `git_config_iterator_free` when done."
          ],
          "group": "config"
        },
        "git_config_iterator_glob_new": {
          "kind": "function",
          "name": "git_config_iterator_glob_new",
          "location": {
            "file": "config.h",
            "line": 589,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config_iterator **",
              "direction": "in",
              "comment": "pointer to store the iterator"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to ge the variables from"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "regular expression to match the names"
            }
          ],
          "comment": [
            "Iterate over all the config variables whose name matches a pattern",
            "Use `git_config_next` to advance the iteration and\n `git_config_iterator_free` when done.",
            "The regular expression is applied case-sensitively on the normalized form of\n the variable name: the section and variable parts are lower-cased. The\n subsection is left unchanged."
          ],
          "group": "config"
        },
        "git_config_foreach_match": {
          "kind": "function",
          "name": "git_config_foreach_match",
          "location": {
            "file": "config.h",
            "line": 611,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or the return value of the callback which didn't return 0"
          },
          "params": [
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "where to get the variables from"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "regular expression to match against config names"
            },
            {
              "name": "callback",
              "type": "git_config_foreach_cb",
              "direction": "in",
              "comment": "the function to call on each variable",
              "referenceType": "int (*)(const git_config_entry *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "the data to pass to the callback"
            }
          ],
          "comment": [
            "Perform an operation on each config variable matching a regular expression.",
            "This behaves like `git_config_foreach` with an additional filter of a\n regular expression that filters which config keys are passed to the\n callback.",
            "The regular expression is applied case-sensitively on the normalized form of\n the variable name: the section and variable parts are lower-cased. The\n subsection is left unchanged.",
            "The regular expression is applied case-sensitively on the normalized form of\n the variable name: the case-insensitive parts are lower-case."
          ],
          "group": "config"
        },
        "git_config_get_mapped": {
          "kind": "function",
          "name": "git_config_get_mapped",
          "location": {
            "file": "config.h",
            "line": 651,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "int *",
              "direction": "in",
              "comment": "place to store the result of the mapping"
            },
            {
              "name": "cfg",
              "type": "const git_config *",
              "direction": "in",
              "comment": "config file to get the variables from"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the config variable to lookup"
            },
            {
              "name": "maps",
              "type": "const git_configmap *",
              "direction": "in",
              "comment": "array of `git_configmap` objects specifying the possible mappings"
            },
            {
              "name": "map_n",
              "type": "size_t",
              "direction": "in",
              "comment": "number of mapping objects in `maps`"
            }
          ],
          "comment": [
            "Query the value of a config variable and return it mapped to\n an integer constant.",
            "This is a helper method to easily map different possible values\n to a variable to integer constants that easily identify them.",
            "A mapping array looks as follows:",
            "git_configmap autocrlf_mapping[] = {\n\t\t{GIT_CVAR_FALSE, NULL, GIT_AUTO_CRLF_FALSE},\n\t\t{GIT_CVAR_TRUE, NULL, GIT_AUTO_CRLF_TRUE},\n\t\t{GIT_CVAR_STRING, \"input\", GIT_AUTO_CRLF_INPUT},\n\t\t{GIT_CVAR_STRING, \"default\", GIT_AUTO_CRLF_DEFAULT}};",
            "On any \"false\" value for the variable (e.g. \"false\", \"FALSE\", \"no\"), the\n mapping will store `GIT_AUTO_CRLF_FALSE` in the `out` parameter.",
            "The same thing applies for any \"true\" value such as \"true\", \"yes\" or \"1\", storing\n the `GIT_AUTO_CRLF_TRUE` variable.",
            "Otherwise, if the value matches the string \"input\" (with case insensitive comparison),\n the given constant will be stored in `out`, and likewise for \"default\".",
            "If not a single match can be made to store in `out`, an error code will be\n returned."
          ],
          "group": "config"
        },
        "git_config_lookup_map_value": {
          "kind": "function",
          "name": "git_config_lookup_map_value",
          "location": {
            "file": "config.h",
            "line": 666,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "int *",
              "direction": "in",
              "comment": "place to store the result of the parsing"
            },
            {
              "name": "maps",
              "type": "const git_configmap *",
              "direction": "in",
              "comment": "array of `git_configmap` objects specifying the possible mappings"
            },
            {
              "name": "map_n",
              "type": "size_t",
              "direction": "in",
              "comment": "number of mapping objects in `maps`"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "value to parse"
            }
          ],
          "comment": [
            "Maps a string value to an integer constant"
          ],
          "group": "config"
        },
        "git_config_parse_bool": {
          "kind": "function",
          "name": "git_config_parse_bool",
          "location": {
            "file": "config.h",
            "line": 682,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "int *",
              "direction": "in",
              "comment": "place to store the result of the parsing"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "value to parse"
            }
          ],
          "comment": [
            "Parse a string value as a bool.",
            "Valid values for true are: 'true', 'yes', 'on', 1 or any\n  number different from 0\n Valid values for false are: 'false', 'no', 'off', 0"
          ],
          "group": "config"
        },
        "git_config_parse_int32": {
          "kind": "function",
          "name": "git_config_parse_int32",
          "location": {
            "file": "config.h",
            "line": 694,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "int32_t *",
              "direction": "in",
              "comment": "place to store the result of the parsing"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "value to parse"
            }
          ],
          "comment": [
            "Parse a string value as an int32.",
            "An optional value suffix of 'k', 'm', or 'g' will\n cause the value to be multiplied by 1024, 1048576,\n or 1073741824 prior to output."
          ],
          "group": "config"
        },
        "git_config_parse_int64": {
          "kind": "function",
          "name": "git_config_parse_int64",
          "location": {
            "file": "config.h",
            "line": 706,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "int64_t *",
              "direction": "in",
              "comment": "place to store the result of the parsing"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "value to parse"
            }
          ],
          "comment": [
            "Parse a string value as an int64.",
            "An optional value suffix of 'k', 'm', or 'g' will\n cause the value to be multiplied by 1024, 1048576,\n or 1073741824 prior to output."
          ],
          "group": "config"
        },
        "git_config_parse_path": {
          "kind": "function",
          "name": "git_config_parse_path",
          "location": {
            "file": "config.h",
            "line": 721,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "placae to store the result of parsing"
            },
            {
              "name": "value",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to evaluate"
            }
          ],
          "comment": [
            "Parse a string value as a path.",
            "A leading '~' will be expanded to the global search path (which\n defaults to the user's home directory but can be overridden via\n `git_libgit2_opts()`.",
            "If the value does not begin with a tilde, the input will be\n returned."
          ],
          "group": "config"
        },
        "git_config_backend_foreach_match": {
          "kind": "function",
          "name": "git_config_backend_foreach_match",
          "location": {
            "file": "config.h",
            "line": 739,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "backend",
              "type": "git_config_backend *",
              "direction": "in",
              "comment": "where to get the variables from"
            },
            {
              "name": "regexp",
              "type": "const char *",
              "direction": "in",
              "comment": "regular expression to match against config names (can be NULL)"
            },
            {
              "name": "callback",
              "type": "git_config_foreach_cb",
              "direction": "in",
              "comment": "the function to call on each variable",
              "referenceType": "int (*)(const git_config_entry *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "the data to pass to the callback"
            }
          ],
          "comment": [
            "Perform an operation on each config variable in a given config backend,\n matching a regular expression.",
            "This behaves like `git_config_foreach_match` except that only config\n entries from the given backend entry are enumerated.",
            "The regular expression is applied case-sensitively on the normalized form of\n the variable name: the section and variable parts are lower-cased. The\n subsection is left unchanged."
          ],
          "group": "config"
        },
        "git_config_lock": {
          "kind": "function",
          "name": "git_config_lock",
          "location": {
            "file": "config.h",
            "line": 762,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction **",
              "direction": "in",
              "comment": "the resulting transaction, use this to commit or undo the\n changes"
            },
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration in which to lock"
            }
          ],
          "comment": [
            "Lock the backend with the highest priority",
            "Locking disallows anybody else from writing to that backend. Any\n updates made after locking will not be visible to a reader until\n the file is unlocked.",
            "You can apply the changes by calling `git_transaction_commit()`\n before freeing the transaction. Either of these actions will unlock\n the config."
          ],
          "group": "config"
        },
        "git_config": {
          "kind": "struct",
          "name": "git_config",
          "referenceName": "struct git_config",
          "opaque": true,
          "comment": [
            "Memory representation of a set of config files"
          ],
          "location": {
            "file": "types.h",
            "line": 148,
            "column": 27
          },
          "group": "config",
          "parameterTo": [
            "git_config_open_default",
            "git_config_new",
            "git_config_add_file_ondisk",
            "git_config_open_ondisk",
            "git_config_open_level",
            "git_config_open_global",
            "git_config_snapshot",
            "git_config_free",
            "git_config_get_entry",
            "git_config_get_int32",
            "git_config_get_int64",
            "git_config_get_bool",
            "git_config_get_path",
            "git_config_get_string",
            "git_config_get_string_buf",
            "git_config_get_multivar_foreach",
            "git_config_multivar_iterator_new",
            "git_config_set_int32",
            "git_config_set_int64",
            "git_config_set_bool",
            "git_config_set_string",
            "git_config_set_multivar",
            "git_config_delete_entry",
            "git_config_delete_multivar",
            "git_config_foreach",
            "git_config_iterator_new",
            "git_config_iterator_glob_new",
            "git_config_foreach_match",
            "git_config_get_mapped",
            "git_config_lock",
            "git_repository_config",
            "git_repository_config_snapshot",
            "git_config_add_backend",
            "git_repository_set_config"
          ]
        }
      },
      "info": {
        "summary": "Git config management routines"
      }
    },
    "sys/config": {
      "apis": {
        "git_config_iterator": {
          "kind": "struct",
          "name": "git_config_iterator",
          "referenceName": "struct git_config_iterator",
          "comment": [
            "Every iterator must have this struct as its first element, so the\n API can talk to it. You'd define your iterator as",
            "struct my_iterator {\n             git_config_iterator parent;\n             ...\n     }",
            "and assign `iter->parent.backend` to your `git_config_backend`."
          ],
          "members": [
            {
              "name": "backend",
              "type": "git_config_backend *"
            },
            {
              "name": "flags",
              "type": "unsigned int"
            },
            {
              "name": "next",
              "type": "int (*)(git_config_entry **, git_config_iterator *)",
              "comment": [
                "Return the current entry and advance the iterator. The\n memory belongs to the library."
              ]
            },
            {
              "name": "free",
              "type": "void (*)(git_config_iterator *)",
              "comment": [
                "Free the iterator"
              ]
            }
          ],
          "location": {
            "file": "sys/config.h",
            "line": 34,
            "column": 8
          },
          "group": "sys/config",
          "parameterTo": [
            "git_config_multivar_iterator_new",
            "git_config_next",
            "git_config_iterator_free",
            "git_config_iterator_new",
            "git_config_iterator_glob_new"
          ]
        },
        "git_config_backend": {
          "kind": "struct",
          "name": "git_config_backend",
          "referenceName": "struct git_config_backend",
          "comment": [
            "Generic backend that implements the interface to\n access a configuration file"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "readonly",
              "type": "int",
              "comment": [
                "True if this backend is for a snapshot"
              ]
            },
            {
              "name": "cfg",
              "type": "struct git_config *"
            },
            {
              "name": "open",
              "type": "int (*)(struct git_config_backend *, git_config_level_t, const git_repository *)"
            },
            {
              "name": "get",
              "type": "int (*)(struct git_config_backend *, const char *, git_config_entry **)"
            },
            {
              "name": "set",
              "type": "int (*)(struct git_config_backend *, const char *, const char *)"
            },
            {
              "name": "set_multivar",
              "type": "int (*)(git_config_backend *, const char *, const char *, const char *)"
            },
            {
              "name": "del",
              "type": "int (*)(struct git_config_backend *, const char *)"
            },
            {
              "name": "del_multivar",
              "type": "int (*)(struct git_config_backend *, const char *, const char *)"
            },
            {
              "name": "iterator",
              "type": "int (*)(git_config_iterator **, struct git_config_backend *)"
            },
            {
              "name": "snapshot",
              "type": "int (*)(struct git_config_backend **, struct git_config_backend *)",
              "comment": [
                "Produce a read-only version of this backend"
              ]
            },
            {
              "name": "lock",
              "type": "int (*)(struct git_config_backend *)",
              "comment": [
                "Lock this backend.",
                "Prevent any writes to the data store backing this\n backend. Any updates must not be visible to any other\n readers."
              ]
            },
            {
              "name": "unlock",
              "type": "int (*)(struct git_config_backend *, int)",
              "comment": [
                "Unlock the data store backing this backend. If success is\n true, the changes should be committed, otherwise rolled\n back."
              ]
            },
            {
              "name": "free",
              "type": "void (*)(struct git_config_backend *)"
            }
          ],
          "location": {
            "file": "sys/config.h",
            "line": 54,
            "column": 8
          },
          "group": "sys/config",
          "parameterTo": [
            "git_config_backend_foreach_match",
            "git_config_init_backend",
            "git_config_add_backend"
          ]
        },
        "GIT_CONFIG_BACKEND_VERSION": {
          "kind": "macro",
          "name": "GIT_CONFIG_BACKEND_VERSION",
          "location": {
            "file": "sys/config.h",
            "line": 86,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/config"
        },
        "GIT_CONFIG_BACKEND_INIT": {
          "kind": "macro",
          "name": "GIT_CONFIG_BACKEND_INIT",
          "location": {
            "file": "sys/config.h",
            "line": 87,
            "column": 9
          },
          "value": "{GIT_CONFIG_BACKEND_VERSION}",
          "comment": "",
          "group": "sys/config"
        },
        "git_config_init_backend": {
          "kind": "function",
          "name": "git_config_init_backend",
          "location": {
            "file": "sys/config.h",
            "line": 97,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "backend",
              "type": "git_config_backend *",
              "direction": "in",
              "comment": "the `git_config_backend` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Version of struct; pass `GIT_CONFIG_BACKEND_VERSION`"
            }
          ],
          "comment": [
            "Initializes a `git_config_backend` with default values. Equivalent to\n creating an instance with GIT_CONFIG_BACKEND_INIT."
          ],
          "group": "sys/config"
        },
        "git_config_add_backend": {
          "kind": "function",
          "name": "git_config_add_backend",
          "location": {
            "file": "sys/config.h",
            "line": 121,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EEXISTS when adding more than one file\n  for a given priority level (and force_replace set to 0), or error code"
          },
          "params": [
            {
              "name": "cfg",
              "type": "git_config *",
              "direction": "in",
              "comment": "the configuration to add the file to"
            },
            {
              "name": "file",
              "type": "git_config_backend *",
              "direction": "in",
              "comment": "the configuration file (backend) to add"
            },
            {
              "name": "level",
              "type": "git_config_level_t",
              "direction": "in",
              "comment": "the priority level of the backend",
              "referenceType": "enum git_config_level_t"
            },
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "optional repository to allow parsing of\n  conditional includes"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "if a config file already exists for the given\n  priority level, replace it"
            }
          ],
          "comment": [
            "Add a generic config file instance to an existing config",
            "Note that the configuration object will free the file\n automatically.",
            "Further queries on this config object will access each\n of the config file instances in order (instances with\n a higher priority level will be accessed first)."
          ],
          "group": "sys/config"
        }
      },
      "info": {
        "summary": "Git config backend routines"
      }
    },
    "credential": {
      "apis": {
        "git_credential_t": {
          "kind": "enum",
          "name": "git_credential_t",
          "referenceName": "git_credential_t",
          "members": [
            {
              "name": "GIT_CREDENTIAL_USERPASS_PLAINTEXT",
              "comment": [
                "A vanilla user/password request"
              ],
              "see": [
                "git_credential_userpass_plaintext_new"
              ]
            },
            {
              "name": "GIT_CREDENTIAL_SSH_KEY",
              "comment": [
                "An SSH key-based authentication request"
              ],
              "see": [
                "git_credential_ssh_key_new"
              ]
            },
            {
              "name": "GIT_CREDENTIAL_SSH_CUSTOM",
              "comment": [
                "An SSH key-based authentication request, with a custom signature"
              ],
              "see": [
                "git_credential_ssh_custom_new"
              ]
            },
            {
              "name": "GIT_CREDENTIAL_DEFAULT",
              "comment": [
                "An NTLM/Negotiate-based authentication request."
              ],
              "see": [
                "git_credential_default"
              ]
            },
            {
              "name": "GIT_CREDENTIAL_SSH_INTERACTIVE",
              "comment": [
                "An SSH interactive authentication request"
              ],
              "see": [
                "git_credential_ssh_interactive_new"
              ]
            },
            {
              "name": "GIT_CREDENTIAL_USERNAME",
              "comment": [
                "Username-only authentication request",
                "Used as a pre-authentication step if the underlying transport\n (eg. SSH, with no username in its URL) does not know which username\n to use."
              ],
              "see": [
                "git_credential_username_new"
              ]
            },
            {
              "name": "GIT_CREDENTIAL_SSH_MEMORY",
              "comment": [
                "An SSH key-based authentication request",
                "Allows credentials to be read from memory instead of files.\n Note that because of differences in crypto backend support, it might\n not be functional."
              ],
              "see": [
                "git_credential_ssh_key_memory_new"
              ]
            }
          ],
          "comment": [
            "Supported credential types",
            "This represents the various types of authentication methods supported by\n the library."
          ],
          "location": {
            "file": "credential.h",
            "line": 27,
            "column": 9
          },
          "group": "credential"
        },
        "git_credential_default": {
          "kind": "struct",
          "name": "git_credential_default",
          "referenceName": "struct git_credential",
          "opaque": true,
          "comment": [
            "A key for NTLM/Kerberos \"default\" credentials"
          ],
          "location": {
            "file": "credential.h",
            "line": 92,
            "column": 31
          },
          "group": "credential"
        },
        "git_credential_acquire_cb": {
          "kind": "callback",
          "name": "git_credential_acquire_cb",
          "type": "int (*)(git_credential **, const char *, const char *, unsigned int, void *)",
          "comment": [
            "Credential acquisition callback.",
            "This callback is usually involved any time another system might need\n authentication. As such, you are expected to provide a valid\n git_credential object back, depending on allowed_types (a\n git_credential_t bitmask).",
            "Note that most authentication details are your responsibility - this\n callback will be called until the authentication succeeds, or you report\n an error. As such, it's easy to get in a loop if you fail to stop providing\n the same incorrect credentials."
          ],
          "location": {
            "file": "credential.h",
            "line": 131,
            "column": 26
          },
          "params": [
            {
              "name": "out",
              "direction": "in",
              "comment": "The newly created credential object.",
              "type": "git_credential **"
            },
            {
              "name": "url",
              "direction": "in",
              "comment": "The resource for which we are demanding a credential.",
              "type": "const char *"
            },
            {
              "name": "username_from_url",
              "direction": "in",
              "comment": "The username that was embedded in a \"user\\@host\"\n                          remote url, or NULL if not included.",
              "type": "const char *"
            },
            {
              "name": "allowed_types",
              "direction": "in",
              "comment": "A bitmask stating which credential types are OK to return.",
              "type": "unsigned int"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "The payload provided when specifying this callback.",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0 for success, \n<\n 0 to indicate an error, > 0 to indicate\n       no credential was acquired",
            "type": "int"
          },
          "group": "credential",
          "typedef": true
        },
        "git_credential_free": {
          "kind": "function",
          "name": "git_credential_free",
          "location": {
            "file": "credential.h",
            "line": 146,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "cred",
              "type": "git_credential *",
              "direction": "in",
              "comment": "the object to free"
            }
          ],
          "comment": [
            "Free a credential.",
            "This is only necessary if you own the object; that is, if you are a\n transport."
          ],
          "group": "credential"
        },
        "git_credential_has_username": {
          "kind": "function",
          "name": "git_credential_has_username",
          "location": {
            "file": "credential.h",
            "line": 154,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the credential object has non-NULL username, 0 otherwise"
          },
          "params": [
            {
              "name": "cred",
              "type": "git_credential *",
              "direction": "in",
              "comment": "object to check"
            }
          ],
          "comment": [
            "Check whether a credential object contains username information."
          ],
          "group": "credential"
        },
        "git_credential_get_username": {
          "kind": "function",
          "name": "git_credential_get_username",
          "location": {
            "file": "credential.h",
            "line": 162,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the credential username, or NULL if not applicable"
          },
          "params": [
            {
              "name": "cred",
              "type": "git_credential *",
              "direction": "in",
              "comment": "object to check"
            }
          ],
          "comment": [
            "Return the username associated with a credential object."
          ],
          "group": "credential"
        },
        "git_credential_userpass_plaintext_new": {
          "kind": "function",
          "name": "git_credential_userpass_plaintext_new",
          "location": {
            "file": "credential.h",
            "line": 173,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            },
            {
              "name": "username",
              "type": "const char *",
              "direction": "in",
              "comment": "The username of the credential."
            },
            {
              "name": "password",
              "type": "const char *",
              "direction": "in",
              "comment": "The password of the credential."
            }
          ],
          "comment": [
            "Create a new plain-text username and password credential object.\n The supplied credential parameter will be internally duplicated."
          ],
          "group": "credential"
        },
        "git_credential_default_new": {
          "kind": "function",
          "name": "git_credential_default_new",
          "location": {
            "file": "credential.h",
            "line": 185,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            }
          ],
          "comment": [
            "Create a \"default\" credential usable for Negotiate mechanisms like NTLM\n or Kerberos authentication."
          ],
          "group": "credential"
        },
        "git_credential_username_new": {
          "kind": "function",
          "name": "git_credential_username_new",
          "location": {
            "file": "credential.h",
            "line": 197,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            },
            {
              "name": "username",
              "type": "const char *",
              "direction": "in",
              "comment": "The username to authenticate with"
            }
          ],
          "comment": [
            "Create a credential to specify a username.",
            "This is used with ssh authentication to query for the username if\n none is specified in the url."
          ],
          "group": "credential"
        },
        "git_credential_ssh_key_new": {
          "kind": "function",
          "name": "git_credential_ssh_key_new",
          "location": {
            "file": "credential.h",
            "line": 210,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            },
            {
              "name": "username",
              "type": "const char *",
              "direction": "in",
              "comment": "username to use to authenticate"
            },
            {
              "name": "publickey",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to the public key of the credential."
            },
            {
              "name": "privatekey",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to the private key of the credential."
            },
            {
              "name": "passphrase",
              "type": "const char *",
              "direction": "in",
              "comment": "The passphrase of the credential."
            }
          ],
          "comment": [
            "Create a new passphrase-protected ssh key credential object.\n The supplied credential parameter will be internally duplicated."
          ],
          "group": "credential"
        },
        "git_credential_ssh_key_memory_new": {
          "kind": "function",
          "name": "git_credential_ssh_key_memory_new",
          "location": {
            "file": "credential.h",
            "line": 227,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            },
            {
              "name": "username",
              "type": "const char *",
              "direction": "in",
              "comment": "username to use to authenticate."
            },
            {
              "name": "publickey",
              "type": "const char *",
              "direction": "in",
              "comment": "The public key of the credential."
            },
            {
              "name": "privatekey",
              "type": "const char *",
              "direction": "in",
              "comment": "The private key of the credential."
            },
            {
              "name": "passphrase",
              "type": "const char *",
              "direction": "in",
              "comment": "The passphrase of the credential."
            }
          ],
          "comment": [
            "Create a new ssh key credential object reading the keys from memory."
          ],
          "group": "credential"
        },
        "LIBSSH2_SESSION": {
          "kind": "struct",
          "name": "LIBSSH2_SESSION",
          "referenceName": "struct _LIBSSH2_SESSION",
          "opaque": true,
          "location": {
            "file": "credential.h",
            "line": 239,
            "column": 33
          },
          "group": "credential",
          "parameterTo": [
            "git_credential_sign_cb"
          ]
        },
        "LIBSSH2_USERAUTH_KBDINT_PROMPT": {
          "kind": "struct",
          "name": "LIBSSH2_USERAUTH_KBDINT_PROMPT",
          "referenceName": "struct _LIBSSH2_USERAUTH_KBDINT_PROMPT",
          "opaque": true,
          "location": {
            "file": "credential.h",
            "line": 240,
            "column": 48
          },
          "group": "credential",
          "parameterTo": [
            "git_credential_ssh_interactive_cb"
          ]
        },
        "LIBSSH2_USERAUTH_KBDINT_RESPONSE": {
          "kind": "struct",
          "name": "LIBSSH2_USERAUTH_KBDINT_RESPONSE",
          "referenceName": "struct _LIBSSH2_USERAUTH_KBDINT_RESPONSE",
          "opaque": true,
          "location": {
            "file": "credential.h",
            "line": 241,
            "column": 50
          },
          "group": "credential",
          "parameterTo": [
            "git_credential_ssh_interactive_cb"
          ]
        },
        "git_credential_ssh_interactive_cb": {
          "kind": "callback",
          "name": "git_credential_ssh_interactive_cb",
          "type": "void (*)(const char *, int, const char *, int, int, const LIBSSH2_USERAUTH_KBDINT_PROMPT *, LIBSSH2_USERAUTH_KBDINT_RESPONSE *, void **)",
          "location": {
            "file": "credential.h",
            "line": 244,
            "column": 27
          },
          "params": [
            {
              "type": "const char *"
            },
            {
              "type": "int"
            },
            {
              "type": "const char *"
            },
            {
              "type": "int"
            },
            {
              "type": "int"
            },
            {
              "type": "const LIBSSH2_USERAUTH_KBDINT_PROMPT *"
            },
            {
              "type": "LIBSSH2_USERAUTH_KBDINT_RESPONSE *"
            },
            {
              "type": "void **"
            }
          ],
          "returns": {
            "type": "void"
          },
          "group": "credential",
          "parameterTo": [
            "git_credential_ssh_interactive_new",
            "git_cred_ssh_interactive_new"
          ],
          "typedef": true
        },
        "git_credential_ssh_interactive_new": {
          "kind": "function",
          "name": "git_credential_ssh_interactive_new",
          "location": {
            "file": "credential.h",
            "line": 262,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *",
              "direction": "in",
              "comment": "Username to use to authenticate."
            },
            {
              "name": "prompt_callback",
              "type": "git_credential_ssh_interactive_cb",
              "direction": "in",
              "comment": "The callback method used for prompts.",
              "referenceType": "void (*)(const char *, int, const char *, int, int, const LIBSSH2_USERAUTH_KBDINT_PROMPT *, LIBSSH2_USERAUTH_KBDINT_RESPONSE *, void **)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Additional data to pass to the callback."
            }
          ],
          "comment": [
            "Create a new ssh keyboard-interactive based credential object.\n The supplied credential parameter will be internally duplicated."
          ],
          "group": "credential"
        },
        "git_credential_ssh_key_from_agent": {
          "kind": "function",
          "name": "git_credential_ssh_key_from_agent",
          "location": {
            "file": "credential.h",
            "line": 276,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            },
            {
              "name": "username",
              "type": "const char *",
              "direction": "in",
              "comment": "username to use to authenticate"
            }
          ],
          "comment": [
            "Create a new ssh key credential object used for querying an ssh-agent.\n The supplied credential parameter will be internally duplicated."
          ],
          "group": "credential"
        },
        "git_credential_sign_cb": {
          "kind": "callback",
          "name": "git_credential_sign_cb",
          "type": "int (*)(LIBSSH2_SESSION *, unsigned char **, size_t *, const unsigned char *, size_t, void **)",
          "location": {
            "file": "credential.h",
            "line": 280,
            "column": 26
          },
          "params": [
            {
              "type": "LIBSSH2_SESSION *"
            },
            {
              "type": "unsigned char **"
            },
            {
              "type": "size_t *"
            },
            {
              "type": "const unsigned char *"
            },
            {
              "type": "size_t"
            },
            {
              "type": "void **"
            }
          ],
          "group": "credential",
          "parameterTo": [
            "git_credential_ssh_custom_new",
            "git_cred_ssh_custom_new"
          ],
          "typedef": true
        },
        "git_credential_ssh_custom_new": {
          "kind": "function",
          "name": "git_credential_ssh_custom_new",
          "location": {
            "file": "credential.h",
            "line": 304,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success or an error code for failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            },
            {
              "name": "username",
              "type": "const char *",
              "direction": "in",
              "comment": "username to use to authenticate"
            },
            {
              "name": "publickey",
              "type": "const char *",
              "direction": "in",
              "comment": "The bytes of the public key."
            },
            {
              "name": "publickey_len",
              "type": "size_t",
              "direction": "in",
              "comment": "The length of the public key in bytes."
            },
            {
              "name": "sign_callback",
              "type": "git_credential_sign_cb",
              "direction": "in",
              "comment": "The callback method to sign the data during the challenge.",
              "referenceType": "int (*)(LIBSSH2_SESSION *, unsigned char **, size_t *, const unsigned char *, size_t, void **)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Additional data to pass to the callback."
            }
          ],
          "comment": [
            "Create an ssh key credential with a custom signing function.",
            "This lets you use your own function to sign the challenge.",
            "This function and its credential type is provided for completeness\n and wraps `libssh2_userauth_publickey()`, which is undocumented.",
            "The supplied credential parameter will be internally duplicated."
          ],
          "group": "credential"
        }
      },
      "info": {
        "summary": "Git authentication & credential management"
      }
    },
    "sys/credential": {
      "apis": {
        "git_credential": {
          "kind": "struct",
          "name": "git_credential",
          "referenceName": "struct git_credential",
          "comment": [
            "The base structure for all credential types"
          ],
          "members": [
            {
              "name": "credtype",
              "type": "git_credential_t",
              "comment": [
                "A type of credential"
              ],
              "referenceType": "enum git_credential_t"
            },
            {
              "name": "free",
              "type": "void (*)(git_credential *)",
              "comment": [
                "The deallocator for this type of credentials"
              ]
            }
          ],
          "location": {
            "file": "sys/credential.h",
            "line": 25,
            "column": 8
          },
          "group": "sys/credential",
          "parameterTo": [
            "git_credential_acquire_cb",
            "git_credential_free",
            "git_credential_has_username",
            "git_credential_get_username",
            "git_credential_userpass_plaintext_new",
            "git_credential_default_new",
            "git_credential_username_new",
            "git_credential_ssh_key_new",
            "git_credential_ssh_key_memory_new",
            "git_credential_ssh_interactive_new",
            "git_credential_ssh_key_from_agent",
            "git_credential_ssh_custom_new",
            "git_credential_userpass",
            "git_cred_free",
            "git_cred_has_username",
            "git_cred_get_username",
            "git_cred_userpass_plaintext_new",
            "git_cred_default_new",
            "git_cred_username_new",
            "git_cred_ssh_key_new",
            "git_cred_ssh_key_memory_new",
            "git_cred_ssh_interactive_new",
            "git_cred_ssh_key_from_agent",
            "git_cred_ssh_custom_new",
            "git_cred_userpass",
            "git_transport_smart_credentials"
          ]
        },
        "git_credential_userpass_plaintext": {
          "kind": "struct",
          "name": "git_credential_userpass_plaintext",
          "referenceName": "struct git_credential_userpass_plaintext",
          "comment": [
            "A plaintext username and password"
          ],
          "members": [
            {
              "name": "parent",
              "type": "git_credential",
              "comment": [
                "The parent credential"
              ],
              "referenceType": "struct git_credential"
            },
            {
              "name": "username",
              "type": "char *",
              "comment": [
                "The username to authenticate as"
              ]
            },
            {
              "name": "password",
              "type": "char *",
              "comment": [
                "The password to use"
              ]
            }
          ],
          "location": {
            "file": "sys/credential.h",
            "line": 33,
            "column": 8
          },
          "group": "sys/credential"
        },
        "git_credential_username": {
          "kind": "struct",
          "name": "git_credential_username",
          "referenceName": "struct git_credential_username",
          "comment": [
            "Username-only credential information"
          ],
          "members": [
            {
              "name": "parent",
              "type": "git_credential",
              "comment": [
                "The parent credential"
              ],
              "referenceType": "struct git_credential"
            },
            {
              "name": "username",
              "type": "char[1]",
              "comment": [
                "The username to authenticate as"
              ]
            }
          ],
          "location": {
            "file": "sys/credential.h",
            "line": 40,
            "column": 8
          },
          "group": "sys/credential"
        },
        "git_credential_ssh_key": {
          "kind": "struct",
          "name": "git_credential_ssh_key",
          "referenceName": "struct git_credential_ssh_key",
          "comment": [
            "A ssh key from disk"
          ],
          "members": [
            {
              "name": "parent",
              "type": "git_credential",
              "comment": [
                "The parent credential"
              ],
              "referenceType": "struct git_credential"
            },
            {
              "name": "username",
              "type": "char *",
              "comment": [
                "The username to authenticate as"
              ]
            },
            {
              "name": "publickey",
              "type": "char *",
              "comment": [
                "The path to a public key"
              ]
            },
            {
              "name": "privatekey",
              "type": "char *",
              "comment": [
                "The path to a private key"
              ]
            },
            {
              "name": "passphrase",
              "type": "char *",
              "comment": [
                "Passphrase to decrypt the private key"
              ]
            }
          ],
          "location": {
            "file": "sys/credential.h",
            "line": 48,
            "column": 8
          },
          "group": "sys/credential"
        },
        "git_credential_ssh_interactive": {
          "kind": "struct",
          "name": "git_credential_ssh_interactive",
          "referenceName": "struct git_credential_ssh_interactive",
          "comment": [
            "Keyboard-interactive based ssh authentication"
          ],
          "members": [
            {
              "name": "parent",
              "type": "git_credential",
              "comment": [
                "The parent credential"
              ],
              "referenceType": "struct git_credential"
            },
            {
              "name": "username",
              "type": "char *",
              "comment": [
                "The username to authenticate as"
              ]
            },
            {
              "name": "prompt_callback",
              "type": "git_credential_ssh_interactive_cb",
              "comment": [
                "Callback used for authentication."
              ],
              "referenceType": "void (*)(const char *, int, const char *, int, int, const LIBSSH2_USERAUTH_KBDINT_PROMPT *, LIBSSH2_USERAUTH_KBDINT_RESPONSE *, void **)"
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "Payload passed to prompt_callback"
              ]
            }
          ],
          "location": {
            "file": "sys/credential.h",
            "line": 59,
            "column": 8
          },
          "group": "sys/credential"
        },
        "git_credential_ssh_custom": {
          "kind": "struct",
          "name": "git_credential_ssh_custom",
          "referenceName": "struct git_credential_ssh_custom",
          "comment": [
            "A key with a custom signature function"
          ],
          "members": [
            {
              "name": "parent",
              "type": "git_credential",
              "comment": [
                "The parent credential"
              ],
              "referenceType": "struct git_credential"
            },
            {
              "name": "username",
              "type": "char *",
              "comment": [
                "The username to authenticate as"
              ]
            },
            {
              "name": "publickey",
              "type": "char *",
              "comment": [
                "The public key data"
              ]
            },
            {
              "name": "publickey_len",
              "type": "size_t",
              "comment": [
                "Length of the public key"
              ]
            },
            {
              "name": "sign_callback",
              "type": "git_credential_sign_cb",
              "comment": [
                "Callback used to sign the data."
              ],
              "referenceType": "int (*)(LIBSSH2_SESSION *, unsigned char **, size_t *, const unsigned char *, size_t, void **)"
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "Payload passed to prompt_callback"
              ]
            }
          ],
          "location": {
            "file": "sys/credential.h",
            "line": 74,
            "column": 8
          },
          "group": "sys/credential"
        }
      },
      "info": {
        "summary": "Git credentials low-level implementation"
      }
    },
    "credential_helpers": {
      "apis": {
        "git_credential_userpass_payload": {
          "kind": "struct",
          "name": "git_credential_userpass_payload",
          "referenceName": "git_credential_userpass_payload",
          "comment": [
            "Payload for git_credential_userpass_plaintext."
          ],
          "members": [
            {
              "name": "username",
              "type": "const char *"
            },
            {
              "name": "password",
              "type": "const char *"
            }
          ],
          "location": {
            "file": "credential_helpers.h",
            "line": 24,
            "column": 16
          },
          "group": "credential_helpers"
        },
        "git_credential_userpass": {
          "kind": "function",
          "name": "git_credential_userpass",
          "location": {
            "file": "credential_helpers.h",
            "line": 43,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "The newly created credential object."
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "The resource for which we are demanding a credential."
            },
            {
              "name": "user_from_url",
              "type": "const char *",
              "direction": "in",
              "comment": "The username that was embedded in a \"user\\@host\"\n                          remote url, or NULL if not included."
            },
            {
              "name": "allowed_types",
              "type": "unsigned int",
              "direction": "in",
              "comment": "A bitmask stating which credential types are OK to return."
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "The payload provided when specifying this callback.  (This is\n        interpreted as a `git_credential_userpass_payload*`.)"
            }
          ],
          "comment": [
            "Stock callback usable as a git_credential_acquire_cb.  This calls\n git_cred_userpass_plaintext_new unless the protocol has not specified\n `GIT_CREDENTIAL_USERPASS_PLAINTEXT` as an allowed type."
          ],
          "group": "credential_helpers"
        }
      },
      "info": {
        "summary": "Utility functions for credential management"
      }
    },
    "deprecated": {
      "apis": {
        "GIT_ATTR_UNSPECIFIED_T": {
          "kind": "macro",
          "name": "GIT_ATTR_UNSPECIFIED_T",
          "location": {
            "file": "deprecated.h",
            "line": 70,
            "column": 9
          },
          "value": "GIT_ATTR_VALUE_UNSPECIFIED",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_ATTR_TRUE_T": {
          "kind": "macro",
          "name": "GIT_ATTR_TRUE_T",
          "location": {
            "file": "deprecated.h",
            "line": 71,
            "column": 9
          },
          "value": "GIT_ATTR_VALUE_TRUE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_ATTR_FALSE_T": {
          "kind": "macro",
          "name": "GIT_ATTR_FALSE_T",
          "location": {
            "file": "deprecated.h",
            "line": 72,
            "column": 9
          },
          "value": "GIT_ATTR_VALUE_FALSE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_ATTR_VALUE_T": {
          "kind": "macro",
          "name": "GIT_ATTR_VALUE_T",
          "location": {
            "file": "deprecated.h",
            "line": 73,
            "column": 9
          },
          "value": "GIT_ATTR_VALUE_STRING",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_ATTR_TRUE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_TRUE(attr)",
          "location": {
            "file": "deprecated.h",
            "line": 75,
            "column": 9
          },
          "value": "GIT_ATTR_IS_TRUE(attr)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_ATTR_FALSE(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_FALSE(attr)",
          "location": {
            "file": "deprecated.h",
            "line": 76,
            "column": 9
          },
          "value": "GIT_ATTR_IS_FALSE(attr)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_ATTR_UNSPECIFIED(attr)": {
          "kind": "macro",
          "name": "GIT_ATTR_UNSPECIFIED(attr)",
          "location": {
            "file": "deprecated.h",
            "line": 77,
            "column": 9
          },
          "value": "GIT_ATTR_IS_UNSPECIFIED(attr)",
          "comment": "",
          "group": "deprecated"
        },
        "git_attr_t": {
          "kind": "alias",
          "name": "git_attr_t",
          "type": "git_attr_value_t",
          "location": {
            "file": "deprecated.h",
            "line": 79,
            "column": 26
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_blob_create_fromworkdir": {
          "kind": "function",
          "name": "git_blob_create_fromworkdir",
          "location": {
            "file": "deprecated.h",
            "line": 93,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "relative_path",
              "type": "const char *"
            }
          ],
          "comment": [
            "Deprecated Blob Functions",
            "These functions are retained for backward compatibility.  The newer\n versions of these functions should be preferred in all new code.",
            "There is no plan to remove these backward compatibility values at\n this time.",
            "@\n{"
          ],
          "group": "deprecated"
        },
        "git_blob_create_fromdisk": {
          "kind": "function",
          "name": "git_blob_create_fromdisk",
          "location": {
            "file": "deprecated.h",
            "line": 94,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "path",
              "type": "const char *"
            }
          ],
          "group": "deprecated"
        },
        "git_blob_create_fromstream": {
          "kind": "function",
          "name": "git_blob_create_fromstream",
          "location": {
            "file": "deprecated.h",
            "line": 95,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_writestream **"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "hintpath",
              "type": "const char *"
            }
          ],
          "group": "deprecated"
        },
        "git_blob_create_fromstream_commit": {
          "kind": "function",
          "name": "git_blob_create_fromstream_commit",
          "location": {
            "file": "deprecated.h",
            "line": 99,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *"
            },
            {
              "name": "stream",
              "type": "git_writestream *"
            }
          ],
          "group": "deprecated"
        },
        "git_blob_create_frombuffer": {
          "kind": "function",
          "name": "git_blob_create_frombuffer",
          "location": {
            "file": "deprecated.h",
            "line": 102,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "buffer",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ],
          "group": "deprecated"
        },
        "git_blob_filtered_content": {
          "kind": "function",
          "name": "git_blob_filtered_content",
          "location": {
            "file": "deprecated.h",
            "line": 110,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *"
            },
            {
              "name": "blob",
              "type": "git_blob *"
            },
            {
              "name": "as_path",
              "type": "const char *"
            },
            {
              "name": "check_for_binary_data",
              "type": "int"
            }
          ],
          "comment": [
            "Deprecated in favor of `git_blob_filter`."
          ],
          "deprecations": [
            "Use git_blob_filter"
          ],
          "see": [
            "git_blob_filter"
          ],
          "group": "deprecated"
        },
        "git_buf_free": {
          "kind": "function",
          "name": "git_buf_free",
          "location": {
            "file": "deprecated.h",
            "line": 139,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "buffer",
              "type": "git_buf *"
            }
          ],
          "comment": [
            "Free the memory referred to by the git_buf.  This is an alias of\n `git_buf_dispose` and is preserved for backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "Use git_buf_dispose"
          ],
          "see": [
            "git_buf_dispose"
          ],
          "group": "deprecated"
        },
        "GIT_CVAR_FALSE": {
          "kind": "macro",
          "name": "GIT_CVAR_FALSE",
          "location": {
            "file": "deprecated.h",
            "line": 147,
            "column": 9
          },
          "value": "GIT_CONFIGMAP_FALSE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CVAR_TRUE": {
          "kind": "macro",
          "name": "GIT_CVAR_TRUE",
          "location": {
            "file": "deprecated.h",
            "line": 148,
            "column": 9
          },
          "value": "GIT_CONFIGMAP_TRUE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CVAR_INT32": {
          "kind": "macro",
          "name": "GIT_CVAR_INT32",
          "location": {
            "file": "deprecated.h",
            "line": 149,
            "column": 9
          },
          "value": "GIT_CONFIGMAP_INT32",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CVAR_STRING": {
          "kind": "macro",
          "name": "GIT_CVAR_STRING",
          "location": {
            "file": "deprecated.h",
            "line": 150,
            "column": 9
          },
          "value": "GIT_CONFIGMAP_STRING",
          "comment": "",
          "group": "deprecated"
        },
        "git_cvar_map": {
          "kind": "alias",
          "name": "git_cvar_map",
          "type": "git_configmap",
          "location": {
            "file": "deprecated.h",
            "line": 152,
            "column": 23
          },
          "typedef": true,
          "group": "deprecated"
        },
        "GITERR_NONE": {
          "kind": "macro",
          "name": "GITERR_NONE",
          "location": {
            "file": "deprecated.h",
            "line": 167,
            "column": 9
          },
          "value": "GIT_ERROR_NONE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_NOMEMORY": {
          "kind": "macro",
          "name": "GITERR_NOMEMORY",
          "location": {
            "file": "deprecated.h",
            "line": 168,
            "column": 9
          },
          "value": "GIT_ERROR_NOMEMORY",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_OS": {
          "kind": "macro",
          "name": "GITERR_OS",
          "location": {
            "file": "deprecated.h",
            "line": 169,
            "column": 9
          },
          "value": "GIT_ERROR_OS",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_INVALID": {
          "kind": "macro",
          "name": "GITERR_INVALID",
          "location": {
            "file": "deprecated.h",
            "line": 170,
            "column": 9
          },
          "value": "GIT_ERROR_INVALID",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_REFERENCE": {
          "kind": "macro",
          "name": "GITERR_REFERENCE",
          "location": {
            "file": "deprecated.h",
            "line": 171,
            "column": 9
          },
          "value": "GIT_ERROR_REFERENCE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_ZLIB": {
          "kind": "macro",
          "name": "GITERR_ZLIB",
          "location": {
            "file": "deprecated.h",
            "line": 172,
            "column": 9
          },
          "value": "GIT_ERROR_ZLIB",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_REPOSITORY": {
          "kind": "macro",
          "name": "GITERR_REPOSITORY",
          "location": {
            "file": "deprecated.h",
            "line": 173,
            "column": 9
          },
          "value": "GIT_ERROR_REPOSITORY",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_CONFIG": {
          "kind": "macro",
          "name": "GITERR_CONFIG",
          "location": {
            "file": "deprecated.h",
            "line": 174,
            "column": 9
          },
          "value": "GIT_ERROR_CONFIG",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_REGEX": {
          "kind": "macro",
          "name": "GITERR_REGEX",
          "location": {
            "file": "deprecated.h",
            "line": 175,
            "column": 9
          },
          "value": "GIT_ERROR_REGEX",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_ODB": {
          "kind": "macro",
          "name": "GITERR_ODB",
          "location": {
            "file": "deprecated.h",
            "line": 176,
            "column": 9
          },
          "value": "GIT_ERROR_ODB",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_INDEX": {
          "kind": "macro",
          "name": "GITERR_INDEX",
          "location": {
            "file": "deprecated.h",
            "line": 177,
            "column": 9
          },
          "value": "GIT_ERROR_INDEX",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_OBJECT": {
          "kind": "macro",
          "name": "GITERR_OBJECT",
          "location": {
            "file": "deprecated.h",
            "line": 178,
            "column": 9
          },
          "value": "GIT_ERROR_OBJECT",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_NET": {
          "kind": "macro",
          "name": "GITERR_NET",
          "location": {
            "file": "deprecated.h",
            "line": 179,
            "column": 9
          },
          "value": "GIT_ERROR_NET",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_TAG": {
          "kind": "macro",
          "name": "GITERR_TAG",
          "location": {
            "file": "deprecated.h",
            "line": 180,
            "column": 9
          },
          "value": "GIT_ERROR_TAG",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_TREE": {
          "kind": "macro",
          "name": "GITERR_TREE",
          "location": {
            "file": "deprecated.h",
            "line": 181,
            "column": 9
          },
          "value": "GIT_ERROR_TREE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_INDEXER": {
          "kind": "macro",
          "name": "GITERR_INDEXER",
          "location": {
            "file": "deprecated.h",
            "line": 182,
            "column": 9
          },
          "value": "GIT_ERROR_INDEXER",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_SSL": {
          "kind": "macro",
          "name": "GITERR_SSL",
          "location": {
            "file": "deprecated.h",
            "line": 183,
            "column": 9
          },
          "value": "GIT_ERROR_SSL",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_SUBMODULE": {
          "kind": "macro",
          "name": "GITERR_SUBMODULE",
          "location": {
            "file": "deprecated.h",
            "line": 184,
            "column": 9
          },
          "value": "GIT_ERROR_SUBMODULE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_THREAD": {
          "kind": "macro",
          "name": "GITERR_THREAD",
          "location": {
            "file": "deprecated.h",
            "line": 185,
            "column": 9
          },
          "value": "GIT_ERROR_THREAD",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_STASH": {
          "kind": "macro",
          "name": "GITERR_STASH",
          "location": {
            "file": "deprecated.h",
            "line": 186,
            "column": 9
          },
          "value": "GIT_ERROR_STASH",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_CHECKOUT": {
          "kind": "macro",
          "name": "GITERR_CHECKOUT",
          "location": {
            "file": "deprecated.h",
            "line": 187,
            "column": 9
          },
          "value": "GIT_ERROR_CHECKOUT",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_FETCHHEAD": {
          "kind": "macro",
          "name": "GITERR_FETCHHEAD",
          "location": {
            "file": "deprecated.h",
            "line": 188,
            "column": 9
          },
          "value": "GIT_ERROR_FETCHHEAD",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_MERGE": {
          "kind": "macro",
          "name": "GITERR_MERGE",
          "location": {
            "file": "deprecated.h",
            "line": 189,
            "column": 9
          },
          "value": "GIT_ERROR_MERGE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_SSH": {
          "kind": "macro",
          "name": "GITERR_SSH",
          "location": {
            "file": "deprecated.h",
            "line": 190,
            "column": 9
          },
          "value": "GIT_ERROR_SSH",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_FILTER": {
          "kind": "macro",
          "name": "GITERR_FILTER",
          "location": {
            "file": "deprecated.h",
            "line": 191,
            "column": 9
          },
          "value": "GIT_ERROR_FILTER",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_REVERT": {
          "kind": "macro",
          "name": "GITERR_REVERT",
          "location": {
            "file": "deprecated.h",
            "line": 192,
            "column": 9
          },
          "value": "GIT_ERROR_REVERT",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_CALLBACK": {
          "kind": "macro",
          "name": "GITERR_CALLBACK",
          "location": {
            "file": "deprecated.h",
            "line": 193,
            "column": 9
          },
          "value": "GIT_ERROR_CALLBACK",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_CHERRYPICK": {
          "kind": "macro",
          "name": "GITERR_CHERRYPICK",
          "location": {
            "file": "deprecated.h",
            "line": 194,
            "column": 9
          },
          "value": "GIT_ERROR_CHERRYPICK",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_DESCRIBE": {
          "kind": "macro",
          "name": "GITERR_DESCRIBE",
          "location": {
            "file": "deprecated.h",
            "line": 195,
            "column": 9
          },
          "value": "GIT_ERROR_DESCRIBE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_REBASE": {
          "kind": "macro",
          "name": "GITERR_REBASE",
          "location": {
            "file": "deprecated.h",
            "line": 196,
            "column": 9
          },
          "value": "GIT_ERROR_REBASE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_FILESYSTEM": {
          "kind": "macro",
          "name": "GITERR_FILESYSTEM",
          "location": {
            "file": "deprecated.h",
            "line": 197,
            "column": 9
          },
          "value": "GIT_ERROR_FILESYSTEM",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_PATCH": {
          "kind": "macro",
          "name": "GITERR_PATCH",
          "location": {
            "file": "deprecated.h",
            "line": 198,
            "column": 9
          },
          "value": "GIT_ERROR_PATCH",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_WORKTREE": {
          "kind": "macro",
          "name": "GITERR_WORKTREE",
          "location": {
            "file": "deprecated.h",
            "line": 199,
            "column": 9
          },
          "value": "GIT_ERROR_WORKTREE",
          "comment": "",
          "group": "deprecated"
        },
        "GITERR_SHA1": {
          "kind": "macro",
          "name": "GITERR_SHA1",
          "location": {
            "file": "deprecated.h",
            "line": 200,
            "column": 9
          },
          "value": "GIT_ERROR_SHA1",
          "comment": "",
          "group": "deprecated"
        },
        "giterr_last": {
          "kind": "function",
          "name": "giterr_last",
          "location": {
            "file": "deprecated.h",
            "line": 213,
            "column": 31
          },
          "returns": {
            "type": "const git_error *"
          },
          "comment": [
            "Return the last `git_error` object that was generated for the\n current thread.  This is an alias of `git_error_last` and is\n preserved for backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "Use git_error_last"
          ],
          "see": [
            "git_error_last"
          ],
          "group": "deprecated"
        },
        "giterr_clear": {
          "kind": "function",
          "name": "giterr_clear",
          "location": {
            "file": "deprecated.h",
            "line": 225,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Clear the last error.  This is an alias of `git_error_last` and is\n preserved for backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "Use git_error_clear"
          ],
          "see": [
            "git_error_clear"
          ],
          "group": "deprecated"
        },
        "giterr_set_str": {
          "kind": "function",
          "name": "giterr_set_str",
          "location": {
            "file": "deprecated.h",
            "line": 237,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "error_class",
              "type": "int"
            },
            {
              "name": "string",
              "type": "const char *"
            }
          ],
          "comment": [
            "Sets the error message to the given string.  This is an alias of\n `git_error_set_str` and is preserved for backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "Use git_error_set_str"
          ],
          "see": [
            "git_error_set_str"
          ],
          "group": "deprecated"
        },
        "giterr_set_oom": {
          "kind": "function",
          "name": "giterr_set_oom",
          "location": {
            "file": "deprecated.h",
            "line": 249,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Indicates that an out-of-memory situation occurred.  This is an alias\n of `git_error_set_oom` and is preserved for backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "Use git_error_set_oom"
          ],
          "see": [
            "git_error_set_oom"
          ],
          "group": "deprecated"
        },
        "GIT_IDXENTRY_NAMEMASK": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_NAMEMASK",
          "location": {
            "file": "deprecated.h",
            "line": 264,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_NAMEMASK",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_STAGEMASK": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGEMASK",
          "location": {
            "file": "deprecated.h",
            "line": 265,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_STAGEMASK",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_STAGESHIFT": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGESHIFT",
          "location": {
            "file": "deprecated.h",
            "line": 266,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_STAGESHIFT",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_EXTENDED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_EXTENDED",
          "location": {
            "file": "deprecated.h",
            "line": 269,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_EXTENDED",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_VALID": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_VALID",
          "location": {
            "file": "deprecated.h",
            "line": 270,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_VALID",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_STAGE(E)": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGE(E)",
          "location": {
            "file": "deprecated.h",
            "line": 272,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_STAGE(E)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_STAGE_SET(E,S)": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_STAGE_SET(E,S)",
          "location": {
            "file": "deprecated.h",
            "line": 273,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_STAGE_SET(E,S)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_INTENT_TO_ADD": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_INTENT_TO_ADD",
          "location": {
            "file": "deprecated.h",
            "line": 276,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_INTENT_TO_ADD",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_SKIP_WORKTREE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_SKIP_WORKTREE",
          "location": {
            "file": "deprecated.h",
            "line": 277,
            "column": 9
          },
          "value": "GIT_INDEX_ENTRY_SKIP_WORKTREE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_EXTENDED_FLAGS": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_EXTENDED_FLAGS",
          "location": {
            "file": "deprecated.h",
            "line": 278,
            "column": 9
          },
          "value": "(GIT_INDEX_ENTRY_INTENT_TO_ADD | GIT_INDEX_ENTRY_SKIP_WORKTREE)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_EXTENDED2": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_EXTENDED2",
          "location": {
            "file": "deprecated.h",
            "line": 279,
            "column": 9
          },
          "value": "(1 << 15)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_UPDATE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UPDATE",
          "location": {
            "file": "deprecated.h",
            "line": 280,
            "column": 9
          },
          "value": "(1 << 0)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_REMOVE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_REMOVE",
          "location": {
            "file": "deprecated.h",
            "line": 281,
            "column": 9
          },
          "value": "(1 << 1)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_UPTODATE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UPTODATE",
          "location": {
            "file": "deprecated.h",
            "line": 282,
            "column": 9
          },
          "value": "(1 << 2)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_ADDED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_ADDED",
          "location": {
            "file": "deprecated.h",
            "line": 283,
            "column": 9
          },
          "value": "(1 << 3)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_HASHED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_HASHED",
          "location": {
            "file": "deprecated.h",
            "line": 284,
            "column": 9
          },
          "value": "(1 << 4)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_UNHASHED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UNHASHED",
          "location": {
            "file": "deprecated.h",
            "line": 285,
            "column": 9
          },
          "value": "(1 << 5)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_WT_REMOVE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_WT_REMOVE",
          "location": {
            "file": "deprecated.h",
            "line": 286,
            "column": 9
          },
          "value": "(1 << 6)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_CONFLICTED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_CONFLICTED",
          "location": {
            "file": "deprecated.h",
            "line": 287,
            "column": 9
          },
          "value": "(1 << 7)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_UNPACKED": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_UNPACKED",
          "location": {
            "file": "deprecated.h",
            "line": 288,
            "column": 9
          },
          "value": "(1 << 8)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_IDXENTRY_NEW_SKIP_WORKTREE": {
          "kind": "macro",
          "name": "GIT_IDXENTRY_NEW_SKIP_WORKTREE",
          "location": {
            "file": "deprecated.h",
            "line": 289,
            "column": 9
          },
          "value": "(1 << 9)",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_INDEXCAP_IGNORE_CASE": {
          "kind": "macro",
          "name": "GIT_INDEXCAP_IGNORE_CASE",
          "location": {
            "file": "deprecated.h",
            "line": 292,
            "column": 9
          },
          "value": "GIT_INDEX_CAPABILITY_IGNORE_CASE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_INDEXCAP_NO_FILEMODE": {
          "kind": "macro",
          "name": "GIT_INDEXCAP_NO_FILEMODE",
          "location": {
            "file": "deprecated.h",
            "line": 293,
            "column": 9
          },
          "value": "GIT_INDEX_CAPABILITY_NO_FILEMODE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_INDEXCAP_NO_SYMLINKS": {
          "kind": "macro",
          "name": "GIT_INDEXCAP_NO_SYMLINKS",
          "location": {
            "file": "deprecated.h",
            "line": 294,
            "column": 9
          },
          "value": "GIT_INDEX_CAPABILITY_NO_SYMLINKS",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_INDEXCAP_FROM_OWNER": {
          "kind": "macro",
          "name": "GIT_INDEXCAP_FROM_OWNER",
          "location": {
            "file": "deprecated.h",
            "line": 295,
            "column": 9
          },
          "value": "GIT_INDEX_CAPABILITY_FROM_OWNER",
          "comment": "",
          "group": "deprecated"
        },
        "git_index_add_frombuffer": {
          "kind": "function",
          "name": "git_index_add_frombuffer",
          "location": {
            "file": "deprecated.h",
            "line": 297,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *"
            },
            {
              "name": "entry",
              "type": "const git_index_entry *"
            },
            {
              "name": "buffer",
              "type": "const void *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ],
          "group": "deprecated"
        },
        "git_otype": {
          "kind": "macro",
          "name": "git_otype",
          "location": {
            "file": "deprecated.h",
            "line": 314,
            "column": 9
          },
          "value": "git_object_t",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_ANY": {
          "kind": "macro",
          "name": "GIT_OBJ_ANY",
          "location": {
            "file": "deprecated.h",
            "line": 316,
            "column": 9
          },
          "value": "GIT_OBJECT_ANY",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_BAD": {
          "kind": "macro",
          "name": "GIT_OBJ_BAD",
          "location": {
            "file": "deprecated.h",
            "line": 317,
            "column": 9
          },
          "value": "GIT_OBJECT_INVALID",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ__EXT1": {
          "kind": "macro",
          "name": "GIT_OBJ__EXT1",
          "location": {
            "file": "deprecated.h",
            "line": 318,
            "column": 9
          },
          "value": "0",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_COMMIT": {
          "kind": "macro",
          "name": "GIT_OBJ_COMMIT",
          "location": {
            "file": "deprecated.h",
            "line": 319,
            "column": 9
          },
          "value": "GIT_OBJECT_COMMIT",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_TREE": {
          "kind": "macro",
          "name": "GIT_OBJ_TREE",
          "location": {
            "file": "deprecated.h",
            "line": 320,
            "column": 9
          },
          "value": "GIT_OBJECT_TREE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_BLOB": {
          "kind": "macro",
          "name": "GIT_OBJ_BLOB",
          "location": {
            "file": "deprecated.h",
            "line": 321,
            "column": 9
          },
          "value": "GIT_OBJECT_BLOB",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_TAG": {
          "kind": "macro",
          "name": "GIT_OBJ_TAG",
          "location": {
            "file": "deprecated.h",
            "line": 322,
            "column": 9
          },
          "value": "GIT_OBJECT_TAG",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ__EXT2": {
          "kind": "macro",
          "name": "GIT_OBJ__EXT2",
          "location": {
            "file": "deprecated.h",
            "line": 323,
            "column": 9
          },
          "value": "5",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_OFS_DELTA": {
          "kind": "macro",
          "name": "GIT_OBJ_OFS_DELTA",
          "location": {
            "file": "deprecated.h",
            "line": 324,
            "column": 9
          },
          "value": "GIT_OBJECT_OFS_DELTA",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_OBJ_REF_DELTA": {
          "kind": "macro",
          "name": "GIT_OBJ_REF_DELTA",
          "location": {
            "file": "deprecated.h",
            "line": 325,
            "column": 9
          },
          "value": "GIT_OBJECT_REF_DELTA",
          "comment": "",
          "group": "deprecated"
        },
        "git_object__size": {
          "kind": "function",
          "name": "git_object__size",
          "location": {
            "file": "deprecated.h",
            "line": 339,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "size in bytes of the object"
          },
          "params": [
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "object type to get its size",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.",
            "For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API."
          ],
          "group": "deprecated"
        },
        "git_ref_t": {
          "kind": "macro",
          "name": "git_ref_t",
          "location": {
            "file": "deprecated.h",
            "line": 354,
            "column": 9
          },
          "value": "git_reference_t",
          "comment": "Basic type of any Git reference.",
          "group": "deprecated"
        },
        "git_reference_normalize_t": {
          "kind": "macro",
          "name": "git_reference_normalize_t",
          "location": {
            "file": "deprecated.h",
            "line": 355,
            "column": 9
          },
          "value": "git_reference_format_t",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_INVALID": {
          "kind": "macro",
          "name": "GIT_REF_INVALID",
          "location": {
            "file": "deprecated.h",
            "line": 357,
            "column": 9
          },
          "value": "GIT_REFERENCE_INVALID",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_OID": {
          "kind": "macro",
          "name": "GIT_REF_OID",
          "location": {
            "file": "deprecated.h",
            "line": 358,
            "column": 9
          },
          "value": "GIT_REFERENCE_DIRECT",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_SYMBOLIC": {
          "kind": "macro",
          "name": "GIT_REF_SYMBOLIC",
          "location": {
            "file": "deprecated.h",
            "line": 359,
            "column": 9
          },
          "value": "GIT_REFERENCE_SYMBOLIC",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_LISTALL": {
          "kind": "macro",
          "name": "GIT_REF_LISTALL",
          "location": {
            "file": "deprecated.h",
            "line": 360,
            "column": 9
          },
          "value": "GIT_REFERENCE_ALL",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_FORMAT_NORMAL": {
          "kind": "macro",
          "name": "GIT_REF_FORMAT_NORMAL",
          "location": {
            "file": "deprecated.h",
            "line": 362,
            "column": 9
          },
          "value": "GIT_REFERENCE_FORMAT_NORMAL",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_FORMAT_ALLOW_ONELEVEL": {
          "kind": "macro",
          "name": "GIT_REF_FORMAT_ALLOW_ONELEVEL",
          "location": {
            "file": "deprecated.h",
            "line": 363,
            "column": 9
          },
          "value": "GIT_REFERENCE_FORMAT_ALLOW_ONELEVEL",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_FORMAT_REFSPEC_PATTERN": {
          "kind": "macro",
          "name": "GIT_REF_FORMAT_REFSPEC_PATTERN",
          "location": {
            "file": "deprecated.h",
            "line": 364,
            "column": 9
          },
          "value": "GIT_REFERENCE_FORMAT_REFSPEC_PATTERN",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_REF_FORMAT_REFSPEC_SHORTHAND": {
          "kind": "macro",
          "name": "GIT_REF_FORMAT_REFSPEC_SHORTHAND",
          "location": {
            "file": "deprecated.h",
            "line": 365,
            "column": 9
          },
          "value": "GIT_REFERENCE_FORMAT_REFSPEC_SHORTHAND",
          "comment": "",
          "group": "deprecated"
        },
        "git_tag_create_frombuffer": {
          "kind": "function",
          "name": "git_tag_create_frombuffer",
          "location": {
            "file": "deprecated.h",
            "line": 367,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "buffer",
              "type": "const char *"
            },
            {
              "name": "force",
              "type": "int"
            }
          ],
          "group": "deprecated"
        },
        "git_cred": {
          "kind": "alias",
          "name": "git_cred",
          "type": "git_credential",
          "comment": [
            "Deprecated Credential Types",
            "These types are retained for backward compatibility.  The newer\n versions of these values should be preferred in all new code.",
            "There is no plan to remove these backward compatibility values at\n this time."
          ],
          "location": {
            "file": "deprecated.h",
            "line": 384,
            "column": 24
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_userpass_plaintext": {
          "kind": "alias",
          "name": "git_cred_userpass_plaintext",
          "type": "git_credential_userpass_plaintext",
          "location": {
            "file": "deprecated.h",
            "line": 385,
            "column": 43
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_username": {
          "kind": "alias",
          "name": "git_cred_username",
          "type": "git_credential_username",
          "location": {
            "file": "deprecated.h",
            "line": 386,
            "column": 33
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_default": {
          "kind": "alias",
          "name": "git_cred_default",
          "type": "git_credential_default",
          "location": {
            "file": "deprecated.h",
            "line": 387,
            "column": 32
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_ssh_key": {
          "kind": "alias",
          "name": "git_cred_ssh_key",
          "type": "git_credential_ssh_key",
          "location": {
            "file": "deprecated.h",
            "line": 388,
            "column": 32
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_ssh_interactive": {
          "kind": "alias",
          "name": "git_cred_ssh_interactive",
          "type": "git_credential_ssh_interactive",
          "location": {
            "file": "deprecated.h",
            "line": 389,
            "column": 40
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_ssh_custom": {
          "kind": "alias",
          "name": "git_cred_ssh_custom",
          "type": "git_credential_ssh_custom",
          "location": {
            "file": "deprecated.h",
            "line": 390,
            "column": 35
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_acquire_cb": {
          "kind": "alias",
          "name": "git_cred_acquire_cb",
          "type": "git_credential_acquire_cb",
          "location": {
            "file": "deprecated.h",
            "line": 392,
            "column": 35
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_sign_callback": {
          "kind": "alias",
          "name": "git_cred_sign_callback",
          "type": "git_credential_sign_cb",
          "location": {
            "file": "deprecated.h",
            "line": 393,
            "column": 32
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_sign_cb": {
          "kind": "alias",
          "name": "git_cred_sign_cb",
          "type": "git_credential_sign_cb",
          "location": {
            "file": "deprecated.h",
            "line": 394,
            "column": 32
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_ssh_interactive_callback": {
          "kind": "alias",
          "name": "git_cred_ssh_interactive_callback",
          "type": "git_credential_ssh_interactive_cb",
          "location": {
            "file": "deprecated.h",
            "line": 395,
            "column": 43
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_ssh_interactive_cb": {
          "kind": "alias",
          "name": "git_cred_ssh_interactive_cb",
          "type": "git_credential_ssh_interactive_cb",
          "location": {
            "file": "deprecated.h",
            "line": 396,
            "column": 43
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_credtype_t": {
          "kind": "macro",
          "name": "git_credtype_t",
          "location": {
            "file": "deprecated.h",
            "line": 398,
            "column": 9
          },
          "value": "git_credential_t",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CREDTYPE_USERPASS_PLAINTEXT": {
          "kind": "macro",
          "name": "GIT_CREDTYPE_USERPASS_PLAINTEXT",
          "location": {
            "file": "deprecated.h",
            "line": 400,
            "column": 9
          },
          "value": "GIT_CREDENTIAL_USERPASS_PLAINTEXT",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CREDTYPE_SSH_KEY": {
          "kind": "macro",
          "name": "GIT_CREDTYPE_SSH_KEY",
          "location": {
            "file": "deprecated.h",
            "line": 401,
            "column": 9
          },
          "value": "GIT_CREDENTIAL_SSH_KEY",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CREDTYPE_SSH_CUSTOM": {
          "kind": "macro",
          "name": "GIT_CREDTYPE_SSH_CUSTOM",
          "location": {
            "file": "deprecated.h",
            "line": 402,
            "column": 9
          },
          "value": "GIT_CREDENTIAL_SSH_CUSTOM",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CREDTYPE_DEFAULT": {
          "kind": "macro",
          "name": "GIT_CREDTYPE_DEFAULT",
          "location": {
            "file": "deprecated.h",
            "line": 403,
            "column": 9
          },
          "value": "GIT_CREDENTIAL_DEFAULT",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CREDTYPE_SSH_INTERACTIVE": {
          "kind": "macro",
          "name": "GIT_CREDTYPE_SSH_INTERACTIVE",
          "location": {
            "file": "deprecated.h",
            "line": 404,
            "column": 9
          },
          "value": "GIT_CREDENTIAL_SSH_INTERACTIVE",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CREDTYPE_USERNAME": {
          "kind": "macro",
          "name": "GIT_CREDTYPE_USERNAME",
          "location": {
            "file": "deprecated.h",
            "line": 405,
            "column": 9
          },
          "value": "GIT_CREDENTIAL_USERNAME",
          "comment": "",
          "group": "deprecated"
        },
        "GIT_CREDTYPE_SSH_MEMORY": {
          "kind": "macro",
          "name": "GIT_CREDTYPE_SSH_MEMORY",
          "location": {
            "file": "deprecated.h",
            "line": 406,
            "column": 9
          },
          "value": "GIT_CREDENTIAL_SSH_MEMORY",
          "comment": "",
          "group": "deprecated"
        },
        "git_cred_free": {
          "kind": "function",
          "name": "git_cred_free",
          "location": {
            "file": "deprecated.h",
            "line": 408,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "cred",
              "type": "git_credential *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_has_username": {
          "kind": "function",
          "name": "git_cred_has_username",
          "location": {
            "file": "deprecated.h",
            "line": 409,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "cred",
              "type": "git_credential *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_get_username": {
          "kind": "function",
          "name": "git_cred_get_username",
          "location": {
            "file": "deprecated.h",
            "line": 410,
            "column": 26
          },
          "returns": {
            "type": "const char *"
          },
          "params": [
            {
              "name": "cred",
              "type": "git_credential *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_userpass_plaintext_new": {
          "kind": "function",
          "name": "git_cred_userpass_plaintext_new",
          "location": {
            "file": "deprecated.h",
            "line": 411,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *"
            },
            {
              "name": "password",
              "type": "const char *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_default_new": {
          "kind": "function",
          "name": "git_cred_default_new",
          "location": {
            "file": "deprecated.h",
            "line": 415,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_username_new": {
          "kind": "function",
          "name": "git_cred_username_new",
          "location": {
            "file": "deprecated.h",
            "line": 416,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_ssh_key_new": {
          "kind": "function",
          "name": "git_cred_ssh_key_new",
          "location": {
            "file": "deprecated.h",
            "line": 417,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *"
            },
            {
              "name": "publickey",
              "type": "const char *"
            },
            {
              "name": "privatekey",
              "type": "const char *"
            },
            {
              "name": "passphrase",
              "type": "const char *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_ssh_key_memory_new": {
          "kind": "function",
          "name": "git_cred_ssh_key_memory_new",
          "location": {
            "file": "deprecated.h",
            "line": 423,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *"
            },
            {
              "name": "publickey",
              "type": "const char *"
            },
            {
              "name": "privatekey",
              "type": "const char *"
            },
            {
              "name": "passphrase",
              "type": "const char *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_ssh_interactive_new": {
          "kind": "function",
          "name": "git_cred_ssh_interactive_new",
          "location": {
            "file": "deprecated.h",
            "line": 429,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *"
            },
            {
              "name": "prompt_callback",
              "type": "git_credential_ssh_interactive_cb",
              "referenceType": "void (*)(const char *, int, const char *, int, int, const LIBSSH2_USERAUTH_KBDINT_PROMPT *, LIBSSH2_USERAUTH_KBDINT_RESPONSE *, void **)"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_ssh_key_from_agent": {
          "kind": "function",
          "name": "git_cred_ssh_key_from_agent",
          "location": {
            "file": "deprecated.h",
            "line": 434,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_ssh_custom_new": {
          "kind": "function",
          "name": "git_cred_ssh_custom_new",
          "location": {
            "file": "deprecated.h",
            "line": 437,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "username",
              "type": "const char *"
            },
            {
              "name": "publickey",
              "type": "const char *"
            },
            {
              "name": "publickey_len",
              "type": "size_t"
            },
            {
              "name": "sign_callback",
              "type": "git_credential_sign_cb",
              "referenceType": "int (*)(LIBSSH2_SESSION *, unsigned char **, size_t *, const unsigned char *, size_t, void **)"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "group": "deprecated"
        },
        "git_cred_userpass_payload": {
          "kind": "alias",
          "name": "git_cred_userpass_payload",
          "type": "git_credential_userpass_payload",
          "location": {
            "file": "deprecated.h",
            "line": 447,
            "column": 41
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_cred_userpass": {
          "kind": "function",
          "name": "git_cred_userpass",
          "location": {
            "file": "deprecated.h",
            "line": 449,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **"
            },
            {
              "name": "url",
              "type": "const char *"
            },
            {
              "name": "user_from_url",
              "type": "const char *"
            },
            {
              "name": "allowed_types",
              "type": "unsigned int"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "group": "deprecated"
        },
        "git_trace_callback": {
          "kind": "alias",
          "name": "git_trace_callback",
          "type": "git_trace_cb",
          "comment": [
            "Deprecated Trace Callback Types",
            "These types are retained for backward compatibility.  The newer\n versions of these values should be preferred in all new code.",
            "There is no plan to remove these backward compatibility values at\n this time.",
            "@\n{"
          ],
          "location": {
            "file": "deprecated.h",
            "line": 468,
            "column": 22
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_oid_iszero": {
          "kind": "function",
          "name": "git_oid_iszero",
          "location": {
            "file": "deprecated.h",
            "line": 482,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "id",
              "type": "const git_oid *"
            }
          ],
          "comment": [
            "Deprecated Object ID Types",
            "These types are retained for backward compatibility.  The newer\n versions of these values should be preferred in all new code.",
            "There is no plan to remove these backward compatibility values at\n this time.",
            "@\n{"
          ],
          "group": "deprecated"
        },
        "git_transfer_progress": {
          "kind": "alias",
          "name": "git_transfer_progress",
          "type": "git_indexer_progress",
          "comment": [
            "This structure is used to provide callers information about the\n progress of indexing a packfile.",
            "This type is deprecated, but there is no plan to remove this\n type definition at this time."
          ],
          "location": {
            "file": "deprecated.h",
            "line": 503,
            "column": 30
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_transfer_progress_cb": {
          "kind": "alias",
          "name": "git_transfer_progress_cb",
          "type": "git_indexer_progress_cb",
          "comment": [
            "Type definition for progress callbacks during indexing.",
            "This type is deprecated, but there is no plan to remove this\n type definition at this time."
          ],
          "location": {
            "file": "deprecated.h",
            "line": 511,
            "column": 33
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_push_transfer_progress": {
          "kind": "alias",
          "name": "git_push_transfer_progress",
          "type": "git_push_transfer_progress_cb",
          "comment": [
            "Type definition for push transfer progress callbacks.",
            "This type is deprecated, but there is no plan to remove this\n type definition at this time."
          ],
          "location": {
            "file": "deprecated.h",
            "line": 519,
            "column": 39
          },
          "typedef": true,
          "group": "deprecated"
        },
        "git_remote_completion_type": {
          "kind": "macro",
          "name": "git_remote_completion_type",
          "location": {
            "file": "deprecated.h",
            "line": 522,
            "column": 9
          },
          "value": "git_remote_completion_t",
          "comment": "The type of a remote completion event",
          "group": "deprecated"
        },
        "git_headlist_cb": {
          "kind": "callback",
          "name": "git_headlist_cb",
          "type": "int (*)(git_remote_head *, void *)",
          "comment": [
            "Callback for listing the remote heads"
          ],
          "location": {
            "file": "deprecated.h",
            "line": 527,
            "column": 26
          },
          "params": [
            {
              "type": "git_remote_head *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "deprecated",
          "typedef": true
        },
        "git_strarray_copy": {
          "kind": "function",
          "name": "git_strarray_copy",
          "location": {
            "file": "deprecated.h",
            "line": 551,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n 0 on allocation failure"
          },
          "params": [
            {
              "name": "tgt",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "target"
            },
            {
              "name": "src",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "source"
            }
          ],
          "comment": [
            "Copy a string array object from source to target.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "group": "deprecated"
        },
        "git_strarray_free": {
          "kind": "function",
          "name": "git_strarray_free",
          "location": {
            "file": "deprecated.h",
            "line": 563,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "array",
              "type": "git_strarray *"
            }
          ],
          "comment": [
            "Free the memory referred to by the git_strarray.  This is an alias of\n `git_strarray_dispose` and is preserved for backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "Use git_strarray_dispose"
          ],
          "see": [
            "git_strarray_dispose"
          ],
          "group": "deprecated"
        },
        "git_blame_init_options": {
          "kind": "function",
          "name": "git_blame_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 577,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_blame_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "comment": [
            "Deprecated Options Initialization Functions",
            "These functions are retained for backward compatibility.  The newer\n versions of these functions should be preferred in all new code.",
            "There is no plan to remove these backward compatibility functions at\n this time.",
            "@\n{"
          ],
          "group": "deprecated"
        },
        "git_checkout_init_options": {
          "kind": "function",
          "name": "git_checkout_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 578,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_checkout_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_cherrypick_init_options": {
          "kind": "function",
          "name": "git_cherrypick_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 579,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_cherrypick_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_clone_init_options": {
          "kind": "function",
          "name": "git_clone_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 580,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_clone_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_describe_init_options": {
          "kind": "function",
          "name": "git_describe_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 581,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_describe_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_describe_init_format_options": {
          "kind": "function",
          "name": "git_describe_init_format_options",
          "location": {
            "file": "deprecated.h",
            "line": 582,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_describe_format_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_diff_init_options": {
          "kind": "function",
          "name": "git_diff_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 583,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_diff_find_init_options": {
          "kind": "function",
          "name": "git_diff_find_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 584,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_find_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_diff_format_email_init_options": {
          "kind": "function",
          "name": "git_diff_format_email_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 585,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_format_email_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_diff_patchid_init_options": {
          "kind": "function",
          "name": "git_diff_patchid_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 586,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_patchid_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_fetch_init_options": {
          "kind": "function",
          "name": "git_fetch_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 587,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_fetch_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_indexer_init_options": {
          "kind": "function",
          "name": "git_indexer_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 588,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_indexer_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_merge_init_options": {
          "kind": "function",
          "name": "git_merge_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 589,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_merge_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_merge_file_init_input": {
          "kind": "function",
          "name": "git_merge_file_init_input",
          "location": {
            "file": "deprecated.h",
            "line": 590,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "input",
              "type": "git_merge_file_input *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_merge_file_init_options": {
          "kind": "function",
          "name": "git_merge_file_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 591,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_merge_file_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_proxy_init_options": {
          "kind": "function",
          "name": "git_proxy_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 592,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_proxy_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_push_init_options": {
          "kind": "function",
          "name": "git_push_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 593,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_push_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_rebase_init_options": {
          "kind": "function",
          "name": "git_rebase_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 594,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_rebase_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_remote_create_init_options": {
          "kind": "function",
          "name": "git_remote_create_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 595,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_remote_create_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_repository_init_init_options": {
          "kind": "function",
          "name": "git_repository_init_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 596,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_repository_init_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_revert_init_options": {
          "kind": "function",
          "name": "git_revert_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 597,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_revert_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_stash_apply_init_options": {
          "kind": "function",
          "name": "git_stash_apply_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 598,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_stash_apply_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_status_init_options": {
          "kind": "function",
          "name": "git_status_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 599,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_status_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_submodule_update_init_options": {
          "kind": "function",
          "name": "git_submodule_update_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 600,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_submodule_update_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_worktree_add_init_options": {
          "kind": "function",
          "name": "git_worktree_add_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 601,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_worktree_add_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        },
        "git_worktree_prune_init_options": {
          "kind": "function",
          "name": "git_worktree_prune_init_options",
          "location": {
            "file": "deprecated.h",
            "line": 602,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "opts",
              "type": "git_worktree_prune_options *"
            },
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "group": "deprecated"
        }
      },
      "info": {
        "summary": "libgit2 deprecated functions and values"
      }
    },
    "describe": {
      "apis": {
        "git_describe_strategy_t": {
          "kind": "enum",
          "name": "git_describe_strategy_t",
          "referenceName": "git_describe_strategy_t",
          "members": [
            {
              "name": "GIT_DESCRIBE_DEFAULT"
            },
            {
              "name": "GIT_DESCRIBE_TAGS"
            },
            {
              "name": "GIT_DESCRIBE_ALL"
            }
          ],
          "comment": [
            "Reference lookup strategy",
            "These behave like the --tags and --all options to git-describe,\n namely they say to look for any reference in either refs/tags/ or\n refs/ respectively."
          ],
          "location": {
            "file": "describe.h",
            "line": 30,
            "column": 9
          },
          "group": "describe"
        },
        "git_describe_options": {
          "kind": "struct",
          "name": "git_describe_options",
          "referenceName": "git_describe_options",
          "comment": [
            "Describe options structure",
            "Initialize with `GIT_DESCRIBE_OPTIONS_INIT`. Alternatively, you can\n use `git_describe_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "max_candidates_tags",
              "type": "unsigned int",
              "comment": [
                "default: 10"
              ]
            },
            {
              "name": "describe_strategy",
              "type": "unsigned int",
              "comment": [
                "default: GIT_DESCRIBE_DEFAULT"
              ]
            },
            {
              "name": "pattern",
              "type": "const char *"
            },
            {
              "name": "only_follow_first_parent",
              "type": "int",
              "comment": [
                "When calculating the distance from the matching tag or\n reference, only walk down the first-parent ancestry."
              ]
            },
            {
              "name": "show_commit_oid_as_fallback",
              "type": "int",
              "comment": [
                "If no matching tag or reference is found, the describe\n operation would normally fail. If this option is set, it\n will instead fall back to showing the full id of the\n commit."
              ]
            }
          ],
          "location": {
            "file": "describe.h",
            "line": 43,
            "column": 16
          },
          "group": "describe",
          "parameterTo": [
            "git_describe_init_options",
            "git_describe_options_init",
            "git_describe_commit",
            "git_describe_workdir"
          ]
        },
        "GIT_DESCRIBE_DEFAULT_MAX_CANDIDATES_TAGS": {
          "kind": "macro",
          "name": "GIT_DESCRIBE_DEFAULT_MAX_CANDIDATES_TAGS",
          "location": {
            "file": "describe.h",
            "line": 63,
            "column": 9
          },
          "value": "10",
          "comment": "",
          "group": "describe"
        },
        "GIT_DESCRIBE_DEFAULT_ABBREVIATED_SIZE": {
          "kind": "macro",
          "name": "GIT_DESCRIBE_DEFAULT_ABBREVIATED_SIZE",
          "location": {
            "file": "describe.h",
            "line": 64,
            "column": 9
          },
          "value": "7",
          "comment": "",
          "group": "describe"
        },
        "GIT_DESCRIBE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_DESCRIBE_OPTIONS_VERSION",
          "location": {
            "file": "describe.h",
            "line": 66,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "describe"
        },
        "GIT_DESCRIBE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_DESCRIBE_OPTIONS_INIT",
          "location": {
            "file": "describe.h",
            "line": 70,
            "column": 9
          },
          "value": "{ GIT_DESCRIBE_OPTIONS_VERSION, GIT_DESCRIBE_DEFAULT_MAX_CANDIDATES_TAGS, }",
          "comment": "",
          "group": "describe"
        },
        "git_describe_options_init": {
          "kind": "function",
          "name": "git_describe_options_init",
          "location": {
            "file": "describe.h",
            "line": 82,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_describe_options *",
              "direction": "in",
              "comment": "The `git_describe_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_DESCRIBE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_describe_options structure",
            "Initializes a `git_describe_options` with default values. Equivalent to creating\n an instance with GIT_DESCRIBE_OPTIONS_INIT."
          ],
          "group": "describe"
        },
        "git_describe_format_options": {
          "kind": "struct",
          "name": "git_describe_format_options",
          "referenceName": "git_describe_format_options",
          "comment": [
            "Describe format options structure",
            "Initialize with `GIT_DESCRIBE_FORMAT_OPTIONS_INIT`. Alternatively, you can\n use `git_describe_format_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "abbreviated_size",
              "type": "unsigned int",
              "comment": [
                "Size of the abbreviated commit id to use. This value is the\n lower bound for the length of the abbreviated string. The\n default is 7."
              ]
            },
            {
              "name": "always_use_long_format",
              "type": "int",
              "comment": [
                "Set to use the long format even when a shorter name could be used."
              ]
            },
            {
              "name": "dirty_suffix",
              "type": "const char *",
              "comment": [
                "If the workdir is dirty and this is set, this string will\n be appended to the description string."
              ]
            }
          ],
          "location": {
            "file": "describe.h",
            "line": 91,
            "column": 9
          },
          "group": "describe",
          "parameterTo": [
            "git_describe_init_format_options",
            "git_describe_format_options_init",
            "git_describe_format"
          ]
        },
        "GIT_DESCRIBE_FORMAT_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_DESCRIBE_FORMAT_OPTIONS_VERSION",
          "location": {
            "file": "describe.h",
            "line": 113,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "describe"
        },
        "GIT_DESCRIBE_FORMAT_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_DESCRIBE_FORMAT_OPTIONS_INIT",
          "location": {
            "file": "describe.h",
            "line": 117,
            "column": 9
          },
          "value": "{ GIT_DESCRIBE_FORMAT_OPTIONS_VERSION, GIT_DESCRIBE_DEFAULT_ABBREVIATED_SIZE, }",
          "comment": "",
          "group": "describe"
        },
        "git_describe_format_options_init": {
          "kind": "function",
          "name": "git_describe_format_options_init",
          "location": {
            "file": "describe.h",
            "line": 129,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_describe_format_options *",
              "direction": "in",
              "comment": "The `git_describe_format_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_DESCRIBE_FORMAT_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_describe_format_options structure",
            "Initializes a `git_describe_format_options` with default values. Equivalent to creating\n an instance with GIT_DESCRIBE_FORMAT_OPTIONS_INIT."
          ],
          "group": "describe"
        },
        "git_describe_result": {
          "kind": "struct",
          "name": "git_describe_result",
          "referenceName": "struct git_describe_result",
          "opaque": true,
          "comment": [
            "A struct that stores the result of a describe operation."
          ],
          "location": {
            "file": "describe.h",
            "line": 134,
            "column": 36
          },
          "group": "describe",
          "parameterTo": [
            "git_describe_commit",
            "git_describe_workdir",
            "git_describe_format",
            "git_describe_result_free"
          ]
        },
        "git_describe_commit": {
          "kind": "function",
          "name": "git_describe_commit",
          "location": {
            "file": "describe.h",
            "line": 146,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "result",
              "type": "git_describe_result **",
              "direction": "in",
              "comment": "pointer to store the result. You must free this once\n you're done with it."
            },
            {
              "name": "committish",
              "type": "git_object *",
              "direction": "in",
              "comment": "a committish to describe"
            },
            {
              "name": "opts",
              "type": "git_describe_options *",
              "direction": "in",
              "comment": "the lookup options (or NULL for defaults)"
            }
          ],
          "comment": [
            "Describe a commit",
            "Perform the describe operation on the given committish object."
          ],
          "group": "describe"
        },
        "git_describe_workdir": {
          "kind": "function",
          "name": "git_describe_workdir",
          "location": {
            "file": "describe.h",
            "line": 163,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_describe_result **",
              "direction": "in",
              "comment": "pointer to store the result. You must free this once\n you're done with it."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to perform the describe"
            },
            {
              "name": "opts",
              "type": "git_describe_options *",
              "direction": "in",
              "comment": "the lookup options (or NULL for defaults)"
            }
          ],
          "comment": [
            "Describe a commit",
            "Perform the describe operation on the current commit and the\n worktree. After peforming describe on HEAD, a status is run and the\n description is considered to be dirty if there are."
          ],
          "group": "describe"
        },
        "git_describe_format": {
          "kind": "function",
          "name": "git_describe_format",
          "location": {
            "file": "describe.h",
            "line": 176,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The buffer to store the result"
            },
            {
              "name": "result",
              "type": "const git_describe_result *",
              "direction": "in",
              "comment": "the result from `git_describe_commit()` or\n `git_describe_workdir()`."
            },
            {
              "name": "opts",
              "type": "const git_describe_format_options *",
              "direction": "in",
              "comment": "the formatting options (or NULL for defaults)"
            }
          ],
          "comment": [
            "Print the describe result to a buffer"
          ],
          "group": "describe"
        },
        "git_describe_result_free": {
          "kind": "function",
          "name": "git_describe_result_free",
          "location": {
            "file": "describe.h",
            "line": 184,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "result",
              "type": "git_describe_result *"
            }
          ],
          "comment": [
            "Free the describe result."
          ],
          "group": "describe"
        }
      },
      "info": {
        "summary": "Git describing routines"
      }
    },
    "diff": {
      "apis": {
        "git_diff_option_t": {
          "kind": "enum",
          "name": "git_diff_option_t",
          "referenceName": "git_diff_option_t",
          "members": [
            {
              "name": "GIT_DIFF_NORMAL",
              "value": "0",
              "comment": [
                "Normal diff, the default"
              ]
            },
            {
              "name": "GIT_DIFF_REVERSE",
              "comment": [
                "Reverse the sides of the diff"
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_IGNORED",
              "comment": [
                "Include ignored files in the diff"
              ]
            },
            {
              "name": "GIT_DIFF_RECURSE_IGNORED_DIRS",
              "comment": [
                "Even with GIT_DIFF_INCLUDE_IGNORED, an entire ignored directory\n  will be marked with only a single entry in the diff; this flag\n  adds all files under the directory as IGNORED entries, too."
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_UNTRACKED",
              "comment": [
                "Include untracked files in the diff"
              ]
            },
            {
              "name": "GIT_DIFF_RECURSE_UNTRACKED_DIRS",
              "comment": [
                "Even with GIT_DIFF_INCLUDE_UNTRACKED, an entire untracked\n  directory will be marked with only a single entry in the diff\n  (a la what core Git does in `git status`); this flag adds *all*\n  files under untracked directories as UNTRACKED entries, too."
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_UNMODIFIED",
              "comment": [
                "Include unmodified files in the diff"
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_TYPECHANGE",
              "comment": [
                "Normally, a type change between files will be converted into a\n  DELETED record for the old and an ADDED record for the new; this\n  options enabled the generation of TYPECHANGE delta records."
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_TYPECHANGE_TREES",
              "comment": [
                "Even with GIT_DIFF_INCLUDE_TYPECHANGE, blob->tree changes still\n  generally show as a DELETED blob.  This flag tries to correctly\n  label blob->tree transitions as TYPECHANGE records with new_file's\n  mode set to tree.  Note: the tree SHA will not be available."
              ]
            },
            {
              "name": "GIT_DIFF_IGNORE_FILEMODE",
              "comment": [
                "Ignore file mode changes"
              ]
            },
            {
              "name": "GIT_DIFF_IGNORE_SUBMODULES",
              "comment": [
                "Treat all submodules as unmodified"
              ]
            },
            {
              "name": "GIT_DIFF_IGNORE_CASE",
              "comment": [
                "Use case insensitive filename comparisons"
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_CASECHANGE",
              "comment": [
                "May be combined with `GIT_DIFF_IGNORE_CASE` to specify that a file\n  that has changed case will be returned as an add/delete pair."
              ]
            },
            {
              "name": "GIT_DIFF_DISABLE_PATHSPEC_MATCH",
              "comment": [
                "If the pathspec is set in the diff options, this flags indicates\n  that the paths will be treated as literal paths instead of\n  fnmatch patterns.  Each path in the list must either be a full\n  path to a file or a directory.  (A trailing slash indicates that\n  the path will _only_ match a directory).  If a directory is\n  specified, all children will be included."
              ]
            },
            {
              "name": "GIT_DIFF_SKIP_BINARY_CHECK",
              "comment": [
                "Disable updating of the `binary` flag in delta records.  This is\n  useful when iterating over a diff if you don't need hunk and data\n  callbacks and want to avoid having to load file completely."
              ]
            },
            {
              "name": "GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS",
              "comment": [
                "When diff finds an untracked directory, to match the behavior of\n  core Git, it scans the contents for IGNORED and UNTRACKED files.\n  If *all* contents are IGNORED, then the directory is IGNORED; if\n  any contents are not IGNORED, then the directory is UNTRACKED.\n  This is extra work that may not matter in many cases.  This flag\n  turns off that scan and immediately labels an untracked directory\n  as UNTRACKED (changing the behavior to not match core Git)."
              ]
            },
            {
              "name": "GIT_DIFF_UPDATE_INDEX",
              "comment": [
                "When diff finds a file in the working directory with stat\n information different from the index, but the OID ends up being the\n same, write the correct stat information into the index.  Note:\n without this flag, diff will always leave the index untouched."
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_UNREADABLE",
              "comment": [
                "Include unreadable files in the diff"
              ]
            },
            {
              "name": "GIT_DIFF_INCLUDE_UNREADABLE_AS_UNTRACKED",
              "comment": [
                "Include unreadable files in the diff"
              ]
            },
            {
              "name": "GIT_DIFF_INDENT_HEURISTIC",
              "comment": [
                "Use a heuristic that takes indentation and whitespace into account\n which generally can produce better diffs when dealing with ambiguous\n diff hunks."
              ]
            },
            {
              "name": "GIT_DIFF_FORCE_TEXT",
              "comment": [
                "Treat all files as text, disabling binary attributes \n&\n detection"
              ]
            },
            {
              "name": "GIT_DIFF_FORCE_BINARY",
              "comment": [
                "Treat all files as binary, disabling text diffs"
              ]
            },
            {
              "name": "GIT_DIFF_IGNORE_WHITESPACE",
              "comment": [
                "Ignore all whitespace"
              ]
            },
            {
              "name": "GIT_DIFF_IGNORE_WHITESPACE_CHANGE",
              "comment": [
                "Ignore changes in amount of whitespace"
              ]
            },
            {
              "name": "GIT_DIFF_IGNORE_WHITESPACE_EOL",
              "comment": [
                "Ignore whitespace at end of line"
              ]
            },
            {
              "name": "GIT_DIFF_SHOW_UNTRACKED_CONTENT",
              "comment": [
                "When generating patch text, include the content of untracked\n  files.  This automatically turns on GIT_DIFF_INCLUDE_UNTRACKED but\n  it does not turn on GIT_DIFF_RECURSE_UNTRACKED_DIRS.  Add that\n  flag if you want the content of every single UNTRACKED file."
              ]
            },
            {
              "name": "GIT_DIFF_SHOW_UNMODIFIED",
              "comment": [
                "When generating output, include the names of unmodified files if\n  they are included in the git_diff.  Normally these are skipped in\n  the formats that list files (e.g. name-only, name-status, raw).\n  Even with this, these will not be included in patch format."
              ]
            },
            {
              "name": "GIT_DIFF_PATIENCE",
              "comment": [
                "Use the \"patience diff\" algorithm"
              ]
            },
            {
              "name": "GIT_DIFF_MINIMAL",
              "comment": [
                "Take extra time to find minimal diff"
              ]
            },
            {
              "name": "GIT_DIFF_SHOW_BINARY",
              "comment": [
                "Include the necessary deflate / delta information so that `git-apply`\n  can apply given diff information to binary files."
              ]
            }
          ],
          "comment": [
            "Flags for diff options.  A combination of these flags can be passed\n in via the `flags` value in the `git_diff_options`."
          ],
          "location": {
            "file": "diff.h",
            "line": 28,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff": {
          "kind": "struct",
          "name": "git_diff",
          "referenceName": "struct git_diff",
          "opaque": true,
          "comment": [
            "The diff object that contains all individual file deltas.",
            "A `diff` represents the cumulative list of differences between two\n snapshots of a repository (possibly filtered by a set of file name\n patterns).",
            "Calculating diffs is generally done in two phases: building a list of\n diffs then traversing it. This makes is easier to share logic across\n the various types of diffs (tree vs tree, workdir vs index, etc.), and\n also allows you to insert optional diff post-processing phases,\n such as rename detection, in between the steps. When you are done with\n a diff object, it must be freed.",
            "This is an opaque structure which will be allocated by one of the diff\n generator functions below (such as `git_diff_tree_to_tree`). You are\n responsible for releasing the object memory when done, using the\n `git_diff_free()` function."
          ],
          "location": {
            "file": "diff.h",
            "line": 193,
            "column": 25
          },
          "group": "diff",
          "parameterTo": [
            "git_apply_to_tree",
            "git_apply",
            "git_diff_notify_cb",
            "git_diff_progress_cb",
            "git_diff_free",
            "git_diff_tree_to_tree",
            "git_diff_tree_to_index",
            "git_diff_index_to_workdir",
            "git_diff_tree_to_workdir",
            "git_diff_tree_to_workdir_with_index",
            "git_diff_index_to_index",
            "git_diff_merge",
            "git_diff_find_similar",
            "git_diff_num_deltas",
            "git_diff_num_deltas_of_type",
            "git_diff_get_delta",
            "git_diff_is_sorted_icase",
            "git_diff_foreach",
            "git_diff_print",
            "git_diff_to_buf",
            "git_diff_from_buffer",
            "git_diff_get_stats",
            "git_diff_format_email",
            "git_diff_patchid",
            "git_patch_from_diff",
            "git_pathspec_match_diff",
            "git_diff_get_perfdata"
          ]
        },
        "git_diff_flag_t": {
          "kind": "enum",
          "name": "git_diff_flag_t",
          "referenceName": "git_diff_flag_t",
          "members": [
            {
              "name": "GIT_DIFF_FLAG_BINARY",
              "comment": [
                "file(s) treated as binary data"
              ]
            },
            {
              "name": "GIT_DIFF_FLAG_NOT_BINARY",
              "comment": [
                "file(s) treated as text data"
              ]
            },
            {
              "name": "GIT_DIFF_FLAG_VALID_ID",
              "comment": [
                "`id` value is known correct"
              ]
            },
            {
              "name": "GIT_DIFF_FLAG_EXISTS",
              "comment": [
                "file exists at this side of the delta"
              ]
            }
          ],
          "comment": [
            "Flags for the delta object and the file objects on each side.",
            "These flags are used for both the `flags` value of the `git_diff_delta`\n and the flags for the `git_diff_file` objects representing the old and\n new sides of the delta.  Values outside of this public range should be\n considered reserved for internal or future use."
          ],
          "location": {
            "file": "diff.h",
            "line": 203,
            "column": 9
          },
          "group": "diff"
        },
        "git_delta_t": {
          "kind": "enum",
          "name": "git_delta_t",
          "referenceName": "git_delta_t",
          "members": [
            {
              "name": "GIT_DELTA_UNMODIFIED",
              "value": "0",
              "comment": [
                "no changes"
              ]
            },
            {
              "name": "GIT_DELTA_ADDED",
              "value": "1",
              "comment": [
                "entry does not exist in old version"
              ]
            },
            {
              "name": "GIT_DELTA_DELETED",
              "value": "2",
              "comment": [
                "entry does not exist in new version"
              ]
            },
            {
              "name": "GIT_DELTA_MODIFIED",
              "value": "3",
              "comment": [
                "entry content changed between old and new"
              ]
            },
            {
              "name": "GIT_DELTA_RENAMED",
              "value": "4",
              "comment": [
                "entry was renamed between old and new"
              ]
            },
            {
              "name": "GIT_DELTA_COPIED",
              "value": "5",
              "comment": [
                "entry was copied from another old entry"
              ]
            },
            {
              "name": "GIT_DELTA_IGNORED",
              "value": "6",
              "comment": [
                "entry is ignored item in workdir"
              ]
            },
            {
              "name": "GIT_DELTA_UNTRACKED",
              "value": "7",
              "comment": [
                "entry is untracked item in workdir"
              ]
            },
            {
              "name": "GIT_DELTA_TYPECHANGE",
              "value": "8",
              "comment": [
                "type of entry changed between old and new"
              ]
            },
            {
              "name": "GIT_DELTA_UNREADABLE",
              "value": "9",
              "comment": [
                "entry is unreadable"
              ]
            },
            {
              "name": "GIT_DELTA_CONFLICTED",
              "value": "10",
              "comment": [
                "entry in the index is conflicted"
              ]
            }
          ],
          "comment": [
            "What type of change is described by a git_diff_delta?",
            "`GIT_DELTA_RENAMED` and `GIT_DELTA_COPIED` will only show up if you run\n `git_diff_find_similar()` on the diff object.",
            "`GIT_DELTA_TYPECHANGE` only shows up given `GIT_DIFF_INCLUDE_TYPECHANGE`\n in the option flags (otherwise type changes will be split into ADDED /\n DELETED pairs)."
          ],
          "location": {
            "file": "diff.h",
            "line": 220,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_num_deltas_of_type",
            "git_diff_status_char"
          ]
        },
        "git_diff_file": {
          "kind": "struct",
          "name": "git_diff_file",
          "referenceName": "git_diff_file",
          "comment": [
            "Description of one side of a delta.",
            "Although this is called a \"file\", it could represent a file, a symbolic\n link, a submodule commit id, or even a tree (although that only if you\n are tracking type changes or ignored/untracked directories).",
            "The `id` is the `git_oid` of the item.  If the entry represents an\n absent side of a diff (e.g. the `old_file` of a `GIT_DELTA_ADDED` delta),\n then the oid will be zeroes.",
            "`path` is the NUL-terminated path to the entry relative to the working\n directory of the repository.",
            "`size` is the size of the entry in bytes.",
            "`flags` is a combination of the `git_diff_flag_t` types",
            "`mode` is, roughly, the stat() `st_mode` value for the item.  This will\n be restricted to one of the `git_filemode_t` values.",
            "The `id_abbrev` represents the known length of the `id` field, when\n converted to a hex string.  It is generally `GIT_OID_HEXSZ`, unless this\n delta was created from reading a patch file, in which case it may be\n abbreviated to something reasonable, like 7 characters."
          ],
          "members": [
            {
              "name": "id",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "path",
              "type": "const char *"
            },
            {
              "name": "size",
              "type": "git_object_size_t",
              "referenceType": "uint64_t"
            },
            {
              "name": "flags",
              "type": "uint32_t"
            },
            {
              "name": "mode",
              "type": "uint16_t"
            },
            {
              "name": "id_abbrev",
              "type": "uint16_t"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 260,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_checkout_notify_cb"
          ]
        },
        "git_diff_delta": {
          "kind": "struct",
          "name": "git_diff_delta",
          "referenceName": "git_diff_delta",
          "comment": [
            "Description of changes to one entry.",
            "A `delta` is a file pair with an old and new revision.  The old version\n may be absent if the file was just created and the new version may be\n absent if the file was deleted.  A diff is mostly just a list of deltas.",
            "When iterating over a diff, this will be passed to most callbacks and\n you can use the contents to understand exactly what has changed.",
            "The `old_file` represents the \"from\" side of the diff and the `new_file`\n represents to \"to\" side of the diff.  What those means depend on the\n function that was used to generate the diff and will be documented below.\n You can also use the `GIT_DIFF_REVERSE` flag to flip it around.",
            "Although the two sides of the delta are named \"old_file\" and \"new_file\",\n they actually may correspond to entries that represent a file, a symbolic\n link, a submodule commit id, or even a tree (if you are tracking type\n changes or ignored/untracked directories).",
            "Under some circumstances, in the name of efficiency, not all fields will\n be filled in, but we generally try to fill in as much as possible.  One\n example is that the \"flags\" field may not have either the `BINARY` or the\n `NOT_BINARY` flag set to avoid examining file contents if you do not pass\n in hunk and/or line callbacks to the diff foreach iteration function.  It\n will just use the git attributes for those files.",
            "The similarity score is zero unless you call `git_diff_find_similar()`\n which does a similarity analysis of files in the diff.  Use that\n function to do rename and copy detection, and to split heavily modified\n files in add/delete pairs.  After that call, deltas with a status of\n GIT_DELTA_RENAMED or GIT_DELTA_COPIED will have a similarity score\n between 0 and 100 indicating how similar the old and new sides are.",
            "If you ask `git_diff_find_similar` to find heavily modified files to\n break, but to not *actually* break the records, then GIT_DELTA_MODIFIED\n records may have a non-zero similarity score if the self-similarity is\n below the split threshold.  To display this value like core Git, invert\n the score (a la `printf(\"M%03d\", 100 - delta->similarity)`)."
          ],
          "members": [
            {
              "name": "status",
              "type": "git_delta_t",
              "referenceType": "enum git_delta_t"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "git_diff_flag_t values"
              ]
            },
            {
              "name": "similarity",
              "type": "uint16_t",
              "comment": [
                "for RENAMED and COPIED, value 0-100"
              ]
            },
            {
              "name": "nfiles",
              "type": "uint16_t",
              "comment": [
                "number of files in this delta"
              ]
            },
            {
              "name": "old_file",
              "type": "git_diff_file",
              "referenceType": "struct git_diff_file"
            },
            {
              "name": "new_file",
              "type": "git_diff_file",
              "referenceType": "struct git_diff_file"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 309,
            "column": 9
          },
          "group": "diff",
          "returnedBy": [
            "git_diff_get_delta",
            "git_patch_get_delta",
            "git_pathspec_match_list_diff_entry"
          ],
          "parameterTo": [
            "git_apply_delta_cb",
            "git_diff_notify_cb",
            "git_diff_file_cb",
            "git_diff_binary_cb",
            "git_diff_hunk_cb",
            "git_diff_line_cb",
            "git_diff_print_callback__to_buf",
            "git_diff_print_callback__to_file_handle"
          ]
        },
        "git_diff_notify_cb": {
          "kind": "callback",
          "name": "git_diff_notify_cb",
          "type": "int (*)(const git_diff *, const git_diff_delta *, const char *, void *)",
          "comment": [
            "Diff notification callback function.",
            "The callback will be called for each file, just before the `git_diff_delta`\n gets inserted into the diff.",
            "When the callback:\n - returns \n<\n 0, the diff process will be aborted.\n - returns > 0, the delta will not be inserted into the diff, but the\n\t\tdiff process continues.\n - returns 0, the delta is inserted into the diff, and the diff process\n\t\tcontinues."
          ],
          "location": {
            "file": "diff.h",
            "line": 331,
            "column": 26
          },
          "params": [
            {
              "type": "const git_diff *"
            },
            {
              "type": "const git_diff_delta *"
            },
            {
              "type": "const char *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "diff",
          "typedef": true
        },
        "git_diff_progress_cb": {
          "kind": "callback",
          "name": "git_diff_progress_cb",
          "type": "int (*)(const git_diff *, const char *, const char *, void *)",
          "comment": [
            "Diff progress callback.",
            "Called before each file comparison."
          ],
          "location": {
            "file": "diff.h",
            "line": 347,
            "column": 26
          },
          "params": [
            {
              "name": "diff_so_far",
              "direction": "in",
              "comment": "The diff being generated.",
              "type": "const git_diff *"
            },
            {
              "name": "old_path",
              "direction": "in",
              "comment": "The path to the old file or NULL.",
              "type": "const char *"
            },
            {
              "name": "new_path",
              "direction": "in",
              "comment": "The path to the new file or NULL.",
              "type": "const char *"
            },
            {
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "Non-zero to abort the diff.",
            "type": "int"
          },
          "group": "diff",
          "typedef": true
        },
        "git_diff_options": {
          "kind": "struct",
          "name": "git_diff_options",
          "referenceName": "git_diff_options",
          "comment": [
            "Structure describing options about how the diff should be executed.",
            "Setting all values of the structure to zero will yield the default\n values.  Similarly, passing NULL for the options structure will\n give the defaults.  The default values are marked below."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "version for the struct"
              ]
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "A combination of `git_diff_option_t` values above.\n Defaults to GIT_DIFF_NORMAL"
              ]
            },
            {
              "name": "ignore_submodules",
              "type": "git_submodule_ignore_t",
              "comment": [
                "Overrides the submodule ignore setting for all submodules in the diff."
              ],
              "referenceType": "enum git_submodule_ignore_t"
            },
            {
              "name": "pathspec",
              "type": "git_strarray",
              "comment": [
                "An array of paths / fnmatch patterns to constrain diff.\n All paths are included by default."
              ],
              "referenceType": "struct git_strarray"
            },
            {
              "name": "notify_cb",
              "type": "git_diff_notify_cb",
              "comment": [
                "An optional callback function, notifying the consumer of changes to\n the diff as new deltas are added."
              ],
              "referenceType": "int (*)(const git_diff *, const git_diff_delta *, const char *, void *)"
            },
            {
              "name": "progress_cb",
              "type": "git_diff_progress_cb",
              "comment": [
                "An optional callback function, notifying the consumer of which files\n are being examined as the diff is generated."
              ],
              "referenceType": "int (*)(const git_diff *, const char *, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "The payload to pass to the callback functions."
              ]
            },
            {
              "name": "context_lines",
              "type": "uint32_t",
              "comment": [
                "The number of unchanged lines that define the boundary of a hunk\n (and to display before and after). Defaults to 3."
              ]
            },
            {
              "name": "interhunk_lines",
              "type": "uint32_t",
              "comment": [
                "The maximum number of unchanged lines between hunk boundaries before\n the hunks will be merged into one. Defaults to 0."
              ]
            },
            {
              "name": "id_abbrev",
              "type": "uint16_t",
              "comment": [
                "The abbreviation length to use when formatting object ids.\n Defaults to the value of 'core.abbrev' from the config, or 7 if unset."
              ]
            },
            {
              "name": "max_size",
              "type": "git_off_t",
              "comment": [
                "A size (in bytes) above which a blob will be marked as binary\n automatically; pass a negative value to disable.\n Defaults to 512MB."
              ],
              "referenceType": "int64_t"
            },
            {
              "name": "old_prefix",
              "type": "const char *",
              "comment": [
                "The virtual \"directory\" prefix for old file names in hunk headers.\n Default is \"a\"."
              ]
            },
            {
              "name": "new_prefix",
              "type": "const char *",
              "comment": [
                "The virtual \"directory\" prefix for new file names in hunk headers.\n Defaults to \"b\"."
              ]
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 361,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_init_options",
            "git_diff_options_init",
            "git_diff_tree_to_tree",
            "git_diff_tree_to_index",
            "git_diff_index_to_workdir",
            "git_diff_tree_to_workdir",
            "git_diff_tree_to_workdir_with_index",
            "git_diff_index_to_index",
            "git_diff_blobs",
            "git_diff_blob_to_buffer",
            "git_diff_buffers",
            "git_diff_commit_as_email",
            "git_patch_from_blobs",
            "git_patch_from_blob_and_buffer",
            "git_patch_from_buffers"
          ]
        },
        "GIT_DIFF_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_DIFF_OPTIONS_VERSION",
          "location": {
            "file": "diff.h",
            "line": 436,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "diff"
        },
        "GIT_DIFF_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_DIFF_OPTIONS_INIT",
          "location": {
            "file": "diff.h",
            "line": 442,
            "column": 9
          },
          "value": " {GIT_DIFF_OPTIONS_VERSION, 0, GIT_SUBMODULE_IGNORE_UNSPECIFIED, {NULL,0}, NULL, NULL, NULL, 3}",
          "comment": "",
          "group": "diff"
        },
        "git_diff_options_init": {
          "kind": "function",
          "name": "git_diff_options_init",
          "location": {
            "file": "diff.h",
            "line": 454,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_options *",
              "direction": "in",
              "comment": "The `git_diff_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_DIFF_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_diff_options structure",
            "Initializes a `git_diff_options` with default values. Equivalent to creating\n an instance with GIT_DIFF_OPTIONS_INIT."
          ],
          "group": "diff"
        },
        "git_diff_file_cb": {
          "kind": "callback",
          "name": "git_diff_file_cb",
          "type": "int (*)(const git_diff_delta *, float, void *)",
          "comment": [
            "When iterating over a diff, callback that will be made per file."
          ],
          "location": {
            "file": "diff.h",
            "line": 465,
            "column": 26
          },
          "params": [
            {
              "name": "delta",
              "direction": "in",
              "comment": "A pointer to the delta data for the file",
              "type": "const git_diff_delta *"
            },
            {
              "name": "progress",
              "direction": "in",
              "comment": "Goes from 0 to 1 over the diff",
              "type": "float"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "User-specified pointer from foreach function",
              "type": "void *"
            }
          ],
          "group": "diff",
          "parameterTo": [
            "git_diff_foreach",
            "git_diff_blobs",
            "git_diff_blob_to_buffer",
            "git_diff_buffers"
          ],
          "typedef": true
        },
        "GIT_DIFF_HUNK_HEADER_SIZE": {
          "kind": "macro",
          "name": "GIT_DIFF_HUNK_HEADER_SIZE",
          "location": {
            "file": "diff.h",
            "line": 470,
            "column": 9
          },
          "value": "128",
          "comment": "",
          "group": "diff"
        },
        "git_diff_binary_t": {
          "kind": "enum",
          "name": "git_diff_binary_t",
          "referenceName": "git_diff_binary_t",
          "members": [
            {
              "name": "GIT_DIFF_BINARY_NONE",
              "comment": [
                "There is no binary delta."
              ]
            },
            {
              "name": "GIT_DIFF_BINARY_LITERAL",
              "comment": [
                "The binary data is the literal contents of the file."
              ]
            },
            {
              "name": "GIT_DIFF_BINARY_DELTA",
              "comment": [
                "The binary data is the delta from one side to the other."
              ]
            }
          ],
          "comment": [
            "When producing a binary diff, the binary data returned will be\n either the deflated full (\"literal\") contents of the file, or\n the deflated binary delta between the two sides (whichever is\n smaller)."
          ],
          "location": {
            "file": "diff.h",
            "line": 478,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_binary_file": {
          "kind": "struct",
          "name": "git_diff_binary_file",
          "referenceName": "git_diff_binary_file",
          "comment": [
            "The contents of one of the files in a binary diff."
          ],
          "members": [
            {
              "name": "type",
              "type": "git_diff_binary_t",
              "comment": [
                "The type of binary data for this file."
              ],
              "referenceType": "enum git_diff_binary_t"
            },
            {
              "name": "data",
              "type": "const char *",
              "comment": [
                "The binary data, deflated."
              ]
            },
            {
              "name": "datalen",
              "type": "size_t",
              "comment": [
                "The length of the binary data."
              ]
            },
            {
              "name": "inflatedlen",
              "type": "size_t",
              "comment": [
                "The length of the binary data after inflation."
              ]
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 490,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_binary": {
          "kind": "struct",
          "name": "git_diff_binary",
          "referenceName": "git_diff_binary",
          "comment": [
            "Structure describing the binary contents of a diff.",
            "A `binary` file / delta is a file (or pair) for which no text diffs\n should be generated. A diff can contain delta entries that are\n binary, but no diff content will be output for those files. There is\n a base heuristic for binary detection and you can further tune the\n behavior with git attributes or diff flags and option settings."
          ],
          "members": [
            {
              "name": "contains_data",
              "type": "unsigned int",
              "comment": [
                "Whether there is data in this binary structure or not.",
                "If this is `1`, then this was produced and included binary content.\n If this is `0` then this was generated knowing only that a binary\n file changed but without providing the data, probably from a patch\n that said `Binary files a/file.txt and b/file.txt differ`."
              ]
            },
            {
              "name": "old_file",
              "type": "git_diff_binary_file",
              "comment": [
                "The contents of the old file."
              ],
              "referenceType": "struct git_diff_binary_file"
            },
            {
              "name": "new_file",
              "type": "git_diff_binary_file",
              "comment": [
                "The contents of the new file."
              ],
              "referenceType": "struct git_diff_binary_file"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 513,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_binary_cb"
          ]
        },
        "git_diff_binary_cb": {
          "kind": "callback",
          "name": "git_diff_binary_cb",
          "type": "int (*)(const git_diff_delta *, const git_diff_binary *, void *)",
          "comment": [
            "When iterating over a diff, callback that will be made for\n binary content within the diff."
          ],
          "location": {
            "file": "diff.h",
            "line": 531,
            "column": 26
          },
          "params": [
            {
              "type": "const git_diff_delta *"
            },
            {
              "type": "const git_diff_binary *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "diff",
          "parameterTo": [
            "git_diff_foreach",
            "git_diff_blobs",
            "git_diff_blob_to_buffer",
            "git_diff_buffers"
          ],
          "typedef": true
        },
        "git_diff_hunk": {
          "kind": "struct",
          "name": "git_diff_hunk",
          "referenceName": "git_diff_hunk",
          "comment": [
            "Structure describing a hunk of a diff.",
            "A `hunk` is a span of modified lines in a delta along with some stable\n surrounding context. You can configure the amount of context and other\n properties of how hunks are generated. Each hunk also comes with a\n header that described where it starts and ends in both the old and new\n versions in the delta."
          ],
          "members": [
            {
              "name": "old_start",
              "type": "int",
              "comment": [
                "Starting line number in old_file"
              ]
            },
            {
              "name": "old_lines",
              "type": "int",
              "comment": [
                "Number of lines in old_file"
              ]
            },
            {
              "name": "new_start",
              "type": "int",
              "comment": [
                "Starting line number in new_file"
              ]
            },
            {
              "name": "new_lines",
              "type": "int",
              "comment": [
                "Number of lines in new_file"
              ]
            },
            {
              "name": "header_len",
              "type": "size_t",
              "comment": [
                "Number of bytes in header text"
              ]
            },
            {
              "name": "header",
              "type": "char[128]",
              "comment": [
                "Header text, NUL-byte terminated"
              ]
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 545,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_apply_hunk_cb",
            "git_diff_hunk_cb",
            "git_diff_line_cb",
            "git_patch_get_hunk",
            "git_diff_print_callback__to_buf",
            "git_diff_print_callback__to_file_handle"
          ]
        },
        "git_diff_hunk_cb": {
          "kind": "callback",
          "name": "git_diff_hunk_cb",
          "type": "int (*)(const git_diff_delta *, const git_diff_hunk *, void *)",
          "comment": [
            "When iterating over a diff, callback that will be made per hunk."
          ],
          "location": {
            "file": "diff.h",
            "line": 557,
            "column": 26
          },
          "params": [
            {
              "type": "const git_diff_delta *"
            },
            {
              "type": "const git_diff_hunk *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "diff",
          "parameterTo": [
            "git_diff_foreach",
            "git_diff_blobs",
            "git_diff_blob_to_buffer",
            "git_diff_buffers"
          ],
          "typedef": true
        },
        "git_diff_line_t": {
          "kind": "enum",
          "name": "git_diff_line_t",
          "referenceName": "git_diff_line_t",
          "members": [
            {
              "name": "GIT_DIFF_LINE_CONTEXT",
              "value": "32"
            },
            {
              "name": "GIT_DIFF_LINE_ADDITION",
              "value": "43"
            },
            {
              "name": "GIT_DIFF_LINE_DELETION",
              "value": "45"
            },
            {
              "name": "GIT_DIFF_LINE_CONTEXT_EOFNL",
              "value": "61",
              "comment": [
                "Both files have no LF at end"
              ]
            },
            {
              "name": "GIT_DIFF_LINE_ADD_EOFNL",
              "value": "62",
              "comment": [
                "Old has no LF at end, new does"
              ]
            },
            {
              "name": "GIT_DIFF_LINE_DEL_EOFNL",
              "value": "60",
              "comment": [
                "Old has LF at end, new does not"
              ]
            },
            {
              "name": "GIT_DIFF_LINE_FILE_HDR",
              "value": "70"
            },
            {
              "name": "GIT_DIFF_LINE_HUNK_HDR",
              "value": "72"
            },
            {
              "name": "GIT_DIFF_LINE_BINARY",
              "value": "66",
              "comment": [
                "For \"Binary files x and y differ\""
              ]
            }
          ],
          "comment": [
            "Line origin constants.",
            "These values describe where a line came from and will be passed to\n the git_diff_line_cb when iterating over a diff.  There are some\n special origin constants at the end that are used for the text\n output callbacks to demarcate lines that are actually part of\n the file or hunk headers."
          ],
          "location": {
            "file": "diff.h",
            "line": 571,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_line": {
          "kind": "struct",
          "name": "git_diff_line",
          "referenceName": "git_diff_line",
          "comment": [
            "Structure describing a line (or data span) of a diff.",
            "A `line` is a range of characters inside a hunk.  It could be a context\n line (i.e. in both old and new versions), an added line (i.e. only in\n the new version), or a removed line (i.e. only in the old version).\n Unfortunately, we don't know anything about the encoding of data in the\n file being diffed, so we cannot tell you much about the line content.\n Line data will not be NUL-byte terminated, however, because it will be\n just a span of bytes inside the larger file."
          ],
          "members": [
            {
              "name": "origin",
              "type": "char",
              "comment": [
                "A git_diff_line_t value"
              ]
            },
            {
              "name": "old_lineno",
              "type": "int",
              "comment": [
                "Line number in old file or -1 for added line"
              ]
            },
            {
              "name": "new_lineno",
              "type": "int",
              "comment": [
                "Line number in new file or -1 for deleted line"
              ]
            },
            {
              "name": "num_lines",
              "type": "int",
              "comment": [
                "Number of newline characters in content"
              ]
            },
            {
              "name": "content_len",
              "type": "size_t",
              "comment": [
                "Number of bytes of data"
              ]
            },
            {
              "name": "content_offset",
              "type": "git_off_t",
              "comment": [
                "Offset in the original file to the content"
              ],
              "referenceType": "int64_t"
            },
            {
              "name": "content",
              "type": "const char *",
              "comment": [
                "Pointer to diff text, not NUL-byte terminated"
              ]
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 600,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_line_cb",
            "git_patch_get_line_in_hunk",
            "git_diff_print_callback__to_buf",
            "git_diff_print_callback__to_file_handle"
          ]
        },
        "git_diff_line_cb": {
          "kind": "callback",
          "name": "git_diff_line_cb",
          "type": "int (*)(const git_diff_delta *, const git_diff_hunk *, const git_diff_line *, void *)",
          "comment": [
            "When iterating over a diff, callback that will be made per text diff\n line. In this context, the provided range will be NULL.",
            "When printing a diff, callback that will be made to output each line\n of text.  This uses some extra GIT_DIFF_LINE_... constants for output\n of lines of file and hunk headers."
          ],
          "location": {
            "file": "diff.h",
            "line": 618,
            "column": 26
          },
          "params": [
            {
              "type": "const git_diff_delta *"
            },
            {
              "type": "const git_diff_hunk *"
            },
            {
              "type": "const git_diff_line *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "diff",
          "parameterTo": [
            "git_diff_foreach",
            "git_diff_print",
            "git_diff_blobs",
            "git_diff_blob_to_buffer",
            "git_diff_buffers",
            "git_patch_print"
          ],
          "typedef": true
        },
        "git_diff_find_t": {
          "kind": "enum",
          "name": "git_diff_find_t",
          "referenceName": "git_diff_find_t",
          "members": [
            {
              "name": "GIT_DIFF_FIND_BY_CONFIG",
              "value": "0",
              "comment": [
                "Obey `diff.renames`. Overridden by any other GIT_DIFF_FIND_... flag."
              ]
            },
            {
              "name": "GIT_DIFF_FIND_RENAMES",
              "comment": [
                "Look for renames? (`--find-renames`)"
              ]
            },
            {
              "name": "GIT_DIFF_FIND_RENAMES_FROM_REWRITES",
              "comment": [
                "Consider old side of MODIFIED for renames? (`--break-rewrites=N`)"
              ]
            },
            {
              "name": "GIT_DIFF_FIND_COPIES",
              "comment": [
                "Look for copies? (a la `--find-copies`)."
              ]
            },
            {
              "name": "GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED",
              "comment": [
                "Consider UNMODIFIED as copy sources? (`--find-copies-harder`).",
                "For this to work correctly, use GIT_DIFF_INCLUDE_UNMODIFIED when\n the initial `git_diff` is being generated."
              ]
            },
            {
              "name": "GIT_DIFF_FIND_REWRITES",
              "comment": [
                "Mark significant rewrites for split (`--break-rewrites=/M`)"
              ]
            },
            {
              "name": "GIT_DIFF_BREAK_REWRITES",
              "comment": [
                "Actually split large rewrites into delete/add pairs"
              ]
            },
            {
              "name": "GIT_DIFF_FIND_AND_BREAK_REWRITES",
              "value": "48",
              "comment": [
                "Mark rewrites for split and break into delete/add pairs"
              ]
            },
            {
              "name": "GIT_DIFF_FIND_FOR_UNTRACKED",
              "comment": [
                "Find renames/copies for UNTRACKED items in working directory.",
                "For this to work correctly, use GIT_DIFF_INCLUDE_UNTRACKED when the\n initial `git_diff` is being generated (and obviously the diff must\n be against the working directory for this to make sense)."
              ]
            },
            {
              "name": "GIT_DIFF_FIND_ALL",
              "value": "255",
              "comment": [
                "Turn on all finding features."
              ]
            },
            {
              "name": "GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE",
              "value": "0",
              "comment": [
                "Measure similarity ignoring leading whitespace (default)"
              ]
            },
            {
              "name": "GIT_DIFF_FIND_IGNORE_WHITESPACE",
              "comment": [
                "Measure similarity ignoring all whitespace"
              ]
            },
            {
              "name": "GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE",
              "comment": [
                "Measure similarity including all data"
              ]
            },
            {
              "name": "GIT_DIFF_FIND_EXACT_MATCH_ONLY",
              "comment": [
                "Measure similarity only by comparing SHAs (fast and cheap)"
              ]
            },
            {
              "name": "GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY",
              "comment": [
                "Do not break rewrites unless they contribute to a rename.",
                "Normally, GIT_DIFF_FIND_AND_BREAK_REWRITES will measure the self-\n similarity of modified files and split the ones that have changed a\n lot into a DELETE / ADD pair.  Then the sides of that pair will be\n considered candidates for rename and copy detection.",
                "If you add this flag in and the split pair is *not* used for an\n actual rename or copy, then the modified record will be restored to\n a regular MODIFIED record instead of being split."
              ]
            },
            {
              "name": "GIT_DIFF_FIND_REMOVE_UNMODIFIED",
              "comment": [
                "Remove any UNMODIFIED deltas after find_similar is done.",
                "Using GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED to emulate the\n --find-copies-harder behavior requires building a diff with the\n GIT_DIFF_INCLUDE_UNMODIFIED flag.  If you do not want UNMODIFIED\n records in the final result, pass this flag to have them removed."
              ]
            }
          ],
          "comment": [
            "Flags to control the behavior of diff rename/copy detection."
          ],
          "location": {
            "file": "diff.h",
            "line": 627,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_similarity_metric": {
          "kind": "struct",
          "name": "git_diff_similarity_metric",
          "referenceName": "git_diff_similarity_metric",
          "comment": [
            "Pluggable similarity metric"
          ],
          "members": [
            {
              "name": "file_signature",
              "type": "int (*)(void **, const git_diff_file *, const char *, void *)"
            },
            {
              "name": "buffer_signature",
              "type": "int (*)(void **, const git_diff_file *, const char *, size_t, void *)"
            },
            {
              "name": "free_signature",
              "type": "void (*)(void *, void *)"
            },
            {
              "name": "similarity",
              "type": "int (*)(int *, void *, void *, void *)"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 701,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_find_options": {
          "kind": "struct",
          "name": "git_diff_find_options",
          "referenceName": "git_diff_find_options",
          "comment": [
            "Control behavior of rename and copy detection",
            "These options mostly mimic parameters that can be passed to git-diff."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "Combination of git_diff_find_t values (default GIT_DIFF_FIND_BY_CONFIG).\n NOTE: if you don't explicitly set this, `diff.renames` could be set\n to false, resulting in `git_diff_find_similar` doing nothing."
              ]
            },
            {
              "name": "rename_threshold",
              "type": "uint16_t",
              "comment": [
                "Threshold above which similar files will be considered renames.\n This is equivalent to the -M option. Defaults to 50."
              ]
            },
            {
              "name": "rename_from_rewrite_threshold",
              "type": "uint16_t",
              "comment": [
                "Threshold below which similar files will be eligible to be a rename source.\n This is equivalent to the first part of the -B option. Defaults to 50."
              ]
            },
            {
              "name": "copy_threshold",
              "type": "uint16_t",
              "comment": [
                "Threshold above which similar files will be considered copies.\n This is equivalent to the -C option. Defaults to 50."
              ]
            },
            {
              "name": "break_rewrite_threshold",
              "type": "uint16_t",
              "comment": [
                "Treshold below which similar files will be split into a delete/add pair.\n This is equivalent to the last part of the -B option. Defaults to 60."
              ]
            },
            {
              "name": "rename_limit",
              "type": "size_t",
              "comment": [
                "Maximum number of matches to consider for a particular file.",
                "This is a little different from the `-l` option from Git because we\n will still process up to this many matches before abandoning the search.\n Defaults to 200."
              ]
            },
            {
              "name": "metric",
              "type": "git_diff_similarity_metric *",
              "comment": [
                "The `metric` option allows you to plug in a custom similarity metric.",
                "Set it to NULL to use the default internal metric.",
                "The default metric is based on sampling hashes of ranges of data in\n the file, which is a pretty good similarity approximation that should\n work fairly well for both text and binary data while still being\n pretty fast with a fixed memory overhead."
              ]
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 718,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_find_init_options",
            "git_diff_find_options_init",
            "git_diff_find_similar"
          ]
        },
        "GIT_DIFF_FIND_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_DIFF_FIND_OPTIONS_VERSION",
          "location": {
            "file": "diff.h",
            "line": 774,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "diff"
        },
        "GIT_DIFF_FIND_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_DIFF_FIND_OPTIONS_INIT",
          "location": {
            "file": "diff.h",
            "line": 775,
            "column": 9
          },
          "value": "{GIT_DIFF_FIND_OPTIONS_VERSION}",
          "comment": "",
          "group": "diff"
        },
        "git_diff_find_options_init": {
          "kind": "function",
          "name": "git_diff_find_options_init",
          "location": {
            "file": "diff.h",
            "line": 787,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_find_options *",
              "direction": "in",
              "comment": "The `git_diff_find_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_DIFF_FIND_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_diff_find_options structure",
            "Initializes a `git_diff_find_options` with default values. Equivalent to creating\n an instance with GIT_DIFF_FIND_OPTIONS_INIT."
          ],
          "group": "diff"
        },
        "git_diff_free": {
          "kind": "function",
          "name": "git_diff_free",
          "location": {
            "file": "diff.h",
            "line": 803,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "The previously created diff; cannot be used after free."
            }
          ],
          "comment": [
            "Deallocate a diff."
          ],
          "group": "diff"
        },
        "git_diff_tree_to_tree": {
          "kind": "function",
          "name": "git_diff_tree_to_tree",
          "location": {
            "file": "diff.h",
            "line": 821,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff **",
              "direction": "in",
              "comment": "Output pointer to a git_diff pointer to be allocated."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the trees."
            },
            {
              "name": "old_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff from, or NULL for empty tree."
            },
            {
              "name": "new_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff to, or NULL for empty tree."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            }
          ],
          "comment": [
            "Create a diff with the difference between two tree objects.",
            "This is equivalent to `git diff \n<old\n-tree> \n<new\n-tree>`",
            "The first tree will be used for the \"old_file\" side of the delta and the\n second tree will be used for the \"new_file\" side of the delta.  You can\n pass NULL to indicate an empty tree, although it is an error to pass\n NULL for both the `old_tree` and `new_tree`."
          ],
          "group": "diff"
        },
        "git_diff_tree_to_index": {
          "kind": "function",
          "name": "git_diff_tree_to_index",
          "location": {
            "file": "diff.h",
            "line": 847,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff **",
              "direction": "in",
              "comment": "Output pointer to a git_diff pointer to be allocated."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the tree and index."
            },
            {
              "name": "old_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff from, or NULL for empty tree."
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "The index to diff with; repo index used if NULL."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            }
          ],
          "comment": [
            "Create a diff between a tree and repository index.",
            "This is equivalent to `git diff --cached \n<treeish>` or if you pass\n the HEAD tree, then like `git diff --cached`.",
            "The tree you pass will be used for the \"old_file\" side of the delta, and\n the index will be used for the \"new_file\" side of the delta.",
            "If you pass NULL for the index, then the existing index of the `repo`\n will be used.  In this case, the index will be refreshed from disk\n (if it has changed) before the diff is generated."
          ],
          "group": "diff"
        },
        "git_diff_index_to_workdir": {
          "kind": "function",
          "name": "git_diff_index_to_workdir",
          "location": {
            "file": "diff.h",
            "line": 874,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff **",
              "direction": "in",
              "comment": "Output pointer to a git_diff pointer to be allocated."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository."
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "The index to diff from; repo index used if NULL."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            }
          ],
          "comment": [
            "Create a diff between the repository index and the workdir directory.",
            "This matches the `git diff` command.  See the note below on\n `git_diff_tree_to_workdir` for a discussion of the difference between\n `git diff` and `git diff HEAD` and how to emulate a `git diff \n<treeish>`\n using libgit2.",
            "The index will be used for the \"old_file\" side of the delta, and the\n working directory will be used for the \"new_file\" side of the delta.",
            "If you pass NULL for the index, then the existing index of the `repo`\n will be used.  In this case, the index will be refreshed from disk\n (if it has changed) before the diff is generated."
          ],
          "group": "diff"
        },
        "git_diff_tree_to_workdir": {
          "kind": "function",
          "name": "git_diff_tree_to_workdir",
          "location": {
            "file": "diff.h",
            "line": 903,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff **",
              "direction": "in",
              "comment": "A pointer to a git_diff pointer that will be allocated."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the tree."
            },
            {
              "name": "old_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff from, or NULL for empty tree."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            }
          ],
          "comment": [
            "Create a diff between a tree and the working directory.",
            "The tree you provide will be used for the \"old_file\" side of the delta,\n and the working directory will be used for the \"new_file\" side.",
            "This is not the same as `git diff \n<treeish>` or `git diff-index\n \n<treeish>`.  Those commands use information from the index, whereas this\n function strictly returns the differences between the tree and the files\n in the working directory, regardless of the state of the index.  Use\n `git_diff_tree_to_workdir_with_index` to emulate those commands.",
            "To see difference between this and `git_diff_tree_to_workdir_with_index`,\n consider the example of a staged file deletion where the file has then\n been put back into the working dir and further modified.  The\n tree-to-workdir diff for that file is 'modified', but `git diff` would\n show status 'deleted' since there is a staged delete."
          ],
          "group": "diff"
        },
        "git_diff_tree_to_workdir_with_index": {
          "kind": "function",
          "name": "git_diff_tree_to_workdir_with_index",
          "location": {
            "file": "diff.h",
            "line": 922,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff **",
              "direction": "in",
              "comment": "A pointer to a git_diff pointer that will be allocated."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the tree."
            },
            {
              "name": "old_tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "A git_tree object to diff from, or NULL for empty tree."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            }
          ],
          "comment": [
            "Create a diff between a tree and the working directory using index data\n to account for staged deletes, tracked files, etc.",
            "This emulates `git diff \n<tree>` by diffing the tree to the index and\n the index to the working directory and blending the results into a\n single diff that includes staged deleted, etc."
          ],
          "group": "diff"
        },
        "git_diff_index_to_index": {
          "kind": "function",
          "name": "git_diff_index_to_index",
          "location": {
            "file": "diff.h",
            "line": 940,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff **",
              "direction": "in",
              "comment": "Output pointer to a git_diff pointer to be allocated."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing the indexes."
            },
            {
              "name": "old_index",
              "type": "git_index *",
              "direction": "in",
              "comment": "A git_index object to diff from."
            },
            {
              "name": "new_index",
              "type": "git_index *",
              "direction": "in",
              "comment": "A git_index object to diff to."
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Structure with options to influence diff or NULL for defaults."
            }
          ],
          "comment": [
            "Create a diff with the difference between two index objects.",
            "The first index will be used for the \"old_file\" side of the delta and the\n second index will be used for the \"new_file\" side of the delta."
          ],
          "group": "diff"
        },
        "git_diff_merge": {
          "kind": "function",
          "name": "git_diff_merge",
          "location": {
            "file": "diff.h",
            "line": 960,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "onto",
              "type": "git_diff *",
              "direction": "in",
              "comment": "Diff to merge into."
            },
            {
              "name": "from",
              "type": "const git_diff *",
              "direction": "in",
              "comment": "Diff to merge."
            }
          ],
          "comment": [
            "Merge one diff into another.",
            "This merges items from the \"from\" list into the \"onto\" list.  The\n resulting diff will have all items that appear in either list.\n If an item appears in both lists, then it will be \"merged\" to appear\n as if the old version was from the \"onto\" list and the new version\n is from the \"from\" list (with the exception that if the item has a\n pending DELETE in the middle, then it will show as deleted)."
          ],
          "group": "diff"
        },
        "git_diff_find_similar": {
          "kind": "function",
          "name": "git_diff_find_similar",
          "location": {
            "file": "diff.h",
            "line": 976,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on failure"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "diff to run detection algorithms on"
            },
            {
              "name": "options",
              "type": "const git_diff_find_options *",
              "direction": "in",
              "comment": "Control how detection should be run, NULL for defaults"
            }
          ],
          "comment": [
            "Transform a diff marking file renames, copies, etc.",
            "This modifies a diff in place, replacing old entries that look\n like renames or copies with new entries reflecting those changes.\n This also will, if requested, break modified files into add/remove\n pairs if the amount of change is above a threshold."
          ],
          "group": "diff"
        },
        "git_diff_num_deltas": {
          "kind": "function",
          "name": "git_diff_num_deltas",
          "location": {
            "file": "diff.h",
            "line": 996,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "Count of number of deltas in the list"
          },
          "params": [
            {
              "name": "diff",
              "type": "const git_diff *",
              "direction": "in",
              "comment": "A git_diff generated by one of the above functions"
            }
          ],
          "comment": [
            "Query how many diff records are there in a diff."
          ],
          "group": "diff"
        },
        "git_diff_num_deltas_of_type": {
          "kind": "function",
          "name": "git_diff_num_deltas_of_type",
          "location": {
            "file": "diff.h",
            "line": 1009,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "Count of number of deltas matching delta_t type"
          },
          "params": [
            {
              "name": "diff",
              "type": "const git_diff *",
              "direction": "in",
              "comment": "A git_diff generated by one of the above functions"
            },
            {
              "name": "type",
              "type": "git_delta_t",
              "direction": "in",
              "comment": "A git_delta_t value to filter the count",
              "referenceType": "enum git_delta_t"
            }
          ],
          "comment": [
            "Query how many diff deltas are there in a diff filtered by type.",
            "This works just like `git_diff_entrycount()` with an extra parameter\n that is a `git_delta_t` and returns just the count of how many deltas\n match that particular type."
          ],
          "group": "diff"
        },
        "git_diff_get_delta": {
          "kind": "function",
          "name": "git_diff_get_delta",
          "location": {
            "file": "diff.h",
            "line": 1029,
            "column": 36
          },
          "returns": {
            "type": "const git_diff_delta *",
            "comment": "Pointer to git_diff_delta (or NULL if `idx` out of range)"
          },
          "params": [
            {
              "name": "diff",
              "type": "const git_diff *",
              "direction": "in",
              "comment": "Diff list object"
            },
            {
              "name": "idx",
              "type": "size_t",
              "direction": "in",
              "comment": "Index into diff list"
            }
          ],
          "comment": [
            "Return the diff delta for an entry in the diff list.",
            "The `git_diff_delta` pointer points to internal data and you do not\n have to release it when you are done with it.  It will go away when\n the * `git_diff` (or any associated `git_patch`) goes away.",
            "Note that the flags on the delta related to whether it has binary\n content or not may not be set if there are no attributes set for the\n file and there has been no reason to load the file data at this point.\n For now, if you need those flags to be up to date, your only option is\n to either use `git_diff_foreach` or create a `git_patch`."
          ],
          "group": "diff"
        },
        "git_diff_is_sorted_icase": {
          "kind": "function",
          "name": "git_diff_is_sorted_icase",
          "location": {
            "file": "diff.h",
            "line": 1038,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if case sensitive, 1 if case is ignored"
          },
          "params": [
            {
              "name": "diff",
              "type": "const git_diff *",
              "direction": "in",
              "comment": "diff to check"
            }
          ],
          "comment": [
            "Check if deltas are sorted case sensitively or insensitively."
          ],
          "group": "diff"
        },
        "git_diff_foreach": {
          "kind": "function",
          "name": "git_diff_foreach",
          "location": {
            "file": "diff.h",
            "line": 1066,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "A git_diff generated by one of the above functions."
            },
            {
              "name": "file_cb",
              "type": "git_diff_file_cb",
              "direction": "in",
              "comment": "Callback function to make per file in the diff.",
              "referenceType": "int (*)(const git_diff_delta *, float, void *)"
            },
            {
              "name": "binary_cb",
              "type": "git_diff_binary_cb",
              "direction": "in",
              "comment": "Optional callback to make for binary files.",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_binary *, void *)"
            },
            {
              "name": "hunk_cb",
              "type": "git_diff_hunk_cb",
              "direction": "in",
              "comment": "Optional callback to make per hunk of text diff.  This\n                callback is called to describe a range of lines in the\n                diff.  It will not be issued for binary files.",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, void *)"
            },
            {
              "name": "line_cb",
              "type": "git_diff_line_cb",
              "direction": "in",
              "comment": "Optional callback to make per line of diff text.  This\n                same callback will be made for context lines, added, and\n                removed lines, and even for a deleted trailing newline.",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, const git_diff_line *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Reference pointer that will be passed to your callbacks."
            }
          ],
          "comment": [
            "Loop over all deltas in a diff issuing callbacks.",
            "This will iterate through all of the files described in a diff.  You\n should provide a file callback to learn about each file.",
            "The \"hunk\" and \"line\" callbacks are optional, and the text diff of the\n files will only be calculated if they are not NULL.  Of course, these\n callbacks will not be invoked for binary files on the diff or for\n files whose only changed is a file mode change.",
            "Returning a non-zero value from any of the callbacks will terminate\n the iteration and return the value to the user."
          ],
          "group": "diff"
        },
        "git_diff_status_char": {
          "kind": "function",
          "name": "git_diff_status_char",
          "location": {
            "file": "diff.h",
            "line": 1085,
            "column": 18
          },
          "returns": {
            "type": "char",
            "comment": "The single character label for that code"
          },
          "params": [
            {
              "name": "status",
              "type": "git_delta_t",
              "direction": "in",
              "comment": "The git_delta_t value to look up",
              "referenceType": "enum git_delta_t"
            }
          ],
          "comment": [
            "Look up the single character abbreviation for a delta status code.",
            "When you run `git diff --name-status` it uses single letter codes in\n the output such as 'A' for added, 'D' for deleted, 'M' for modified,\n etc.  This function converts a git_delta_t value into these letters for\n your own purposes.  GIT_DELTA_UNTRACKED will return a space (i.e. ' ')."
          ],
          "group": "diff"
        },
        "git_diff_format_t": {
          "kind": "enum",
          "name": "git_diff_format_t",
          "referenceName": "git_diff_format_t",
          "members": [
            {
              "name": "GIT_DIFF_FORMAT_PATCH",
              "comment": [
                "full git diff"
              ]
            },
            {
              "name": "GIT_DIFF_FORMAT_PATCH_HEADER",
              "comment": [
                "just the file headers of patch"
              ]
            },
            {
              "name": "GIT_DIFF_FORMAT_RAW",
              "comment": [
                "like git diff --raw"
              ]
            },
            {
              "name": "GIT_DIFF_FORMAT_NAME_ONLY",
              "comment": [
                "like git diff --name-only"
              ]
            },
            {
              "name": "GIT_DIFF_FORMAT_NAME_STATUS",
              "comment": [
                "like git diff --name-status"
              ]
            },
            {
              "name": "GIT_DIFF_FORMAT_PATCH_ID",
              "comment": [
                "git diff as used by git patch-id"
              ]
            }
          ],
          "comment": [
            "Possible output formats for diff data"
          ],
          "location": {
            "file": "diff.h",
            "line": 1090,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_print",
            "git_diff_to_buf"
          ]
        },
        "git_diff_print": {
          "kind": "function",
          "name": "git_diff_print",
          "location": {
            "file": "diff.h",
            "line": 1111,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "A git_diff generated by one of the above functions."
            },
            {
              "name": "format",
              "type": "git_diff_format_t",
              "direction": "in",
              "comment": "A git_diff_format_t value to pick the text format.",
              "referenceType": "enum git_diff_format_t"
            },
            {
              "name": "print_cb",
              "type": "git_diff_line_cb",
              "direction": "in",
              "comment": "Callback to make per line of diff text.",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, const git_diff_line *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Reference pointer that will be passed to your callback."
            }
          ],
          "comment": [
            "Iterate over a diff generating formatted text output.",
            "Returning a non-zero value from the callbacks will terminate the\n iteration and return the non-zero value to the caller."
          ],
          "group": "diff"
        },
        "git_diff_to_buf": {
          "kind": "function",
          "name": "git_diff_to_buf",
          "location": {
            "file": "diff.h",
            "line": 1127,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "A pointer to a user-allocated git_buf that will\n            contain the diff text"
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "A git_diff generated by one of the above functions."
            },
            {
              "name": "format",
              "type": "git_diff_format_t",
              "direction": "in",
              "comment": "A git_diff_format_t value to pick the text format.",
              "referenceType": "enum git_diff_format_t"
            }
          ],
          "comment": [
            "Produce the complete formatted text output from a diff into a\n buffer."
          ],
          "group": "diff"
        },
        "git_diff_blobs": {
          "kind": "function",
          "name": "git_diff_blobs",
          "location": {
            "file": "diff.h",
            "line": 1167,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "old_blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "Blob for old side of diff, or NULL for empty blob"
            },
            {
              "name": "old_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat old blob as if it had this filename; can be NULL"
            },
            {
              "name": "new_blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "Blob for new side of diff, or NULL for empty blob"
            },
            {
              "name": "new_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat new blob as if it had this filename; can be NULL"
            },
            {
              "name": "options",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Options for diff, or NULL for default options"
            },
            {
              "name": "file_cb",
              "type": "git_diff_file_cb",
              "direction": "in",
              "comment": "Callback for \"file\"; made once if there is a diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, float, void *)"
            },
            {
              "name": "binary_cb",
              "type": "git_diff_binary_cb",
              "direction": "in",
              "comment": "Callback for binary files; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_binary *, void *)"
            },
            {
              "name": "hunk_cb",
              "type": "git_diff_hunk_cb",
              "direction": "in",
              "comment": "Callback for each hunk in diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, void *)"
            },
            {
              "name": "line_cb",
              "type": "git_diff_line_cb",
              "direction": "in",
              "comment": "Callback for each line in diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, const git_diff_line *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Payload passed to each callback function"
            }
          ],
          "comment": [
            "Directly run a diff on two blobs.",
            "Compared to a file, a blob lacks some contextual information. As such,\n the `git_diff_file` given to the callback will have some fake data; i.e.\n `mode` will be 0 and `path` will be NULL.",
            "NULL is allowed for either `old_blob` or `new_blob` and will be treated\n as an empty blob, with the `oid` set to NULL in the `git_diff_file` data.\n Passing NULL for both blobs is a noop; no callbacks will be made at all.",
            "We do run a binary content check on the blob content and if either blob\n looks like binary data, the `git_diff_delta` binary attribute will be set\n to 1 and no call to the hunk_cb nor line_cb will be made (unless you pass\n `GIT_DIFF_FORCE_TEXT` of course)."
          ],
          "group": "diff"
        },
        "git_diff_blob_to_buffer": {
          "kind": "function",
          "name": "git_diff_blob_to_buffer",
          "location": {
            "file": "diff.h",
            "line": 1204,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "old_blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "Blob for old side of diff, or NULL for empty blob"
            },
            {
              "name": "old_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat old blob as if it had this filename; can be NULL"
            },
            {
              "name": "buffer",
              "type": "const char *",
              "direction": "in",
              "comment": "Raw data for new side of diff, or NULL for empty"
            },
            {
              "name": "buffer_len",
              "type": "size_t",
              "direction": "in",
              "comment": "Length of raw data for new side of diff"
            },
            {
              "name": "buffer_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat buffer as if it had this filename; can be NULL"
            },
            {
              "name": "options",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Options for diff, or NULL for default options"
            },
            {
              "name": "file_cb",
              "type": "git_diff_file_cb",
              "direction": "in",
              "comment": "Callback for \"file\"; made once if there is a diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, float, void *)"
            },
            {
              "name": "binary_cb",
              "type": "git_diff_binary_cb",
              "direction": "in",
              "comment": "Callback for binary files; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_binary *, void *)"
            },
            {
              "name": "hunk_cb",
              "type": "git_diff_hunk_cb",
              "direction": "in",
              "comment": "Callback for each hunk in diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, void *)"
            },
            {
              "name": "line_cb",
              "type": "git_diff_line_cb",
              "direction": "in",
              "comment": "Callback for each line in diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, const git_diff_line *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Payload passed to each callback function"
            }
          ],
          "comment": [
            "Directly run a diff between a blob and a buffer.",
            "As with `git_diff_blobs`, comparing a blob and buffer lacks some context,\n so the `git_diff_file` parameters to the callbacks will be faked a la the\n rules for `git_diff_blobs()`.",
            "Passing NULL for `old_blob` will be treated as an empty blob (i.e. the\n `file_cb` will be invoked with GIT_DELTA_ADDED and the diff will be the\n entire content of the buffer added).  Passing NULL to the buffer will do\n the reverse, with GIT_DELTA_REMOVED and blob content removed."
          ],
          "group": "diff"
        },
        "git_diff_buffers": {
          "kind": "function",
          "name": "git_diff_buffers",
          "location": {
            "file": "diff.h",
            "line": 1238,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "old_buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "Raw data for old side of diff, or NULL for empty"
            },
            {
              "name": "old_len",
              "type": "size_t",
              "direction": "in",
              "comment": "Length of the raw data for old side of the diff"
            },
            {
              "name": "old_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat old buffer as if it had this filename; can be NULL"
            },
            {
              "name": "new_buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "Raw data for new side of diff, or NULL for empty"
            },
            {
              "name": "new_len",
              "type": "size_t",
              "direction": "in",
              "comment": "Length of raw data for new side of diff"
            },
            {
              "name": "new_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat buffer as if it had this filename; can be NULL"
            },
            {
              "name": "options",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Options for diff, or NULL for default options"
            },
            {
              "name": "file_cb",
              "type": "git_diff_file_cb",
              "direction": "in",
              "comment": "Callback for \"file\"; made once if there is a diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, float, void *)"
            },
            {
              "name": "binary_cb",
              "type": "git_diff_binary_cb",
              "direction": "in",
              "comment": "Callback for binary files; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_binary *, void *)"
            },
            {
              "name": "hunk_cb",
              "type": "git_diff_hunk_cb",
              "direction": "in",
              "comment": "Callback for each hunk in diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, void *)"
            },
            {
              "name": "line_cb",
              "type": "git_diff_line_cb",
              "direction": "in",
              "comment": "Callback for each line in diff; can be NULL",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, const git_diff_line *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Payload passed to each callback function"
            }
          ],
          "comment": [
            "Directly run a diff between two buffers.",
            "Even more than with `git_diff_blobs`, comparing two buffer lacks\n context, so the `git_diff_file` parameters to the callbacks will be\n faked a la the rules for `git_diff_blobs()`."
          ],
          "group": "diff"
        },
        "git_diff_from_buffer": {
          "kind": "function",
          "name": "git_diff_from_buffer",
          "location": {
            "file": "diff.h",
            "line": 1271,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_diff **",
              "direction": "in",
              "comment": "A pointer to a git_diff pointer that will be allocated."
            },
            {
              "name": "content",
              "type": "const char *",
              "direction": "in",
              "comment": "The contents of a patch file"
            },
            {
              "name": "content_len",
              "type": "size_t",
              "direction": "in",
              "comment": "The length of the patch file contents"
            }
          ],
          "comment": [
            "Read the contents of a git patch file into a `git_diff` object.",
            "The diff object produced is similar to the one that would be\n produced if you actually produced it computationally by comparing\n two trees, however there may be subtle differences.  For example,\n a patch file likely contains abbreviated object IDs, so the\n object IDs in a `git_diff_delta` produced by this function will\n also be abbreviated.",
            "This function will only read patch files created by a git\n implementation, it will not read unified diffs produced by\n the `diff` program, nor any other types of patch files."
          ],
          "group": "diff"
        },
        "git_diff_stats": {
          "kind": "struct",
          "name": "git_diff_stats",
          "referenceName": "struct git_diff_stats",
          "opaque": true,
          "comment": [
            "This is an opaque structure which is allocated by `git_diff_get_stats`.\n You are responsible for releasing the object memory when done, using the\n `git_diff_stats_free()` function."
          ],
          "location": {
            "file": "diff.h",
            "line": 1281,
            "column": 31
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_get_stats",
            "git_diff_stats_files_changed",
            "git_diff_stats_insertions",
            "git_diff_stats_deletions",
            "git_diff_stats_to_buf",
            "git_diff_stats_free"
          ]
        },
        "git_diff_stats_format_t": {
          "kind": "enum",
          "name": "git_diff_stats_format_t",
          "referenceName": "git_diff_stats_format_t",
          "members": [
            {
              "name": "GIT_DIFF_STATS_NONE",
              "value": "0",
              "comment": [
                "No stats"
              ]
            },
            {
              "name": "GIT_DIFF_STATS_FULL",
              "comment": [
                "Full statistics, equivalent of `--stat`"
              ]
            },
            {
              "name": "GIT_DIFF_STATS_SHORT",
              "comment": [
                "Short statistics, equivalent of `--shortstat`"
              ]
            },
            {
              "name": "GIT_DIFF_STATS_NUMBER",
              "comment": [
                "Number statistics, equivalent of `--numstat`"
              ]
            },
            {
              "name": "GIT_DIFF_STATS_INCLUDE_SUMMARY",
              "comment": [
                "Extended header information such as creations, renames and mode changes, equivalent of `--summary`"
              ]
            }
          ],
          "comment": [
            "Formatting options for diff stats"
          ],
          "location": {
            "file": "diff.h",
            "line": 1286,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_stats_to_buf"
          ]
        },
        "git_diff_get_stats": {
          "kind": "function",
          "name": "git_diff_get_stats",
          "location": {
            "file": "diff.h",
            "line": 1310,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; non-zero on error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_diff_stats **",
              "direction": "in",
              "comment": "Structure containg the diff statistics."
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "A git_diff generated by one of the above functions."
            }
          ],
          "comment": [
            "Accumulate diff statistics for all patches."
          ],
          "group": "diff"
        },
        "git_diff_stats_files_changed": {
          "kind": "function",
          "name": "git_diff_stats_files_changed",
          "location": {
            "file": "diff.h",
            "line": 1320,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "total number of files changed in the diff"
          },
          "params": [
            {
              "name": "stats",
              "type": "const git_diff_stats *",
              "direction": "in",
              "comment": "A `git_diff_stats` generated by one of the above functions."
            }
          ],
          "comment": [
            "Get the total number of files changed in a diff"
          ],
          "group": "diff"
        },
        "git_diff_stats_insertions": {
          "kind": "function",
          "name": "git_diff_stats_insertions",
          "location": {
            "file": "diff.h",
            "line": 1329,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "total number of insertions in the diff"
          },
          "params": [
            {
              "name": "stats",
              "type": "const git_diff_stats *",
              "direction": "in",
              "comment": "A `git_diff_stats` generated by one of the above functions."
            }
          ],
          "comment": [
            "Get the total number of insertions in a diff"
          ],
          "group": "diff"
        },
        "git_diff_stats_deletions": {
          "kind": "function",
          "name": "git_diff_stats_deletions",
          "location": {
            "file": "diff.h",
            "line": 1338,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "total number of deletions in the diff"
          },
          "params": [
            {
              "name": "stats",
              "type": "const git_diff_stats *",
              "direction": "in",
              "comment": "A `git_diff_stats` generated by one of the above functions."
            }
          ],
          "comment": [
            "Get the total number of deletions in a diff"
          ],
          "group": "diff"
        },
        "git_diff_stats_to_buf": {
          "kind": "function",
          "name": "git_diff_stats_to_buf",
          "location": {
            "file": "diff.h",
            "line": 1350,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; non-zero on error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer to store the formatted diff statistics in."
            },
            {
              "name": "stats",
              "type": "const git_diff_stats *",
              "direction": "in",
              "comment": "A `git_diff_stats` generated by one of the above functions."
            },
            {
              "name": "format",
              "type": "git_diff_stats_format_t",
              "direction": "in",
              "comment": "Formatting option.",
              "referenceType": "enum git_diff_stats_format_t"
            },
            {
              "name": "width",
              "type": "size_t",
              "direction": "in",
              "comment": "Target width for output (only affects GIT_DIFF_STATS_FULL)"
            }
          ],
          "comment": [
            "Print diff statistics to a `git_buf`."
          ],
          "group": "diff"
        },
        "git_diff_stats_free": {
          "kind": "function",
          "name": "git_diff_stats_free",
          "location": {
            "file": "diff.h",
            "line": 1362,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "stats",
              "type": "git_diff_stats *",
              "direction": "in",
              "comment": "The previously created statistics object;\n cannot be used after free."
            }
          ],
          "comment": [
            "Deallocate a `git_diff_stats`."
          ],
          "group": "diff"
        },
        "git_diff_format_email_flags_t": {
          "kind": "enum",
          "name": "git_diff_format_email_flags_t",
          "referenceName": "git_diff_format_email_flags_t",
          "members": [
            {
              "name": "GIT_DIFF_FORMAT_EMAIL_NONE",
              "value": "0",
              "comment": [
                "Normal patch, the default"
              ]
            },
            {
              "name": "GIT_DIFF_FORMAT_EMAIL_EXCLUDE_SUBJECT_PATCH_MARKER",
              "value": "1",
              "comment": [
                "Don't insert \"[PATCH]\" in the subject header"
              ]
            }
          ],
          "comment": [
            "Formatting options for diff e-mail generation"
          ],
          "location": {
            "file": "diff.h",
            "line": 1367,
            "column": 9
          },
          "group": "diff"
        },
        "git_diff_format_email_options": {
          "kind": "struct",
          "name": "git_diff_format_email_options",
          "referenceName": "git_diff_format_email_options",
          "comment": [
            "Options for controlling the formatting of the generated e-mail."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "see `git_diff_format_email_flags_t` above"
              ]
            },
            {
              "name": "patch_no",
              "type": "size_t",
              "comment": [
                "This patch number"
              ]
            },
            {
              "name": "total_patches",
              "type": "size_t",
              "comment": [
                "Total number of patches in this series"
              ]
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "comment": [
                "id to use for the commit"
              ]
            },
            {
              "name": "summary",
              "type": "const char *",
              "comment": [
                "Summary of the change"
              ]
            },
            {
              "name": "body",
              "type": "const char *",
              "comment": [
                "Commit message's body"
              ]
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "comment": [
                "Author of the change"
              ]
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 1379,
            "column": 9
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_format_email_init_options",
            "git_diff_format_email",
            "git_diff_format_email_options_init"
          ]
        },
        "GIT_DIFF_FORMAT_EMAIL_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_DIFF_FORMAT_EMAIL_OPTIONS_VERSION",
          "location": {
            "file": "diff.h",
            "line": 1404,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "diff"
        },
        "GIT_DIFF_FORMAT_EMAIL_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_DIFF_FORMAT_EMAIL_OPTIONS_INIT",
          "location": {
            "file": "diff.h",
            "line": 1405,
            "column": 9
          },
          "value": "{GIT_DIFF_FORMAT_EMAIL_OPTIONS_VERSION, 0, 1, 1, NULL, NULL, NULL, NULL}",
          "comment": "",
          "group": "diff"
        },
        "git_diff_format_email": {
          "kind": "function",
          "name": "git_diff_format_email",
          "location": {
            "file": "diff.h",
            "line": 1415,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer to store the e-mail patch in"
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "containing the commit"
            },
            {
              "name": "opts",
              "type": "const git_diff_format_email_options *",
              "direction": "in",
              "comment": "structure with options to influence content and formatting."
            }
          ],
          "comment": [
            "Create an e-mail ready patch from a diff."
          ],
          "group": "diff"
        },
        "git_diff_commit_as_email": {
          "kind": "function",
          "name": "git_diff_commit_as_email",
          "location": {
            "file": "diff.h",
            "line": 1434,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer to store the e-mail patch in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "containing the commit"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "pointer to up commit"
            },
            {
              "name": "patch_no",
              "type": "size_t",
              "direction": "in",
              "comment": "patch number of the commit"
            },
            {
              "name": "total_patches",
              "type": "size_t",
              "direction": "in",
              "comment": "total number of patches in the patch set"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "determines the formatting of the e-mail"
            },
            {
              "name": "diff_opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "structure with options to influence diff or NULL for defaults."
            }
          ],
          "comment": [
            "Create an e-mail ready patch for a commit.",
            "Does not support creating patches for merge commits (yet)."
          ],
          "group": "diff"
        },
        "git_diff_format_email_options_init": {
          "kind": "function",
          "name": "git_diff_format_email_options_init",
          "location": {
            "file": "diff.h",
            "line": 1453,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_format_email_options *",
              "direction": "in",
              "comment": "The `git_blame_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_DIFF_FORMAT_EMAIL_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_diff_format_email_options structure",
            "Initializes a `git_diff_format_email_options` with default values. Equivalent\n to creating an instance with GIT_DIFF_FORMAT_EMAIL_OPTIONS_INIT."
          ],
          "group": "diff"
        },
        "git_diff_patchid_options": {
          "kind": "struct",
          "name": "git_diff_patchid_options",
          "referenceName": "git_diff_patchid_options",
          "comment": [
            "Patch ID options structure",
            "Initialize with `GIT_PATCHID_OPTIONS_INIT`. Alternatively, you can\n use `git_diff_patchid_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            }
          ],
          "location": {
            "file": "diff.h",
            "line": 1464,
            "column": 16
          },
          "group": "diff",
          "parameterTo": [
            "git_diff_patchid_init_options",
            "git_diff_patchid_options_init",
            "git_diff_patchid"
          ]
        },
        "GIT_DIFF_PATCHID_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_DIFF_PATCHID_OPTIONS_VERSION",
          "location": {
            "file": "diff.h",
            "line": 1468,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "diff"
        },
        "GIT_DIFF_PATCHID_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_DIFF_PATCHID_OPTIONS_INIT",
          "location": {
            "file": "diff.h",
            "line": 1469,
            "column": 9
          },
          "value": "{ GIT_DIFF_PATCHID_OPTIONS_VERSION }",
          "comment": "",
          "group": "diff"
        },
        "git_diff_patchid_options_init": {
          "kind": "function",
          "name": "git_diff_patchid_options_init",
          "location": {
            "file": "diff.h",
            "line": 1481,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_diff_patchid_options *",
              "direction": "in",
              "comment": "The `git_diff_patchid_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_DIFF_PATCHID_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_diff_patchid_options structure",
            "Initializes a `git_diff_patchid_options` with default values. Equivalent to\n creating an instance with `GIT_DIFF_PATCHID_OPTIONS_INIT`."
          ],
          "group": "diff"
        },
        "git_diff_patchid": {
          "kind": "function",
          "name": "git_diff_patchid",
          "location": {
            "file": "diff.h",
            "line": 1504,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, an error code otherwise."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where the calculated patch ID should be stored"
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "The diff to calculate the ID for"
            },
            {
              "name": "opts",
              "type": "git_diff_patchid_options *",
              "direction": "in",
              "comment": "Options for how to calculate the patch ID. This is\n  intended for future changes, as currently no options are\n  available."
            }
          ],
          "comment": [
            "Calculate the patch ID for the given patch.",
            "Calculate a stable patch ID for the given patch by summing the\n hash of the file diffs, ignoring whitespace and line numbers.\n This can be used to derive whether two diffs are the same with\n a high probability.",
            "Currently, this function only calculates stable patch IDs, as\n defined in git-patch-id(1), and should in fact generate the\n same IDs as the upstream git project does."
          ],
          "group": "diff"
        }
      },
      "info": {
        "summary": "Git tree and file differencing routines."
      }
    },
    "sys/diff": {
      "apis": {
        "git_diff_print_callback__to_buf": {
          "kind": "function",
          "name": "git_diff_print_callback__to_buf",
          "location": {
            "file": "sys/diff.h",
            "line": 37,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "delta",
              "type": "const git_diff_delta *"
            },
            {
              "name": "hunk",
              "type": "const git_diff_hunk *"
            },
            {
              "name": "line",
              "type": "const git_diff_line *"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Diff print callback that writes to a git_buf.",
            "This function is provided not for you to call it directly, but instead\n so you can use it as a function pointer to the `git_diff_print` or\n `git_patch_print` APIs.  When using those APIs, you specify a callback\n to actually handle the diff and/or patch data.",
            "Use this callback to easily write that data to a `git_buf` buffer.  You\n must pass a `git_buf *` value as the payload to the `git_diff_print`\n and/or `git_patch_print` function.  The data will be appended to the\n buffer (after any existing content)."
          ],
          "group": "sys/diff"
        },
        "git_diff_print_callback__to_file_handle": {
          "kind": "function",
          "name": "git_diff_print_callback__to_file_handle",
          "location": {
            "file": "sys/diff.h",
            "line": 57,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "delta",
              "type": "const git_diff_delta *"
            },
            {
              "name": "hunk",
              "type": "const git_diff_hunk *"
            },
            {
              "name": "line",
              "type": "const git_diff_line *"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Diff print callback that writes to stdio FILE handle.",
            "This function is provided not for you to call it directly, but instead\n so you can use it as a function pointer to the `git_diff_print` or\n `git_patch_print` APIs.  When using those APIs, you specify a callback\n to actually handle the diff and/or patch data.",
            "Use this callback to easily write that data to a stdio FILE handle.  You\n must pass a `FILE *` value (such as `stdout` or `stderr` or the return\n value from `fopen()`) as the payload to the `git_diff_print`\n and/or `git_patch_print` function.  If you pass NULL, this will write\n data to `stdout`."
          ],
          "group": "sys/diff"
        },
        "git_diff_perfdata": {
          "kind": "struct",
          "name": "git_diff_perfdata",
          "referenceName": "git_diff_perfdata",
          "comment": [
            "Performance data from diffing"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "stat_calls",
              "type": "size_t",
              "comment": [
                "Number of stat() calls performed"
              ]
            },
            {
              "name": "oid_calculations",
              "type": "size_t",
              "comment": [
                "Number of ID calculations"
              ]
            }
          ],
          "location": {
            "file": "sys/diff.h",
            "line": 67,
            "column": 9
          },
          "group": "sys/diff",
          "parameterTo": [
            "git_diff_get_perfdata",
            "git_status_list_get_perfdata"
          ]
        },
        "GIT_DIFF_PERFDATA_VERSION": {
          "kind": "macro",
          "name": "GIT_DIFF_PERFDATA_VERSION",
          "location": {
            "file": "sys/diff.h",
            "line": 73,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/diff"
        },
        "GIT_DIFF_PERFDATA_INIT": {
          "kind": "macro",
          "name": "GIT_DIFF_PERFDATA_INIT",
          "location": {
            "file": "sys/diff.h",
            "line": 74,
            "column": 9
          },
          "value": "{GIT_DIFF_PERFDATA_VERSION,0,0}",
          "comment": "",
          "group": "sys/diff"
        },
        "git_diff_get_perfdata": {
          "kind": "function",
          "name": "git_diff_get_perfdata",
          "location": {
            "file": "sys/diff.h",
            "line": 83,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 for success, \n<\n0 for error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_diff_perfdata *",
              "direction": "in",
              "comment": "Structure to be filled with diff performance data"
            },
            {
              "name": "diff",
              "type": "const git_diff *",
              "direction": "in",
              "comment": "Diff to read performance data from"
            }
          ],
          "comment": [
            "Get performance data for a diff object."
          ],
          "group": "sys/diff"
        },
        "git_status_list_get_perfdata": {
          "kind": "function",
          "name": "git_status_list_get_perfdata",
          "location": {
            "file": "sys/diff.h",
            "line": 89,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_diff_perfdata *"
            },
            {
              "name": "status",
              "type": "const git_status_list *"
            }
          ],
          "comment": [
            "Get performance data for diffs from a git_status_list"
          ],
          "group": "sys/diff"
        }
      },
      "info": {
        "summary": "Low-level Git diff utilities"
      }
    },
    "errors": {
      "apis": {
        "git_error_code": {
          "kind": "enum",
          "name": "git_error_code",
          "referenceName": "git_error_code",
          "members": [
            {
              "name": "GIT_OK",
              "value": "0",
              "comment": [
                "No error"
              ]
            },
            {
              "name": "GIT_ERROR",
              "value": "-1",
              "comment": [
                "Generic error"
              ]
            },
            {
              "name": "GIT_ENOTFOUND",
              "value": "-3",
              "comment": [
                "Requested object could not be found"
              ]
            },
            {
              "name": "GIT_EEXISTS",
              "value": "-4",
              "comment": [
                "Object exists preventing operation"
              ]
            },
            {
              "name": "GIT_EAMBIGUOUS",
              "value": "-5",
              "comment": [
                "More than one object matches"
              ]
            },
            {
              "name": "GIT_EBUFS",
              "value": "-6",
              "comment": [
                "Output buffer too short to hold data"
              ]
            },
            {
              "name": "GIT_EUSER",
              "value": "-7",
              "comment": [
                "GIT_EUSER is a special error that is never generated by libgit2\n code.  You can return it from a callback (e.g to stop an iteration)\n to know that it was generated by the callback and not by libgit2."
              ]
            },
            {
              "name": "GIT_EBAREREPO",
              "value": "-8",
              "comment": [
                "Operation not allowed on bare repository"
              ]
            },
            {
              "name": "GIT_EUNBORNBRANCH",
              "value": "-9",
              "comment": [
                "HEAD refers to branch with no commits"
              ]
            },
            {
              "name": "GIT_EUNMERGED",
              "value": "-10",
              "comment": [
                "Merge in progress prevented operation"
              ]
            },
            {
              "name": "GIT_ENONFASTFORWARD",
              "value": "-11",
              "comment": [
                "Reference was not fast-forwardable"
              ]
            },
            {
              "name": "GIT_EINVALIDSPEC",
              "value": "-12",
              "comment": [
                "Name/ref spec was not in a valid format"
              ]
            },
            {
              "name": "GIT_ECONFLICT",
              "value": "-13",
              "comment": [
                "Checkout conflicts prevented operation"
              ]
            },
            {
              "name": "GIT_ELOCKED",
              "value": "-14",
              "comment": [
                "Lock file prevented operation"
              ]
            },
            {
              "name": "GIT_EMODIFIED",
              "value": "-15",
              "comment": [
                "Reference value does not match expected"
              ]
            },
            {
              "name": "GIT_EAUTH",
              "value": "-16",
              "comment": [
                "Authentication error"
              ]
            },
            {
              "name": "GIT_ECERTIFICATE",
              "value": "-17",
              "comment": [
                "Server certificate is invalid"
              ]
            },
            {
              "name": "GIT_EAPPLIED",
              "value": "-18",
              "comment": [
                "Patch/merge has already been applied"
              ]
            },
            {
              "name": "GIT_EPEEL",
              "value": "-19",
              "comment": [
                "The requested peel operation is not possible"
              ]
            },
            {
              "name": "GIT_EEOF",
              "value": "-20",
              "comment": [
                "Unexpected EOF"
              ]
            },
            {
              "name": "GIT_EINVALID",
              "value": "-21",
              "comment": [
                "Invalid operation or input"
              ]
            },
            {
              "name": "GIT_EUNCOMMITTED",
              "value": "-22",
              "comment": [
                "Uncommitted changes in index prevented operation"
              ]
            },
            {
              "name": "GIT_EDIRECTORY",
              "value": "-23",
              "comment": [
                "The operation is not valid for a directory"
              ]
            },
            {
              "name": "GIT_EMERGECONFLICT",
              "value": "-24",
              "comment": [
                "A merge conflict exists and cannot continue"
              ]
            },
            {
              "name": "GIT_PASSTHROUGH",
              "value": "-30",
              "comment": [
                "A user-configured callback refused to act"
              ]
            },
            {
              "name": "GIT_ITEROVER",
              "value": "-31",
              "comment": [
                "Signals end of iteration with iterator"
              ]
            },
            {
              "name": "GIT_RETRY",
              "value": "-32",
              "comment": [
                "Internal only"
              ]
            },
            {
              "name": "GIT_EMISMATCH",
              "value": "-33",
              "comment": [
                "Hashsum mismatch in object"
              ]
            },
            {
              "name": "GIT_EINDEXDIRTY",
              "value": "-34",
              "comment": [
                "Unsaved changes in the index would be overwritten"
              ]
            },
            {
              "name": "GIT_EAPPLYFAIL",
              "value": "-35",
              "comment": [
                "Patch application failed"
              ]
            }
          ],
          "comment": [
            "Generic return codes"
          ],
          "location": {
            "file": "errors.h",
            "line": 21,
            "column": 9
          },
          "group": "errors"
        },
        "git_error": {
          "kind": "struct",
          "name": "git_error",
          "referenceName": "git_error",
          "comment": [
            "Structure to store extra details of the last error that occurred.",
            "This is kept on a per-thread basis if GIT_THREADS was defined when the\n library was build, otherwise one is kept globally for the library"
          ],
          "members": [
            {
              "name": "message",
              "type": "char *"
            },
            {
              "name": "klass",
              "type": "int"
            }
          ],
          "location": {
            "file": "errors.h",
            "line": 69,
            "column": 9
          },
          "group": "errors",
          "returnedBy": [
            "giterr_last",
            "git_error_last"
          ]
        },
        "git_error_t": {
          "kind": "enum",
          "name": "git_error_t",
          "referenceName": "git_error_t",
          "members": [
            {
              "name": "GIT_ERROR_NONE",
              "value": "0"
            },
            {
              "name": "GIT_ERROR_NOMEMORY"
            },
            {
              "name": "GIT_ERROR_OS"
            },
            {
              "name": "GIT_ERROR_INVALID"
            },
            {
              "name": "GIT_ERROR_REFERENCE"
            },
            {
              "name": "GIT_ERROR_ZLIB"
            },
            {
              "name": "GIT_ERROR_REPOSITORY"
            },
            {
              "name": "GIT_ERROR_CONFIG"
            },
            {
              "name": "GIT_ERROR_REGEX"
            },
            {
              "name": "GIT_ERROR_ODB"
            },
            {
              "name": "GIT_ERROR_INDEX"
            },
            {
              "name": "GIT_ERROR_OBJECT"
            },
            {
              "name": "GIT_ERROR_NET"
            },
            {
              "name": "GIT_ERROR_TAG"
            },
            {
              "name": "GIT_ERROR_TREE"
            },
            {
              "name": "GIT_ERROR_INDEXER"
            },
            {
              "name": "GIT_ERROR_SSL"
            },
            {
              "name": "GIT_ERROR_SUBMODULE"
            },
            {
              "name": "GIT_ERROR_THREAD"
            },
            {
              "name": "GIT_ERROR_STASH"
            },
            {
              "name": "GIT_ERROR_CHECKOUT"
            },
            {
              "name": "GIT_ERROR_FETCHHEAD"
            },
            {
              "name": "GIT_ERROR_MERGE"
            },
            {
              "name": "GIT_ERROR_SSH"
            },
            {
              "name": "GIT_ERROR_FILTER"
            },
            {
              "name": "GIT_ERROR_REVERT"
            },
            {
              "name": "GIT_ERROR_CALLBACK"
            },
            {
              "name": "GIT_ERROR_CHERRYPICK"
            },
            {
              "name": "GIT_ERROR_DESCRIBE"
            },
            {
              "name": "GIT_ERROR_REBASE"
            },
            {
              "name": "GIT_ERROR_FILESYSTEM"
            },
            {
              "name": "GIT_ERROR_PATCH"
            },
            {
              "name": "GIT_ERROR_WORKTREE"
            },
            {
              "name": "GIT_ERROR_SHA1"
            },
            {
              "name": "GIT_ERROR_HTTP"
            },
            {
              "name": "GIT_ERROR_INTERNAL"
            }
          ],
          "comment": [
            "Error classes"
          ],
          "location": {
            "file": "errors.h",
            "line": 75,
            "column": 9
          },
          "group": "errors"
        },
        "git_error_last": {
          "kind": "function",
          "name": "git_error_last",
          "location": {
            "file": "errors.h",
            "line": 125,
            "column": 31
          },
          "returns": {
            "type": "const git_error *",
            "comment": "A git_error object."
          },
          "comment": [
            "Return the last `git_error` object that was generated for the\n current thread.",
            "The default behaviour of this function is to return NULL if no previous error has occurred.\n However, libgit2's error strings are not cleared aggressively, so a prior\n (unrelated) error may be returned. This can be avoided by only calling\n this function if the prior call to a libgit2 API returned an error."
          ],
          "group": "errors"
        },
        "git_error_clear": {
          "kind": "function",
          "name": "git_error_clear",
          "location": {
            "file": "errors.h",
            "line": 130,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Clear the last library error that occurred for this thread."
          ],
          "group": "errors"
        },
        "git_error_set_str": {
          "kind": "function",
          "name": "git_error_set_str",
          "location": {
            "file": "errors.h",
            "line": 149,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or -1 on failure"
          },
          "params": [
            {
              "name": "error_class",
              "type": "int",
              "direction": "in",
              "comment": "One of the `git_error_t` enum above describing the\n                    general subsystem that is responsible for the error."
            },
            {
              "name": "string",
              "type": "const char *",
              "direction": "in",
              "comment": "The formatted error message to keep"
            }
          ],
          "comment": [
            "Set the error message string for this thread.",
            "This function is public so that custom ODB backends and the like can\n relay an error message through libgit2.  Most regular users of libgit2\n will never need to call this function -- actually, calling it in most\n circumstances (for example, calling from within a callback function)\n will just end up having the value overwritten by libgit2 internals.",
            "This error message is stored in thread-local storage and only applies\n to the particular thread that this libgit2 call is made from."
          ],
          "group": "errors"
        },
        "git_error_set_oom": {
          "kind": "function",
          "name": "git_error_set_oom",
          "location": {
            "file": "errors.h",
            "line": 160,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "comment": [
            "Set the error message to a special value for memory allocation failure.",
            "The normal `git_error_set_str()` function attempts to `strdup()` the\n string that is passed in.  This is not a good idea when the error in\n question is a memory allocation failure.  That circumstance has a\n special setter function that sets the error string to a known and\n statically allocated internal value."
          ],
          "group": "errors"
        }
      },
      "info": {
        "summary": "Git error handling routines and variables"
      }
    },
    "filter": {
      "apis": {
        "git_filter_mode_t": {
          "kind": "enum",
          "name": "git_filter_mode_t",
          "referenceName": "git_filter_mode_t",
          "members": [
            {
              "name": "GIT_FILTER_TO_WORKTREE",
              "value": "0"
            },
            {
              "name": "GIT_FILTER_SMUDGE",
              "value": "0"
            },
            {
              "name": "GIT_FILTER_TO_ODB",
              "value": "1"
            },
            {
              "name": "GIT_FILTER_CLEAN",
              "value": "1"
            }
          ],
          "comment": [
            "Filters are applied in one of two directions: smudging - which is\n exporting a file from the Git object database to the working directory,\n and cleaning - which is importing a file from the working directory to\n the Git object database.  These values control which direction of\n change is being applied."
          ],
          "location": {
            "file": "filter.h",
            "line": 31,
            "column": 9
          },
          "group": "filter",
          "returnedBy": [
            "git_filter_source_mode"
          ],
          "parameterTo": [
            "git_filter_list_load",
            "git_filter_list_new"
          ]
        },
        "git_filter_flag_t": {
          "kind": "enum",
          "name": "git_filter_flag_t",
          "referenceName": "git_filter_flag_t",
          "members": [
            {
              "name": "GIT_FILTER_DEFAULT"
            },
            {
              "name": "GIT_FILTER_ALLOW_UNSAFE",
              "comment": [
                "Don't error for `safecrlf` violations, allow them to continue."
              ]
            },
            {
              "name": "GIT_FILTER_NO_SYSTEM_ATTRIBUTES",
              "comment": [
                "Don't load `/etc/gitattributes` (or the system equivalent)"
              ]
            },
            {
              "name": "GIT_FILTER_ATTRIBUTES_FROM_HEAD",
              "comment": [
                "Load attributes from `.gitattributes` in the root of HEAD"
              ]
            }
          ],
          "comment": [
            "Filter option flags."
          ],
          "location": {
            "file": "filter.h",
            "line": 41,
            "column": 9
          },
          "group": "filter"
        },
        "git_filter_list": {
          "kind": "struct",
          "name": "git_filter_list",
          "referenceName": "struct git_filter_list",
          "opaque": true,
          "comment": [
            "List of filters to be applied",
            "This represents a list of filters to be applied to a file / blob.  You\n can build the list with one call, apply it with another, and dispose it\n with a third.  In typical usage, there are not many occasions where a\n git_filter_list is needed directly since the library will generally\n handle conversions for you, but it can be convenient to be able to\n build and apply the list sometimes."
          ],
          "location": {
            "file": "filter.h",
            "line": 81,
            "column": 32
          },
          "group": "filter",
          "parameterTo": [
            "git_filter_list_load",
            "git_filter_list_contains",
            "git_filter_list_apply_to_data",
            "git_filter_list_apply_to_file",
            "git_filter_list_apply_to_blob",
            "git_filter_list_stream_data",
            "git_filter_list_stream_file",
            "git_filter_list_stream_blob",
            "git_filter_list_free",
            "git_filter_list_new",
            "git_filter_list_push",
            "git_filter_list_length"
          ]
        },
        "git_filter_list_load": {
          "kind": "function",
          "name": "git_filter_list_load",
          "location": {
            "file": "filter.h",
            "line": 98,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success (which could still return NULL if no filters are\n         needed for the requested file), \n<\n0 on error"
          },
          "params": [
            {
              "name": "filters",
              "type": "git_filter_list **",
              "direction": "in",
              "comment": "Output newly created git_filter_list (or NULL)"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository object that contains `path`"
            },
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "The blob to which the filter will be applied (if known)"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Relative path of the file to be filtered"
            },
            {
              "name": "mode",
              "type": "git_filter_mode_t",
              "direction": "in",
              "comment": "Filtering direction (WT->ODB or ODB->WT)",
              "referenceType": "enum git_filter_mode_t"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "Combination of `git_filter_flag_t` flags"
            }
          ],
          "comment": [
            "Load the filter list for a given path.",
            "This will return 0 (success) but set the output git_filter_list to NULL\n if no filters are requested for the given file."
          ],
          "group": "filter"
        },
        "git_filter_list_contains": {
          "kind": "function",
          "name": "git_filter_list_contains",
          "location": {
            "file": "filter.h",
            "line": 118,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the filter is in the list, 0 otherwise"
          },
          "params": [
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "A loaded git_filter_list (or NULL)"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the filter to query"
            }
          ],
          "comment": [
            "Query the filter list to see if a given filter (by name) will run.\n The built-in filters \"crlf\" and \"ident\" can be queried, otherwise this\n is the name of the filter specified by the filter attribute.",
            "This will return 0 if the given filter is not in the list, or 1 if\n the filter will be applied."
          ],
          "group": "filter"
        },
        "git_filter_list_apply_to_data": {
          "kind": "function",
          "name": "git_filter_list_apply_to_data",
          "location": {
            "file": "filter.h",
            "line": 142,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, an error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Buffer to store the result of the filtering"
            },
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "A loaded git_filter_list (or NULL)"
            },
            {
              "name": "in",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Buffer containing the data to filter"
            }
          ],
          "comment": [
            "Apply filter list to a data buffer.",
            "See `git2/buffer.h` for background on `git_buf` objects.",
            "If the `in` buffer holds data allocated by libgit2 (i.e. `in->asize` is\n not zero), then it will be overwritten when applying the filters.  If\n not, then it will be left untouched.",
            "If there are no filters to apply (or `filters` is NULL), then the `out`\n buffer will reference the `in` buffer data (with `asize` set to zero)\n instead of allocating data.  This keeps allocations to a minimum, but\n it means you have to be careful about freeing the `in` data since `out`\n may be pointing to it!"
          ],
          "group": "filter"
        },
        "git_filter_list_apply_to_file": {
          "kind": "function",
          "name": "git_filter_list_apply_to_file",
          "location": {
            "file": "filter.h",
            "line": 156,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer into which to store the filtered file"
            },
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "the list of filters to apply"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to perform the filtering"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path of the file to filter, a relative path will be\n taken as relative to the workdir"
            }
          ],
          "comment": [
            "Apply a filter list to the contents of a file on disk"
          ],
          "group": "filter"
        },
        "git_filter_list_apply_to_blob": {
          "kind": "function",
          "name": "git_filter_list_apply_to_blob",
          "location": {
            "file": "filter.h",
            "line": 169,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer into which to store the filtered file"
            },
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "the list of filters to apply"
            },
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "the blob to filter"
            }
          ],
          "comment": [
            "Apply a filter list to the contents of a blob"
          ],
          "group": "filter"
        },
        "git_filter_list_stream_data": {
          "kind": "function",
          "name": "git_filter_list_stream_data",
          "location": {
            "file": "filter.h",
            "line": 181,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "the list of filters to apply"
            },
            {
              "name": "data",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the buffer to filter"
            },
            {
              "name": "target",
              "type": "git_writestream *",
              "direction": "in",
              "comment": "the stream into which the data will be written"
            }
          ],
          "comment": [
            "Apply a filter list to an arbitrary buffer as a stream"
          ],
          "group": "filter"
        },
        "git_filter_list_stream_file": {
          "kind": "function",
          "name": "git_filter_list_stream_file",
          "location": {
            "file": "filter.h",
            "line": 195,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "the list of filters to apply"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to perform the filtering"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path of the file to filter, a relative path will be\n taken as relative to the workdir"
            },
            {
              "name": "target",
              "type": "git_writestream *",
              "direction": "in",
              "comment": "the stream into which the data will be written"
            }
          ],
          "comment": [
            "Apply a filter list to a file as a stream"
          ],
          "group": "filter"
        },
        "git_filter_list_stream_blob": {
          "kind": "function",
          "name": "git_filter_list_stream_blob",
          "location": {
            "file": "filter.h",
            "line": 208,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "the list of filters to apply"
            },
            {
              "name": "blob",
              "type": "git_blob *",
              "direction": "in",
              "comment": "the blob to filter"
            },
            {
              "name": "target",
              "type": "git_writestream *",
              "direction": "in",
              "comment": "the stream into which the data will be written"
            }
          ],
          "comment": [
            "Apply a filter list to a blob as a stream"
          ],
          "group": "filter"
        },
        "git_filter_list_free": {
          "kind": "function",
          "name": "git_filter_list_free",
          "location": {
            "file": "filter.h",
            "line": 218,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "filters",
              "type": "git_filter_list *",
              "direction": "in",
              "comment": "A git_filter_list created by `git_filter_list_load`"
            }
          ],
          "comment": [
            "Free a git_filter_list"
          ],
          "group": "filter"
        }
      },
      "info": {
        "summary": "Git filter APIs"
      }
    },
    "sys/filter": {
      "apis": {
        "git_filter_lookup": {
          "kind": "function",
          "name": "git_filter_lookup",
          "location": {
            "file": "sys/filter.h",
            "line": 27,
            "column": 26
          },
          "returns": {
            "type": "git_filter *",
            "comment": "Pointer to the filter object or NULL if not found"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the filter"
            }
          ],
          "comment": [
            "Look up a filter by name"
          ],
          "group": "sys/filter"
        },
        "GIT_FILTER_CRLF": {
          "kind": "macro",
          "name": "GIT_FILTER_CRLF",
          "location": {
            "file": "sys/filter.h",
            "line": 29,
            "column": 9
          },
          "value": "\"crlf\"",
          "comment": "",
          "group": "sys/filter"
        },
        "GIT_FILTER_IDENT": {
          "kind": "macro",
          "name": "GIT_FILTER_IDENT",
          "location": {
            "file": "sys/filter.h",
            "line": 30,
            "column": 9
          },
          "value": "\"ident\"",
          "comment": "",
          "group": "sys/filter"
        },
        "GIT_FILTER_CRLF_PRIORITY": {
          "kind": "macro",
          "name": "GIT_FILTER_CRLF_PRIORITY",
          "location": {
            "file": "sys/filter.h",
            "line": 35,
            "column": 9
          },
          "value": "0",
          "comment": "This is priority that the internal CRLF filter will be registered with",
          "group": "sys/filter"
        },
        "GIT_FILTER_IDENT_PRIORITY": {
          "kind": "macro",
          "name": "GIT_FILTER_IDENT_PRIORITY",
          "location": {
            "file": "sys/filter.h",
            "line": 40,
            "column": 9
          },
          "value": "100",
          "comment": "This is priority that the internal ident filter will be registered with",
          "group": "sys/filter"
        },
        "GIT_FILTER_DRIVER_PRIORITY": {
          "kind": "macro",
          "name": "GIT_FILTER_DRIVER_PRIORITY",
          "location": {
            "file": "sys/filter.h",
            "line": 47,
            "column": 9
          },
          "value": "200",
          "comment": "This is priority to use with a custom filter to imitate a core Git filter driver, so that it will be run last on checkout and first on checkin.  You do not have to use this, but it helps compatibility.",
          "group": "sys/filter"
        },
        "git_filter_list_new": {
          "kind": "function",
          "name": "git_filter_list_new",
          "location": {
            "file": "sys/filter.h",
            "line": 57,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_filter_list **"
            },
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "mode",
              "type": "git_filter_mode_t",
              "referenceType": "enum git_filter_mode_t"
            },
            {
              "name": "options",
              "type": "uint32_t"
            }
          ],
          "comment": [
            "Create a new empty filter list",
            "Normally you won't use this because `git_filter_list_load` will create\n the filter list for you, but you can use this in combination with the\n `git_filter_lookup` and `git_filter_list_push` functions to assemble\n your own chains of filters."
          ],
          "group": "sys/filter"
        },
        "git_filter_list_push": {
          "kind": "function",
          "name": "git_filter_list_push",
          "location": {
            "file": "sys/filter.h",
            "line": 76,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "fl",
              "type": "git_filter_list *"
            },
            {
              "name": "filter",
              "type": "git_filter *"
            },
            {
              "name": "payload",
              "type": "void *"
            }
          ],
          "comment": [
            "Add a filter to a filter list with the given payload.",
            "Normally you won't have to do this because the filter list is created\n by calling the \"check\" function on registered filters when the filter\n attributes are set, but this does allow more direct manipulation of\n filter lists when desired.",
            "Note that normally the \"check\" function can set up a payload for the\n filter.  Using this function, you can either pass in a payload if you\n know the expected payload format, or you can pass NULL.  Some filters\n may fail with a NULL payload.  Good luck!"
          ],
          "group": "sys/filter"
        },
        "git_filter_list_length": {
          "kind": "function",
          "name": "git_filter_list_length",
          "location": {
            "file": "sys/filter.h",
            "line": 90,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "The number of filters in the list"
          },
          "params": [
            {
              "name": "fl",
              "type": "const git_filter_list *",
              "direction": "in",
              "comment": "A filter list"
            }
          ],
          "comment": [
            "Look up how many filters are in the list",
            "We will attempt to apply all of these filters to any data passed in,\n but note that the filter apply action still has the option of skipping\n data that is passed in (for example, the CRLF filter will skip data\n that appears to be binary)."
          ],
          "group": "sys/filter"
        },
        "git_filter_source": {
          "kind": "struct",
          "name": "git_filter_source",
          "referenceName": "struct git_filter_source",
          "opaque": true,
          "comment": [
            "A filter source represents a file/blob to be processed"
          ],
          "location": {
            "file": "sys/filter.h",
            "line": 95,
            "column": 34
          },
          "group": "sys/filter",
          "parameterTo": [
            "git_filter_source_repo",
            "git_filter_source_path",
            "git_filter_source_filemode",
            "git_filter_source_id",
            "git_filter_source_mode",
            "git_filter_source_flags",
            "git_filter_check_fn",
            "git_filter_apply_fn",
            "git_filter_stream_fn"
          ]
        },
        "git_filter_source_repo": {
          "kind": "function",
          "name": "git_filter_source_repo",
          "location": {
            "file": "sys/filter.h",
            "line": 100,
            "column": 30
          },
          "returns": {
            "type": "git_repository *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_filter_source *"
            }
          ],
          "comment": [
            "Get the repository that the source data is coming from."
          ],
          "group": "sys/filter"
        },
        "git_filter_source_path": {
          "kind": "function",
          "name": "git_filter_source_path",
          "location": {
            "file": "sys/filter.h",
            "line": 105,
            "column": 26
          },
          "returns": {
            "type": "const char *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_filter_source *"
            }
          ],
          "comment": [
            "Get the path that the source data is coming from."
          ],
          "group": "sys/filter"
        },
        "git_filter_source_filemode": {
          "kind": "function",
          "name": "git_filter_source_filemode",
          "location": {
            "file": "sys/filter.h",
            "line": 111,
            "column": 22
          },
          "returns": {
            "type": "uint16_t"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_filter_source *"
            }
          ],
          "comment": [
            "Get the file mode of the source file\n If the mode is unknown, this will return 0"
          ],
          "group": "sys/filter"
        },
        "git_filter_source_id": {
          "kind": "function",
          "name": "git_filter_source_id",
          "location": {
            "file": "sys/filter.h",
            "line": 118,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_filter_source *"
            }
          ],
          "comment": [
            "Get the OID of the source\n If the OID is unknown (often the case with GIT_FILTER_CLEAN) then\n this will return NULL."
          ],
          "group": "sys/filter"
        },
        "git_filter_source_mode": {
          "kind": "function",
          "name": "git_filter_source_mode",
          "location": {
            "file": "sys/filter.h",
            "line": 123,
            "column": 31
          },
          "returns": {
            "type": "git_filter_mode_t"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_filter_source *"
            }
          ],
          "comment": [
            "Get the git_filter_mode_t to be used"
          ],
          "group": "sys/filter"
        },
        "git_filter_source_flags": {
          "kind": "function",
          "name": "git_filter_source_flags",
          "location": {
            "file": "sys/filter.h",
            "line": 128,
            "column": 22
          },
          "returns": {
            "type": "uint32_t"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_filter_source *"
            }
          ],
          "comment": [
            "Get the combination git_filter_flag_t options to be applied"
          ],
          "group": "sys/filter"
        },
        "git_filter_init_fn": {
          "kind": "callback",
          "name": "git_filter_init_fn",
          "type": "int (*)(git_filter *)",
          "comment": [
            "Initialize callback on filter",
            "Specified as `filter.initialize`, this is an optional callback invoked\n before a filter is first used.  It will be called once at most.",
            "If non-NULL, the filter's `initialize` callback will be invoked right\n before the first use of the filter, so you can defer expensive\n initialization operations (in case libgit2 is being used in a way that\n doesn't need the filter)."
          ],
          "location": {
            "file": "sys/filter.h",
            "line": 141,
            "column": 26
          },
          "params": [
            {
              "type": "git_filter *"
            }
          ],
          "group": "sys/filter",
          "typedef": true
        },
        "git_filter_shutdown_fn": {
          "kind": "callback",
          "name": "git_filter_shutdown_fn",
          "type": "void (*)(git_filter *)",
          "comment": [
            "Shutdown callback on filter",
            "Specified as `filter.shutdown`, this is an optional callback invoked\n when the filter is unregistered or when libgit2 is shutting down.  It\n will be called once at most and should release resources as needed.\n This may be called even if the `initialize` callback was not made.",
            "Typically this function will free the `git_filter` object itself."
          ],
          "location": {
            "file": "sys/filter.h",
            "line": 153,
            "column": 27
          },
          "params": [
            {
              "type": "git_filter *"
            }
          ],
          "returns": {
            "type": "void"
          },
          "group": "sys/filter",
          "typedef": true
        },
        "git_filter_check_fn": {
          "kind": "callback",
          "name": "git_filter_check_fn",
          "type": "int (*)(git_filter *, void **, const git_filter_source *, const char **)",
          "comment": [
            "Callback to decide if a given source needs this filter",
            "Specified as `filter.check`, this is an optional callback that checks\n if filtering is needed for a given source.",
            "It should return 0 if the filter should be applied (i.e. success),\n GIT_PASSTHROUGH if the filter should not be applied, or an error code\n to fail out of the filter processing pipeline and return to the caller.",
            "The `attr_values` will be set to the values of any attributes given in\n the filter definition.  See `git_filter` below for more detail.",
            "The `payload` will be a pointer to a reference payload for the filter.\n This will start as NULL, but `check` can assign to this pointer for\n later use by the `apply` callback.  Note that the value should be heap\n allocated (not stack), so that it doesn't go away before the `apply`\n callback can use it.  If a filter allocates and assigns a value to the\n `payload`, it will need a `cleanup` callback to free the payload."
          ],
          "location": {
            "file": "sys/filter.h",
            "line": 175,
            "column": 26
          },
          "params": [
            {
              "type": "git_filter *"
            },
            {
              "type": "void **"
            },
            {
              "type": "const git_filter_source *"
            },
            {
              "type": "const char **"
            }
          ],
          "group": "sys/filter",
          "typedef": true
        },
        "git_filter_apply_fn": {
          "kind": "callback",
          "name": "git_filter_apply_fn",
          "type": "int (*)(git_filter *, void **, git_buf *, const git_buf *, const git_filter_source *)",
          "comment": [
            "Callback to actually perform the data filtering",
            "Specified as `filter.apply`, this is the callback that actually filters\n data.  If it successfully writes the output, it should return 0.  Like\n `check`, it can return GIT_PASSTHROUGH to indicate that the filter\n doesn't want to run.  Other error codes will stop filter processing and\n return to the caller.",
            "The `payload` value will refer to any payload that was set by the\n `check` callback.  It may be read from or written to as needed."
          ],
          "location": {
            "file": "sys/filter.h",
            "line": 193,
            "column": 26
          },
          "params": [
            {
              "type": "git_filter *"
            },
            {
              "type": "void **"
            },
            {
              "type": "git_buf *"
            },
            {
              "type": "const git_buf *"
            },
            {
              "type": "const git_filter_source *"
            }
          ],
          "group": "sys/filter",
          "typedef": true
        },
        "git_filter_stream_fn": {
          "kind": "callback",
          "name": "git_filter_stream_fn",
          "type": "int (*)(git_writestream **, git_filter *, void **, const git_filter_source *, git_writestream *)",
          "location": {
            "file": "sys/filter.h",
            "line": 200,
            "column": 26
          },
          "params": [
            {
              "type": "git_writestream **"
            },
            {
              "type": "git_filter *"
            },
            {
              "type": "void **"
            },
            {
              "type": "const git_filter_source *"
            },
            {
              "type": "git_writestream *"
            }
          ],
          "group": "sys/filter",
          "typedef": true
        },
        "git_filter_cleanup_fn": {
          "kind": "callback",
          "name": "git_filter_cleanup_fn",
          "type": "void (*)(git_filter *, void *)",
          "comment": [
            "Callback to clean up after filtering has been applied",
            "Specified as `filter.cleanup`, this is an optional callback invoked\n after the filter has been applied.  If the `check` or `apply` callbacks\n allocated a `payload` to keep per-source filter state, use this\n callback to free that payload and release resources as required."
          ],
          "location": {
            "file": "sys/filter.h",
            "line": 215,
            "column": 27
          },
          "params": [
            {
              "type": "git_filter *"
            },
            {
              "type": "void *"
            }
          ],
          "returns": {
            "type": "void"
          },
          "group": "sys/filter",
          "typedef": true
        },
        "git_filter": {
          "kind": "struct",
          "name": "git_filter",
          "referenceName": "struct git_filter",
          "comment": [
            "Filter structure used to register custom filters.",
            "To associate extra data with a filter, allocate extra data and put the\n `git_filter` struct at the start of your data buffer, then cast the\n `self` pointer to your larger structure when your callback is invoked."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The `version` field should be set to `GIT_FILTER_VERSION`."
              ]
            },
            {
              "name": "attributes",
              "type": "const char *",
              "comment": [
                "A whitespace-separated list of attribute names to check for this\n filter (e.g. \"eol crlf text\").  If the attribute name is bare, it\n will be simply loaded and passed to the `check` callback.  If it\n has a value (i.e. \"name=value\"), the attribute must match that\n value for the filter to be applied.  The value may be a wildcard\n (eg, \"name=*\"), in which case the filter will be invoked for any\n value for the given attribute name.  See the attribute parameter\n of the `check` callback for the attribute value that was specified."
              ]
            },
            {
              "name": "initialize",
              "type": "git_filter_init_fn",
              "comment": [
                "Called when the filter is first used for any file."
              ],
              "referenceType": "int (*)(git_filter *)"
            },
            {
              "name": "shutdown",
              "type": "git_filter_shutdown_fn",
              "comment": [
                "Called when the filter is removed or unregistered from the system."
              ],
              "referenceType": "void (*)(git_filter *)"
            },
            {
              "name": "check",
              "type": "git_filter_check_fn",
              "comment": [
                "Called to determine whether the filter should be invoked for a\n given file.  If this function returns `GIT_PASSTHROUGH` then the\n `apply` function will not be invoked and the contents will be passed\n through unmodified."
              ],
              "referenceType": "int (*)(git_filter *, void **, const git_filter_source *, const char **)"
            },
            {
              "name": "apply",
              "type": "git_filter_apply_fn",
              "comment": [
                "Called to actually apply the filter to file contents.  If this\n function returns `GIT_PASSTHROUGH` then the contents will be passed\n through unmodified."
              ],
              "referenceType": "int (*)(git_filter *, void **, git_buf *, const git_buf *, const git_filter_source *)"
            },
            {
              "name": "stream",
              "type": "git_filter_stream_fn",
              "comment": [
                "Called to apply the filter in a streaming manner.  If this is not\n specified then the system will call `apply` with the whole buffer."
              ],
              "referenceType": "int (*)(git_writestream **, git_filter *, void **, const git_filter_source *, git_writestream *)"
            },
            {
              "name": "cleanup",
              "type": "git_filter_cleanup_fn",
              "comment": [
                "Called when the system is done filtering for a file."
              ],
              "referenceType": "void (*)(git_filter *, void *)"
            }
          ],
          "location": {
            "file": "sys/filter.h",
            "line": 226,
            "column": 8
          },
          "group": "sys/filter",
          "returnedBy": [
            "git_filter_lookup"
          ],
          "parameterTo": [
            "git_filter_list_push",
            "git_filter_init_fn",
            "git_filter_shutdown_fn",
            "git_filter_check_fn",
            "git_filter_apply_fn",
            "git_filter_stream_fn",
            "git_filter_cleanup_fn",
            "git_filter_init",
            "git_filter_register"
          ]
        },
        "GIT_FILTER_VERSION": {
          "kind": "macro",
          "name": "GIT_FILTER_VERSION",
          "location": {
            "file": "sys/filter.h",
            "line": 273,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/filter"
        },
        "GIT_FILTER_INIT": {
          "kind": "macro",
          "name": "GIT_FILTER_INIT",
          "location": {
            "file": "sys/filter.h",
            "line": 274,
            "column": 9
          },
          "value": "{GIT_FILTER_VERSION}",
          "comment": "",
          "group": "sys/filter"
        },
        "git_filter_init": {
          "kind": "function",
          "name": "git_filter_init",
          "location": {
            "file": "sys/filter.h",
            "line": 284,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "filter",
              "type": "git_filter *",
              "direction": "in",
              "comment": "the `git_filter` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Version the struct; pass `GIT_FILTER_VERSION`"
            }
          ],
          "comment": [
            "Initializes a `git_filter` with default values. Equivalent to\n creating an instance with GIT_FILTER_INIT."
          ],
          "group": "sys/filter"
        },
        "git_filter_register": {
          "kind": "function",
          "name": "git_filter_register",
          "location": {
            "file": "sys/filter.h",
            "line": 312,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on successful registry, error code \n<\n0 on failure"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "A name by which the filter can be referenced.  Attempting\n \t\t\tto register with an in-use name will return GIT_EEXISTS."
            },
            {
              "name": "filter",
              "type": "git_filter *",
              "direction": "in",
              "comment": "The filter definition.  This pointer will be stored as is\n \t\t\tby libgit2 so it must be a durable allocation (either static\n \t\t\tor on the heap)."
            },
            {
              "name": "priority",
              "type": "int",
              "direction": "in",
              "comment": "The priority for filter application"
            }
          ],
          "comment": [
            "Register a filter under a given name with a given priority.",
            "As mentioned elsewhere, the initialize callback will not be invoked\n immediately.  It is deferred until the filter is used in some way.",
            "A filter's attribute checks and `check` and `apply` callbacks will be\n issued in order of `priority` on smudge (to workdir), and in reverse\n order of `priority` on clean (to odb).",
            "Two filters are preregistered with libgit2:\n - GIT_FILTER_CRLF with priority 0\n - GIT_FILTER_IDENT with priority 100",
            "Currently the filter registry is not thread safe, so any registering or\n deregistering of filters must be done outside of any possible usage of\n the filters (i.e. during application setup or shutdown)."
          ],
          "group": "sys/filter"
        },
        "git_filter_unregister": {
          "kind": "function",
          "name": "git_filter_unregister",
          "location": {
            "file": "sys/filter.h",
            "line": 328,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, error code \n<\n0 on failure"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name under which the filter was registered"
            }
          ],
          "comment": [
            "Remove the filter with the given name",
            "Attempting to remove the builtin libgit2 filters is not permitted and\n will return an error.",
            "Currently the filter registry is not thread safe, so any registering or\n deregistering of filters must be done outside of any possible usage of\n the filters (i.e. during application setup or shutdown)."
          ],
          "group": "sys/filter"
        }
      },
      "info": {
        "summary": "Git filter backend and plugin routines"
      }
    },
    "global": {
      "apis": {
        "git_libgit2_init": {
          "kind": "function",
          "name": "git_libgit2_init",
          "location": {
            "file": "global.h",
            "line": 26,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the number of initializations of the library, or an error code."
          },
          "comment": [
            "Init the global state",
            "This function must be called before any other libgit2 function in\n order to set up global state and threading.",
            "This function may be called multiple times - it will return the number\n of times the initialization has been called (including this one) that have\n not subsequently been shutdown."
          ],
          "group": "global"
        },
        "git_libgit2_shutdown": {
          "kind": "function",
          "name": "git_libgit2_shutdown",
          "location": {
            "file": "global.h",
            "line": 39,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the number of remaining initializations of the library, or an\n error code."
          },
          "comment": [
            "Shutdown the global state",
            "Clean up the global state and threading context after calling it as\n many times as `git_libgit2_init()` was called - it will return the\n number of remainining initializations that have not been shutdown\n (after this one)."
          ],
          "group": "global"
        }
      },
      "info": {}
    },
    "graph": {
      "apis": {
        "git_graph_ahead_behind": {
          "kind": "function",
          "name": "git_graph_ahead_behind",
          "location": {
            "file": "graph.h",
            "line": 37,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "ahead",
              "type": "size_t *",
              "direction": "in",
              "comment": "number of unique from commits in `upstream`"
            },
            {
              "name": "behind",
              "type": "size_t *",
              "direction": "in",
              "comment": "number of unique from commits in `local`"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the commits exist"
            },
            {
              "name": "local",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the commit for local"
            },
            {
              "name": "upstream",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the commit for upstream"
            }
          ],
          "comment": [
            "Count the number of unique commits between two commit objects",
            "There is no need for branches containing the commits to have any\n upstream relationship, but it helps to think of one as a branch and\n the other as its upstream, the `ahead` and `behind` values will be\n what git would report for the branches."
          ],
          "group": "graph"
        },
        "git_graph_descendant_of": {
          "kind": "function",
          "name": "git_graph_descendant_of",
          "location": {
            "file": "graph.h",
            "line": 51,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the given commit is a descendant of the potential ancestor,\n 0 if not, error code otherwise."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "commit",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "a previously loaded commit."
            },
            {
              "name": "ancestor",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "a potential ancestor commit."
            }
          ],
          "comment": [
            "Determine if a commit is the descendant of another commit.",
            "Note that a commit is not considered a descendant of itself, in contrast\n to `git merge-base --is-ancestor`."
          ],
          "group": "graph"
        }
      },
      "info": {
        "summary": "Git graph traversal routines"
      }
    },
    "sys/hashsig": {
      "apis": {
        "git_hashsig": {
          "kind": "struct",
          "name": "git_hashsig",
          "referenceName": "struct git_hashsig",
          "opaque": true,
          "comment": [
            "Similarity signature of arbitrary text content based on line hashes"
          ],
          "location": {
            "file": "sys/hashsig.h",
            "line": 17,
            "column": 28
          },
          "group": "sys/hashsig",
          "parameterTo": [
            "git_hashsig_create",
            "git_hashsig_create_fromfile",
            "git_hashsig_free",
            "git_hashsig_compare"
          ]
        },
        "git_hashsig_option_t": {
          "kind": "enum",
          "name": "git_hashsig_option_t",
          "referenceName": "git_hashsig_option_t",
          "members": [
            {
              "name": "GIT_HASHSIG_NORMAL",
              "value": "0",
              "comment": [
                "Use all data"
              ]
            },
            {
              "name": "GIT_HASHSIG_IGNORE_WHITESPACE",
              "value": "1",
              "comment": [
                "Ignore whitespace"
              ]
            },
            {
              "name": "GIT_HASHSIG_SMART_WHITESPACE",
              "value": "2",
              "comment": [
                "Ignore \\r\n and all space after \\n"
              ]
            },
            {
              "name": "GIT_HASHSIG_ALLOW_SMALL_FILES",
              "value": "4",
              "comment": [
                "Allow hashing of small files"
              ]
            }
          ],
          "comment": [
            "Options for hashsig computation",
            "The options GIT_HASHSIG_NORMAL, GIT_HASHSIG_IGNORE_WHITESPACE,\n GIT_HASHSIG_SMART_WHITESPACE are exclusive and should not be combined."
          ],
          "location": {
            "file": "sys/hashsig.h",
            "line": 25,
            "column": 9
          },
          "group": "sys/hashsig",
          "parameterTo": [
            "git_hashsig_create",
            "git_hashsig_create_fromfile"
          ]
        },
        "git_hashsig_create": {
          "kind": "function",
          "name": "git_hashsig_create",
          "location": {
            "file": "sys/hashsig.h",
            "line": 62,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EBUFS if the buffer doesn't contain enough data to\n compute a valid signature (unless GIT_HASHSIG_ALLOW_SMALL_FILES is set), or\n error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_hashsig **",
              "direction": "in",
              "comment": "The computed similarity signature."
            },
            {
              "name": "buf",
              "type": "const char *",
              "direction": "in",
              "comment": "The input buffer."
            },
            {
              "name": "buflen",
              "type": "size_t",
              "direction": "in",
              "comment": "The input buffer size."
            },
            {
              "name": "opts",
              "type": "git_hashsig_option_t",
              "direction": "in",
              "comment": "The signature computation options (see above).",
              "referenceType": "enum git_hashsig_option_t"
            }
          ],
          "comment": [
            "Compute a similarity signature for a text buffer",
            "If you have passed the option GIT_HASHSIG_IGNORE_WHITESPACE, then the\n whitespace will be removed from the buffer while it is being processed,\n modifying the buffer in place. Sorry about that!"
          ],
          "group": "sys/hashsig"
        },
        "git_hashsig_create_fromfile": {
          "kind": "function",
          "name": "git_hashsig_create_fromfile",
          "location": {
            "file": "sys/hashsig.h",
            "line": 81,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EBUFS if the buffer doesn't contain enough data to\n compute a valid signature (unless GIT_HASHSIG_ALLOW_SMALL_FILES is set), or\n error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_hashsig **",
              "direction": "in",
              "comment": "The computed similarity signature."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to the input file."
            },
            {
              "name": "opts",
              "type": "git_hashsig_option_t",
              "direction": "in",
              "comment": "The signature computation options (see above).",
              "referenceType": "enum git_hashsig_option_t"
            }
          ],
          "comment": [
            "Compute a similarity signature for a text file",
            "This walks through the file, only loading a maximum of 4K of file data at\n a time. Otherwise, it acts just like `git_hashsig_create`."
          ],
          "group": "sys/hashsig"
        },
        "git_hashsig_free": {
          "kind": "function",
          "name": "git_hashsig_free",
          "location": {
            "file": "sys/hashsig.h",
            "line": 91,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "sig",
              "type": "git_hashsig *",
              "direction": "in",
              "comment": "The similarity signature to free."
            }
          ],
          "comment": [
            "Release memory for a content similarity signature"
          ],
          "group": "sys/hashsig"
        },
        "git_hashsig_compare": {
          "kind": "function",
          "name": "git_hashsig_compare",
          "location": {
            "file": "sys/hashsig.h",
            "line": 100,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "[0 to 100] on success as the similarity score, or error code."
          },
          "params": [
            {
              "name": "a",
              "type": "const git_hashsig *",
              "direction": "in",
              "comment": "The first similarity signature to compare."
            },
            {
              "name": "b",
              "type": "const git_hashsig *",
              "direction": "in",
              "comment": "The second similarity signature to compare."
            }
          ],
          "comment": [
            "Measure similarity score between two similarity signatures"
          ],
          "group": "sys/hashsig"
        }
      },
      "info": {}
    },
    "ignore": {
      "apis": {
        "git_ignore_add_rule": {
          "kind": "function",
          "name": "git_ignore_add_rule",
          "location": {
            "file": "ignore.h",
            "line": 37,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository to add ignore rules to."
            },
            {
              "name": "rules",
              "type": "const char *",
              "direction": "in",
              "comment": "Text of rules, a la the contents of a .gitignore file.\n              It is okay to have multiple rules in the text; if so,\n              each rule should be terminated with a newline."
            }
          ],
          "comment": [
            "Add ignore rules for a repository.",
            "Excludesfile rules (i.e. .gitignore rules) are generally read from\n .gitignore files in the repository tree or from a shared system file\n only if a \"core.excludesfile\" config value is set.  The library also\n keeps a set of per-repository internal ignores that can be configured\n in-memory and will not persist.  This function allows you to add to\n that internal rules list.",
            "Example usage:",
            "error = git_ignore_add_rule(myrepo, \"*.c\\ndir/\\nFile with space\\n\");",
            "This would add three rules to the ignores."
          ],
          "group": "ignore"
        },
        "git_ignore_clear_internal_rules": {
          "kind": "function",
          "name": "git_ignore_clear_internal_rules",
          "location": {
            "file": "ignore.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository to remove ignore rules from."
            }
          ],
          "comment": [
            "Clear ignore rules that were explicitly added.",
            "Resets to the default internal ignore rules.  This will not turn off\n rules in .gitignore files that actually exist in the filesystem.",
            "The default internal ignores ignore \".\", \"..\" and \".git\" entries."
          ],
          "group": "ignore"
        },
        "git_ignore_path_is_ignored": {
          "kind": "function",
          "name": "git_ignore_path_is_ignored",
          "location": {
            "file": "ignore.h",
            "line": 71,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if ignore rules could be processed for the file (regardless\n         of whether it exists or not), or an error \n<\n 0 if they could not."
          },
          "params": [
            {
              "name": "ignored",
              "type": "int *",
              "direction": "in",
              "comment": "boolean returning 0 if the file is not ignored, 1 if it is"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the file to check ignores for, relative to the repo's workdir."
            }
          ],
          "comment": [
            "Test if the ignore rules apply to a given path.",
            "This function checks the ignore rules to see if they would apply to the\n given file.  This indicates if the file would be ignored regardless of\n whether the file is already in the index or committed to the repository.",
            "One way to think of this is if you were to do \"git check-ignore --no-index\"\n on the given file, would it be shown or not?"
          ],
          "group": "ignore"
        }
      },
      "info": {}
    },
    "index": {
      "apis": {
        "git_index_time": {
          "kind": "struct",
          "name": "git_index_time",
          "referenceName": "git_index_time",
          "comment": [
            "Time structure used in a git index entry"
          ],
          "members": [
            {
              "name": "seconds",
              "type": "int32_t"
            },
            {
              "name": "nanoseconds",
              "type": "uint32_t"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 26,
            "column": 9
          },
          "group": "index"
        },
        "git_index_entry": {
          "kind": "struct",
          "name": "git_index_entry",
          "referenceName": "git_index_entry",
          "comment": [
            "In-memory representation of a file entry in the index.",
            "This is a public structure that represents a file entry in the index.\n The meaning of the fields corresponds to core Git's documentation (in\n \"Documentation/technical/index-format.txt\").",
            "The `flags` field consists of a number of bit fields which can be\n accessed via the first set of `GIT_INDEX_ENTRY_...` bitmasks below.\n These flags are all read from and persisted to disk.",
            "The `flags_extended` field also has a number of bit fields which can be\n accessed via the later `GIT_INDEX_ENTRY_...` bitmasks below.  Some of\n these flags are read from and written to disk, but some are set aside\n for in-memory only reference.",
            "Note that the time and size fields are truncated to 32 bits. This\n is enough to detect changes, which is enough for the index to\n function as a cache, but it should not be taken as an authoritative\n source for that data."
          ],
          "members": [
            {
              "name": "ctime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "mtime",
              "type": "git_index_time",
              "referenceType": "struct git_index_time"
            },
            {
              "name": "dev",
              "type": "uint32_t"
            },
            {
              "name": "ino",
              "type": "uint32_t"
            },
            {
              "name": "mode",
              "type": "uint32_t"
            },
            {
              "name": "uid",
              "type": "uint32_t"
            },
            {
              "name": "gid",
              "type": "uint32_t"
            },
            {
              "name": "file_size",
              "type": "uint32_t"
            },
            {
              "name": "id",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "flags",
              "type": "uint16_t"
            },
            {
              "name": "flags_extended",
              "type": "uint16_t"
            },
            {
              "name": "path",
              "type": "const char *"
            }
          ],
          "location": {
            "file": "index.h",
            "line": 53,
            "column": 16
          },
          "group": "index",
          "returnedBy": [
            "git_index_get_byindex",
            "git_index_get_bypath",
            "git_merge_driver_source_ancestor",
            "git_merge_driver_source_ours",
            "git_merge_driver_source_theirs"
          ],
          "parameterTo": [
            "git_index_add_frombuffer",
            "git_index_add",
            "git_index_entry_stage",
            "git_index_entry_is_conflict",
            "git_index_iterator_next",
            "git_index_add_from_buffer",
            "git_index_conflict_add",
            "git_index_conflict_get",
            "git_index_conflict_next",
            "git_merge_file_from_index"
          ]
        },
        "GIT_INDEX_ENTRY_NAMEMASK": {
          "kind": "macro",
          "name": "GIT_INDEX_ENTRY_NAMEMASK",
          "location": {
            "file": "index.h",
            "line": 80,
            "column": 9
          },
          "value": "(0x0fff)",
          "comment": "",
          "group": "index"
        },
        "GIT_INDEX_ENTRY_STAGEMASK": {
          "kind": "macro",
          "name": "GIT_INDEX_ENTRY_STAGEMASK",
          "location": {
            "file": "index.h",
            "line": 81,
            "column": 9
          },
          "value": "(0x3000)",
          "comment": "",
          "group": "index"
        },
        "GIT_INDEX_ENTRY_STAGESHIFT": {
          "kind": "macro",
          "name": "GIT_INDEX_ENTRY_STAGESHIFT",
          "location": {
            "file": "index.h",
            "line": 82,
            "column": 9
          },
          "value": "12",
          "comment": "",
          "group": "index"
        },
        "git_index_entry_flag_t": {
          "kind": "enum",
          "name": "git_index_entry_flag_t",
          "referenceName": "git_index_entry_flag_t",
          "members": [
            {
              "name": "GIT_INDEX_ENTRY_EXTENDED",
              "value": "16384"
            },
            {
              "name": "GIT_INDEX_ENTRY_VALID",
              "value": "32768"
            }
          ],
          "comment": [
            "Flags for index entries"
          ],
          "location": {
            "file": "index.h",
            "line": 87,
            "column": 9
          },
          "group": "index"
        },
        "GIT_INDEX_ENTRY_STAGE(E)": {
          "kind": "macro",
          "name": "GIT_INDEX_ENTRY_STAGE(E)",
          "location": {
            "file": "index.h",
            "line": 93,
            "column": 9
          },
          "value": " (((E)->flags & GIT_INDEX_ENTRY_STAGEMASK) >> GIT_INDEX_ENTRY_STAGESHIFT)",
          "comment": "",
          "group": "index"
        },
        "GIT_INDEX_ENTRY_STAGE_SET(E,S)": {
          "kind": "macro",
          "name": "GIT_INDEX_ENTRY_STAGE_SET(E,S)",
          "location": {
            "file": "index.h",
            "line": 97,
            "column": 9
          },
          "value": "do { (E)->flags = ((E)->flags & ~GIT_INDEX_ENTRY_STAGEMASK) | (((S) & 0x03) << GIT_INDEX_ENTRY_STAGESHIFT); } while (0)",
          "comment": "",
          "group": "index"
        },
        "git_index_entry_extended_flag_t": {
          "kind": "enum",
          "name": "git_index_entry_extended_flag_t",
          "referenceName": "git_index_entry_extended_flag_t",
          "members": [
            {
              "name": "GIT_INDEX_ENTRY_INTENT_TO_ADD",
              "value": "8192"
            },
            {
              "name": "GIT_INDEX_ENTRY_SKIP_WORKTREE",
              "value": "16384"
            },
            {
              "name": "GIT_INDEX_ENTRY_EXTENDED_FLAGS",
              "value": "24576"
            },
            {
              "name": "GIT_INDEX_ENTRY_UPTODATE",
              "value": "4"
            }
          ],
          "comment": [
            "Bitmasks for on-disk fields of `git_index_entry`'s `flags_extended`",
            "In memory, the `flags_extended` fields are divided into two parts: the\n fields that are read from and written to disk, and other fields that\n in-memory only and used by libgit2.  Only the flags in\n `GIT_INDEX_ENTRY_EXTENDED_FLAGS` will get saved on-disk.",
            "Thee first three bitmasks match the three fields in the\n `git_index_entry` `flags_extended` value that belong on disk.  You\n can use them to interpret the data in the `flags_extended`.",
            "The rest of the bitmasks match the other fields in the `git_index_entry`\n `flags_extended` value that are only used in-memory by libgit2.\n You can use them to interpret the data in the `flags_extended`."
          ],
          "location": {
            "file": "index.h",
            "line": 116,
            "column": 9
          },
          "group": "index"
        },
        "git_index_capability_t": {
          "kind": "enum",
          "name": "git_index_capability_t",
          "referenceName": "git_index_capability_t",
          "members": [
            {
              "name": "GIT_INDEX_CAPABILITY_IGNORE_CASE",
              "value": "1"
            },
            {
              "name": "GIT_INDEX_CAPABILITY_NO_FILEMODE",
              "value": "2"
            },
            {
              "name": "GIT_INDEX_CAPABILITY_NO_SYMLINKS",
              "value": "4"
            },
            {
              "name": "GIT_INDEX_CAPABILITY_FROM_OWNER",
              "value": "-1"
            }
          ],
          "comment": [
            "Capabilities of system that affect index actions."
          ],
          "location": {
            "file": "index.h",
            "line": 126,
            "column": 9
          },
          "group": "index"
        },
        "git_index_matched_path_cb": {
          "kind": "callback",
          "name": "git_index_matched_path_cb",
          "type": "int (*)(const char *, const char *, void *)",
          "comment": [
            "Callback for APIs that add/remove/update files matching pathspec"
          ],
          "location": {
            "file": "index.h",
            "line": 135,
            "column": 26
          },
          "params": [
            {
              "type": "const char *"
            },
            {
              "type": "const char *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "index",
          "parameterTo": [
            "git_index_add_all",
            "git_index_remove_all",
            "git_index_update_all"
          ],
          "typedef": true
        },
        "git_index_add_option_t": {
          "kind": "enum",
          "name": "git_index_add_option_t",
          "referenceName": "git_index_add_option_t",
          "members": [
            {
              "name": "GIT_INDEX_ADD_DEFAULT",
              "value": "0"
            },
            {
              "name": "GIT_INDEX_ADD_FORCE"
            },
            {
              "name": "GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH"
            },
            {
              "name": "GIT_INDEX_ADD_CHECK_PATHSPEC"
            }
          ],
          "comment": [
            "Flags for APIs that add files matching pathspec"
          ],
          "location": {
            "file": "index.h",
            "line": 139,
            "column": 9
          },
          "group": "index"
        },
        "git_index_stage_t": {
          "kind": "enum",
          "name": "git_index_stage_t",
          "referenceName": "git_index_stage_t",
          "members": [
            {
              "name": "GIT_INDEX_STAGE_ANY",
              "value": "-1",
              "comment": [
                "Match any index stage.",
                "Some index APIs take a stage to match; pass this value to match\n any entry matching the path regardless of stage."
              ]
            },
            {
              "name": "GIT_INDEX_STAGE_NORMAL",
              "value": "0",
              "comment": [
                "A normal staged file in the index."
              ]
            },
            {
              "name": "GIT_INDEX_STAGE_ANCESTOR",
              "value": "1",
              "comment": [
                "The ancestor side of a conflict."
              ]
            },
            {
              "name": "GIT_INDEX_STAGE_OURS",
              "value": "2",
              "comment": [
                "The \"ours\" side of a conflict."
              ]
            },
            {
              "name": "GIT_INDEX_STAGE_THEIRS",
              "value": "3",
              "comment": [
                "The \"theirs\" side of a conflict."
              ]
            }
          ],
          "comment": [
            "Git index stage states"
          ],
          "location": {
            "file": "index.h",
            "line": 147,
            "column": 9
          },
          "group": "index"
        },
        "git_index_open": {
          "kind": "function",
          "name": "git_index_open",
          "location": {
            "file": "index.h",
            "line": 187,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "the pointer for the new index"
            },
            {
              "name": "index_path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the index file in disk"
            }
          ],
          "comment": [
            "Create a new bare Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.",
            "Since there is no ODB or working directory behind this index,\n any Index methods which rely on these (e.g. index_add_bypath)\n will fail with the GIT_ERROR error code.",
            "If you need to access the index of an actual repository,\n use the `git_repository_index` wrapper.",
            "The index must be freed once it's no longer in use."
          ],
          "group": "index"
        },
        "git_index_new": {
          "kind": "function",
          "name": "git_index_new",
          "location": {
            "file": "index.h",
            "line": 200,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "the pointer for the new index"
            }
          ],
          "comment": [
            "Create an in-memory index object.",
            "This index object cannot be read/written to the filesystem,\n but may be used to perform in-memory index operations.",
            "The index must be freed once it's no longer in use."
          ],
          "group": "index"
        },
        "git_index_free": {
          "kind": "function",
          "name": "git_index_free",
          "location": {
            "file": "index.h",
            "line": 207,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Free an existing index object."
          ],
          "group": "index"
        },
        "git_index_owner": {
          "kind": "function",
          "name": "git_index_owner",
          "location": {
            "file": "index.h",
            "line": 215,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "A pointer to the repository"
          },
          "params": [
            {
              "name": "index",
              "type": "const git_index *",
              "direction": "in",
              "comment": "The index"
            }
          ],
          "comment": [
            "Get the repository this index relates to"
          ],
          "group": "index"
        },
        "git_index_caps": {
          "kind": "function",
          "name": "git_index_caps",
          "location": {
            "file": "index.h",
            "line": 223,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "A combination of GIT_INDEX_CAPABILITY values"
          },
          "params": [
            {
              "name": "index",
              "type": "const git_index *",
              "direction": "in",
              "comment": "An existing index object"
            }
          ],
          "comment": [
            "Read index capabilities flags."
          ],
          "group": "index"
        },
        "git_index_set_caps": {
          "kind": "function",
          "name": "git_index_set_caps",
          "location": {
            "file": "index.h",
            "line": 236,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on failure"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "An existing index object"
            },
            {
              "name": "caps",
              "type": "int",
              "direction": "in",
              "comment": "A combination of GIT_INDEX_CAPABILITY values"
            }
          ],
          "comment": [
            "Set index capabilities flags.",
            "If you pass `GIT_INDEX_CAPABILITY_FROM_OWNER` for the caps, then\n capabilities will be read from the config of the owner object,\n looking at `core.ignorecase`, `core.filemode`, `core.symlinks`."
          ],
          "group": "index"
        },
        "git_index_version": {
          "kind": "function",
          "name": "git_index_version",
          "location": {
            "file": "index.h",
            "line": 248,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "the index version"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "An existing index object"
            }
          ],
          "comment": [
            "Get index on-disk version.",
            "Valid return values are 2, 3, or 4.  If 3 is returned, an index\n with version 2 may be written instead, if the extension data in\n version 3 is not necessary."
          ],
          "group": "index"
        },
        "git_index_set_version": {
          "kind": "function",
          "name": "git_index_set_version",
          "location": {
            "file": "index.h",
            "line": 261,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on failure"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "An existing index object"
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The new version number"
            }
          ],
          "comment": [
            "Set index on-disk version.",
            "Valid values are 2, 3, or 4.  If 2 is given, git_index_write may\n write an index with version 3 instead, if necessary to accurately\n represent the index."
          ],
          "group": "index"
        },
        "git_index_read": {
          "kind": "function",
          "name": "git_index_read",
          "location": {
            "file": "index.h",
            "line": 280,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "if true, always reload, vs. only read if file has changed"
            }
          ],
          "comment": [
            "Update the contents of an existing index object in memory by reading\n from the hard disk.",
            "If `force` is true, this performs a \"hard\" read that discards in-memory\n changes and always reloads the on-disk index data.  If there is no\n on-disk version, the index will be cleared.",
            "If `force` is false, this does a \"soft\" read that reloads the index\n data from disk only if it has changed since the last time it was\n loaded.  Purely in-memory index data will be untouched.  Be aware: if\n there are changes on disk, unwritten in-memory changes are discarded."
          ],
          "group": "index"
        },
        "git_index_write": {
          "kind": "function",
          "name": "git_index_write",
          "location": {
            "file": "index.h",
            "line": 289,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Write an existing index object from memory back to disk\n using an atomic file lock."
          ],
          "group": "index"
        },
        "git_index_path": {
          "kind": "function",
          "name": "git_index_path",
          "location": {
            "file": "index.h",
            "line": 297,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "path to index file or NULL for in-memory index"
          },
          "params": [
            {
              "name": "index",
              "type": "const git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the full path to the index file on disk."
          ],
          "group": "index"
        },
        "git_index_checksum": {
          "kind": "function",
          "name": "git_index_checksum",
          "location": {
            "file": "index.h",
            "line": 309,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "a pointer to the checksum of the index"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the checksum of the index",
            "This checksum is the SHA-1 hash over the index file (except the\n last 20 bytes which are the checksum itself). In cases where the\n index does not exist on-disk, it will be zeroed out."
          ],
          "group": "index"
        },
        "git_index_read_tree": {
          "kind": "function",
          "name": "git_index_read_tree",
          "location": {
            "file": "index.h",
            "line": 320,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "tree to read"
            }
          ],
          "comment": [
            "Read a tree into the index file with stats",
            "The current index contents will be replaced by the specified tree."
          ],
          "group": "index"
        },
        "git_index_write_tree": {
          "kind": "function",
          "name": "git_index_write_tree",
          "location": {
            "file": "index.h",
            "line": 341,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EUNMERGED when the index is not clean\n or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the written tree"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "Index to write"
            }
          ],
          "comment": [
            "Write the index as a tree",
            "This method will scan the index and write a representation\n of its current state back to disk; it recursively creates\n tree objects for each of the subtrees stored in the index,\n but only returns the OID of the root tree. This is the OID\n that can be used e.g. to create a commit.",
            "The index instance cannot be bare, and needs to be associated\n to an existing repository.",
            "The index must not contain any file in conflict."
          ],
          "group": "index"
        },
        "git_index_write_tree_to": {
          "kind": "function",
          "name": "git_index_write_tree_to",
          "location": {
            "file": "index.h",
            "line": 358,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EUNMERGED when the index is not clean\n or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store OID of the the written tree"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "Index to write"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to write the tree"
            }
          ],
          "comment": [
            "Write the index as a tree to the given repository",
            "This method will do the same as `git_index_write_tree`, but\n letting the user choose the repository where the tree will\n be written.",
            "The index must not contain any file in conflict."
          ],
          "group": "index"
        },
        "git_index_entrycount": {
          "kind": "function",
          "name": "git_index_entrycount",
          "location": {
            "file": "index.h",
            "line": 377,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "integer of count of current entries"
          },
          "params": [
            {
              "name": "index",
              "type": "const git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the count of entries currently in the index"
          ],
          "group": "index"
        },
        "git_index_clear": {
          "kind": "function",
          "name": "git_index_clear",
          "location": {
            "file": "index.h",
            "line": 388,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, error code \n<\n 0 on failure"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Clear the contents (all the entries) of an index object.",
            "This clears the index object in memory; changes must be explicitly\n written to disk for them to take effect persistently."
          ],
          "group": "index"
        },
        "git_index_get_byindex": {
          "kind": "function",
          "name": "git_index_get_byindex",
          "location": {
            "file": "index.h",
            "line": 401,
            "column": 37
          },
          "returns": {
            "type": "const git_index_entry *",
            "comment": "a pointer to the entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get a pointer to one of the entries in the index",
            "The entry is not modifiable and should not be freed.  Because the\n `git_index_entry` struct is a publicly defined struct, you should\n be able to make your own permanent copy of the data if necessary."
          ],
          "group": "index"
        },
        "git_index_get_bypath": {
          "kind": "function",
          "name": "git_index_get_bypath",
          "location": {
            "file": "index.h",
            "line": 416,
            "column": 37
          },
          "returns": {
            "type": "const git_index_entry *",
            "comment": "a pointer to the entry; NULL if it was not found"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            },
            {
              "name": "stage",
              "type": "int",
              "direction": "in",
              "comment": "stage to search"
            }
          ],
          "comment": [
            "Get a pointer to one of the entries in the index",
            "The entry is not modifiable and should not be freed.  Because the\n `git_index_entry` struct is a publicly defined struct, you should\n be able to make your own permanent copy of the data if necessary."
          ],
          "group": "index"
        },
        "git_index_remove": {
          "kind": "function",
          "name": "git_index_remove",
          "location": {
            "file": "index.h",
            "line": 427,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            },
            {
              "name": "stage",
              "type": "int",
              "direction": "in",
              "comment": "stage to search"
            }
          ],
          "comment": [
            "Remove an entry from the index"
          ],
          "group": "index"
        },
        "git_index_remove_directory": {
          "kind": "function",
          "name": "git_index_remove_directory",
          "location": {
            "file": "index.h",
            "line": 437,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "dir",
              "type": "const char *",
              "direction": "in",
              "comment": "container directory path"
            },
            {
              "name": "stage",
              "type": "int",
              "direction": "in",
              "comment": "stage to search"
            }
          ],
          "comment": [
            "Remove all entries from the index under a given directory"
          ],
          "group": "index"
        },
        "git_index_add": {
          "kind": "function",
          "name": "git_index_add",
          "location": {
            "file": "index.h",
            "line": 454,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "source_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "new entry object"
            }
          ],
          "comment": [
            "Add or update an index entry from an in-memory struct",
            "If a previous index entry exists that has the same path and stage\n as the given 'source_entry', it will be replaced.  Otherwise, the\n 'source_entry' will be added.",
            "A full copy (including the 'path' string) of the given\n 'source_entry' will be inserted on the index."
          ],
          "group": "index"
        },
        "git_index_entry_stage": {
          "kind": "function",
          "name": "git_index_entry_stage",
          "location": {
            "file": "index.h",
            "line": 466,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the stage number"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "The entry"
            }
          ],
          "comment": [
            "Return the stage number from a git index entry",
            "This entry is calculated from the entry's flag attribute like this:",
            "(entry->flags \n&\n GIT_INDEX_ENTRY_STAGEMASK) >> GIT_INDEX_ENTRY_STAGESHIFT"
          ],
          "group": "index"
        },
        "git_index_entry_is_conflict": {
          "kind": "function",
          "name": "git_index_entry_is_conflict",
          "location": {
            "file": "index.h",
            "line": 475,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the entry is a conflict entry, 0 otherwise"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "The entry"
            }
          ],
          "comment": [
            "Return whether the given index entry is a conflict (has a high stage\n entry).  This is simply shorthand for `git_index_entry_stage > 0`."
          ],
          "group": "index"
        },
        "git_index_iterator_new": {
          "kind": "function",
          "name": "git_index_iterator_new",
          "location": {
            "file": "index.h",
            "line": 495,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "iterator_out",
              "type": "git_index_iterator **",
              "direction": "in",
              "comment": "The newly created iterator"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "The index to iterate"
            }
          ],
          "comment": [
            "Create an iterator that will return every entry contained in the\n index at the time of creation.  Entries are returned in order,\n sorted by path.  This iterator is backed by a snapshot that allows\n callers to modify the index while iterating without affecting the\n iterator."
          ],
          "group": "index"
        },
        "git_index_iterator_next": {
          "kind": "function",
          "name": "git_index_iterator_next",
          "location": {
            "file": "index.h",
            "line": 506,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ITEROVER on iteration completion or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "const git_index_entry **",
              "direction": "in",
              "comment": "Pointer to store the index entry in"
            },
            {
              "name": "iterator",
              "type": "git_index_iterator *",
              "direction": "in",
              "comment": "The iterator"
            }
          ],
          "comment": [
            "Return the next index entry in-order from the iterator."
          ],
          "group": "index"
        },
        "git_index_iterator_free": {
          "kind": "function",
          "name": "git_index_iterator_free",
          "location": {
            "file": "index.h",
            "line": 515,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "iterator",
              "type": "git_index_iterator *",
              "direction": "in",
              "comment": "The iterator to free"
            }
          ],
          "comment": [
            "Free the index iterator"
          ],
          "group": "index"
        },
        "git_index_add_bypath": {
          "kind": "function",
          "name": "git_index_add_bypath",
          "location": {
            "file": "index.h",
            "line": 546,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "filename to add"
            }
          ],
          "comment": [
            "Add or update an index entry from a file on disk",
            "The file `path` must be relative to the repository's\n working folder and must be readable.",
            "This method will fail in bare index instances.",
            "This forces the file to be added to the index, not looking\n at gitignore rules.  Those rules can be evaluated through\n the git_status APIs (in status.h) before calling this.",
            "If this file currently is the result of a merge conflict, this\n file will no longer be marked as conflicting.  The data about\n the conflict will be moved to the \"resolve undo\" (REUC) section."
          ],
          "group": "index"
        },
        "git_index_add_from_buffer": {
          "kind": "function",
          "name": "git_index_add_from_buffer",
          "location": {
            "file": "index.h",
            "line": 574,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "filename to add"
            },
            {
              "name": "buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "data to be written into the blob"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "length of the data"
            }
          ],
          "comment": [
            "Add or update an index entry from a buffer in memory",
            "This method will create a blob in the repository that owns the\n index and then add the index entry to the index.  The `path` of the\n entry represents the position of the blob relative to the\n repository's root folder.",
            "If a previous index entry exists that has the same path as the\n given 'entry', it will be replaced.  Otherwise, the 'entry' will be\n added.",
            "This forces the file to be added to the index, not looking\n at gitignore rules.  Those rules can be evaluated through\n the git_status APIs (in status.h) before calling this.",
            "If this file currently is the result of a merge conflict, this\n file will no longer be marked as conflicting.  The data about\n the conflict will be moved to the \"resolve undo\" (REUC) section."
          ],
          "group": "index"
        },
        "git_index_remove_bypath": {
          "kind": "function",
          "name": "git_index_remove_bypath",
          "location": {
            "file": "index.h",
            "line": 593,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "filename to remove"
            }
          ],
          "comment": [
            "Remove an index entry corresponding to a file on disk",
            "The file `path` must be relative to the repository's\n working folder.  It may exist.",
            "If this file currently is the result of a merge conflict, this\n file will no longer be marked as conflicting.  The data about\n the conflict will be moved to the \"resolve undo\" (REUC) section."
          ],
          "group": "index"
        },
        "git_index_add_all": {
          "kind": "function",
          "name": "git_index_add_all",
          "location": {
            "file": "index.h",
            "line": 641,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, negative callback return value, or error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "pathspec",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "array of path patterns"
            },
            {
              "name": "flags",
              "type": "unsigned int",
              "direction": "in",
              "comment": "combination of git_index_add_option_t flags"
            },
            {
              "name": "callback",
              "type": "git_index_matched_path_cb",
              "direction": "in",
              "comment": "notification callback for each added/updated path (also\n                 gets index of matching pathspec entry); can be NULL;\n                 return 0 to add, >0 to skip, \n<\n0 to abort scan.",
              "referenceType": "int (*)(const char *, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "payload passed through to callback function"
            }
          ],
          "comment": [
            "Add or update index entries matching files in the working directory.",
            "This method will fail in bare index instances.",
            "The `pathspec` is a list of file names or shell glob patterns that will\n be matched against files in the repository's working directory.  Each\n file that matches will be added to the index (either updating an\n existing entry or adding a new entry).  You can disable glob expansion\n and force exact matching with the `GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH`\n flag.",
            "Files that are ignored will be skipped (unlike `git_index_add_bypath`).\n If a file is already tracked in the index, then it *will* be updated\n even if it is ignored.  Pass the `GIT_INDEX_ADD_FORCE` flag to skip\n the checking of ignore rules.",
            "To emulate `git add -A` and generate an error if the pathspec contains\n the exact path of an ignored file (when not using FORCE), add the\n `GIT_INDEX_ADD_CHECK_PATHSPEC` flag.  This checks that each entry\n in the `pathspec` that is an exact match to a filename on disk is\n either not ignored or already in the index.  If this check fails, the\n function will return GIT_EINVALIDSPEC.",
            "To emulate `git add -A` with the \"dry-run\" option, just use a callback\n function that always returns a positive value.  See below for details.",
            "If any files are currently the result of a merge conflict, those files\n will no longer be marked as conflicting.  The data about the conflicts\n will be moved to the \"resolve undo\" (REUC) section.",
            "If you provide a callback function, it will be invoked on each matching\n item in the working directory immediately *before* it is added to /\n updated in the index.  Returning zero will add the item to the index,\n greater than zero will skip the item, and less than zero will abort the\n scan and return that value to the caller."
          ],
          "group": "index"
        },
        "git_index_remove_all": {
          "kind": "function",
          "name": "git_index_remove_all",
          "location": {
            "file": "index.h",
            "line": 663,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, negative callback return value, or error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "An existing index object"
            },
            {
              "name": "pathspec",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "array of path patterns"
            },
            {
              "name": "callback",
              "type": "git_index_matched_path_cb",
              "direction": "in",
              "comment": "notification callback for each removed path (also\n                 gets index of matching pathspec entry); can be NULL;\n                 return 0 to add, >0 to skip, \n<\n0 to abort scan.",
              "referenceType": "int (*)(const char *, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "payload passed through to callback function"
            }
          ],
          "comment": [
            "Remove all matching index entries.",
            "If you provide a callback function, it will be invoked on each matching\n item in the index immediately *before* it is removed.  Return 0 to\n remove the item, > 0 to skip the item, and \n<\n 0 to abort the scan."
          ],
          "group": "index"
        },
        "git_index_update_all": {
          "kind": "function",
          "name": "git_index_update_all",
          "location": {
            "file": "index.h",
            "line": 692,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, negative callback return value, or error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "An existing index object"
            },
            {
              "name": "pathspec",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "array of path patterns"
            },
            {
              "name": "callback",
              "type": "git_index_matched_path_cb",
              "direction": "in",
              "comment": "notification callback for each updated path (also\n                 gets index of matching pathspec entry); can be NULL;\n                 return 0 to add, >0 to skip, \n<\n0 to abort scan.",
              "referenceType": "int (*)(const char *, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "payload passed through to callback function"
            }
          ],
          "comment": [
            "Update all index entries to match the working directory",
            "This method will fail in bare index instances.",
            "This scans the existing index entries and synchronizes them with the\n working directory, deleting them if the corresponding working directory\n file no longer exists otherwise updating the information (including\n adding the latest version of file to the ODB if needed).",
            "If you provide a callback function, it will be invoked on each matching\n item in the index immediately *before* it is updated (either refreshed\n or removed depending on working directory state).  Return 0 to proceed\n with updating the item, > 0 to skip the item, and \n<\n 0 to abort the scan."
          ],
          "group": "index"
        },
        "git_index_find": {
          "kind": "function",
          "name": "git_index_find",
          "location": {
            "file": "index.h",
            "line": 707,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "a zero-based position in the index if found; GIT_ENOTFOUND otherwise"
          },
          "params": [
            {
              "name": "at_pos",
              "type": "size_t *",
              "direction": "in",
              "comment": "the address to which the position of the index entry is written (optional)"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Find the first position of any entries which point to given\n path in the Git index."
          ],
          "group": "index"
        },
        "git_index_find_prefix": {
          "kind": "function",
          "name": "git_index_find_prefix",
          "location": {
            "file": "index.h",
            "line": 718,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 with valid value in at_pos; an error code otherwise"
          },
          "params": [
            {
              "name": "at_pos",
              "type": "size_t *",
              "direction": "in",
              "comment": "the address to which the position of the index entry is written (optional)"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "prefix",
              "type": "const char *",
              "direction": "in",
              "comment": "the prefix to search for"
            }
          ],
          "comment": [
            "Find the first position of any entries matching a prefix. To find the first position\n of a path inside a given folder, suffix the prefix with a '/'."
          ],
          "group": "index"
        },
        "git_index_conflict_add": {
          "kind": "function",
          "name": "git_index_conflict_add",
          "location": {
            "file": "index.h",
            "line": 743,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "ancestor_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "the entry data for the ancestor of the conflict"
            },
            {
              "name": "our_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "the entry data for our side of the merge conflict"
            },
            {
              "name": "their_entry",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "the entry data for their side of the merge conflict"
            }
          ],
          "comment": [
            "Add or update index entries to represent a conflict.  Any staged\n entries that exist at the given paths will be removed.",
            "The entries are the entries from the tree included in the merge.  Any\n entry may be null to indicate that that file was not present in the\n trees during the merge.  For example, ancestor_entry may be NULL to\n indicate that a file was added in both branches and must be resolved."
          ],
          "group": "index"
        },
        "git_index_conflict_get": {
          "kind": "function",
          "name": "git_index_conflict_get",
          "location": {
            "file": "index.h",
            "line": 763,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "ancestor_out",
              "type": "const git_index_entry **",
              "direction": "in",
              "comment": "Pointer to store the ancestor entry"
            },
            {
              "name": "our_out",
              "type": "const git_index_entry **",
              "direction": "in",
              "comment": "Pointer to store the our entry"
            },
            {
              "name": "their_out",
              "type": "const git_index_entry **",
              "direction": "in",
              "comment": "Pointer to store the their entry"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Get the index entries that represent a conflict of a single file.",
            "The entries are not modifiable and should not be freed.  Because the\n `git_index_entry` struct is a publicly defined struct, you should\n be able to make your own permanent copy of the data if necessary."
          ],
          "group": "index"
        },
        "git_index_conflict_remove": {
          "kind": "function",
          "name": "git_index_conflict_remove",
          "location": {
            "file": "index.h",
            "line": 777,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to remove conflicts for"
            }
          ],
          "comment": [
            "Removes the index entries that represent a conflict of a single file."
          ],
          "group": "index"
        },
        "git_index_conflict_cleanup": {
          "kind": "function",
          "name": "git_index_conflict_cleanup",
          "location": {
            "file": "index.h",
            "line": 785,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Remove all conflicts in the index (entries with a stage greater than 0)."
          ],
          "group": "index"
        },
        "git_index_has_conflicts": {
          "kind": "function",
          "name": "git_index_has_conflicts",
          "location": {
            "file": "index.h",
            "line": 792,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if at least one conflict is found, 0 otherwise."
          },
          "params": [
            {
              "name": "index",
              "type": "const git_index *"
            }
          ],
          "comment": [
            "Determine if the index contains entries representing file conflicts."
          ],
          "group": "index"
        },
        "git_index_conflict_iterator_new": {
          "kind": "function",
          "name": "git_index_conflict_iterator_new",
          "location": {
            "file": "index.h",
            "line": 803,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "iterator_out",
              "type": "git_index_conflict_iterator **",
              "direction": "in",
              "comment": "The newly created conflict iterator"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "The index to scan"
            }
          ],
          "comment": [
            "Create an iterator for the conflicts in the index.",
            "The index must not be modified while iterating; the results are undefined."
          ],
          "group": "index"
        },
        "git_index_conflict_next": {
          "kind": "function",
          "name": "git_index_conflict_next",
          "location": {
            "file": "index.h",
            "line": 817,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 (no error), GIT_ITEROVER (iteration is done) or an error code\n         (negative value)"
          },
          "params": [
            {
              "name": "ancestor_out",
              "type": "const git_index_entry **",
              "direction": "in",
              "comment": "Pointer to store the ancestor side of the conflict"
            },
            {
              "name": "our_out",
              "type": "const git_index_entry **",
              "direction": "in",
              "comment": "Pointer to store our side of the conflict"
            },
            {
              "name": "their_out",
              "type": "const git_index_entry **",
              "direction": "in",
              "comment": "Pointer to store their side of the conflict"
            },
            {
              "name": "iterator",
              "type": "git_index_conflict_iterator *"
            }
          ],
          "comment": [
            "Returns the current conflict (ancestor, ours and theirs entry) and\n advance the iterator internally to the next value."
          ],
          "group": "index"
        },
        "git_index_conflict_iterator_free": {
          "kind": "function",
          "name": "git_index_conflict_iterator_free",
          "location": {
            "file": "index.h",
            "line": 828,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "iterator",
              "type": "git_index_conflict_iterator *",
              "direction": "in",
              "comment": "pointer to the iterator"
            }
          ],
          "comment": [
            "Frees a `git_index_conflict_iterator`."
          ],
          "group": "index"
        },
        "git_index": {
          "kind": "struct",
          "name": "git_index",
          "referenceName": "struct git_index",
          "opaque": true,
          "comment": [
            "Memory representation of an index file."
          ],
          "location": {
            "file": "types.h",
            "line": 139,
            "column": 26
          },
          "group": "index",
          "parameterTo": [
            "git_apply_to_tree",
            "git_checkout_index",
            "git_cherrypick_commit",
            "git_index_add_frombuffer",
            "git_diff_tree_to_index",
            "git_diff_index_to_workdir",
            "git_diff_index_to_index",
            "git_index_open",
            "git_index_new",
            "git_index_free",
            "git_index_owner",
            "git_index_caps",
            "git_index_set_caps",
            "git_index_version",
            "git_index_set_version",
            "git_index_read",
            "git_index_write",
            "git_index_path",
            "git_index_checksum",
            "git_index_read_tree",
            "git_index_write_tree",
            "git_index_write_tree_to",
            "git_index_entrycount",
            "git_index_clear",
            "git_index_get_byindex",
            "git_index_get_bypath",
            "git_index_remove",
            "git_index_remove_directory",
            "git_index_add",
            "git_index_iterator_new",
            "git_index_add_bypath",
            "git_index_add_from_buffer",
            "git_index_remove_bypath",
            "git_index_add_all",
            "git_index_remove_all",
            "git_index_update_all",
            "git_index_find",
            "git_index_find_prefix",
            "git_index_conflict_add",
            "git_index_conflict_get",
            "git_index_conflict_remove",
            "git_index_conflict_cleanup",
            "git_index_has_conflicts",
            "git_index_conflict_iterator_new",
            "git_merge_trees",
            "git_merge_commits",
            "git_pathspec_match_index",
            "git_rebase_inmemory_index",
            "git_repository_index",
            "git_revert_commit",
            "git_index_name_entrycount",
            "git_index_name_get_byindex",
            "git_index_name_add",
            "git_index_name_clear",
            "git_index_reuc_entrycount",
            "git_index_reuc_find",
            "git_index_reuc_get_bypath",
            "git_index_reuc_get_byindex",
            "git_index_reuc_add",
            "git_index_reuc_remove",
            "git_index_reuc_clear",
            "git_repository_set_index"
          ]
        },
        "git_index_iterator": {
          "kind": "struct",
          "name": "git_index_iterator",
          "referenceName": "struct git_index_iterator",
          "opaque": true,
          "comment": [
            "An iterator for entries in the index."
          ],
          "location": {
            "file": "types.h",
            "line": 142,
            "column": 35
          },
          "group": "index",
          "parameterTo": [
            "git_index_iterator_new",
            "git_index_iterator_next",
            "git_index_iterator_free"
          ]
        },
        "git_index_conflict_iterator": {
          "kind": "struct",
          "name": "git_index_conflict_iterator",
          "referenceName": "struct git_index_conflict_iterator",
          "opaque": true,
          "comment": [
            "An iterator for conflicts in the index."
          ],
          "location": {
            "file": "types.h",
            "line": 145,
            "column": 44
          },
          "group": "index",
          "parameterTo": [
            "git_index_conflict_iterator_new",
            "git_index_conflict_next",
            "git_index_conflict_iterator_free"
          ]
        }
      },
      "info": {
        "summary": "Git index parsing and manipulation routines"
      }
    },
    "sys/index": {
      "apis": {
        "git_index_name_entry": {
          "kind": "struct",
          "name": "git_index_name_entry",
          "referenceName": "git_index_name_entry",
          "comment": [
            "Representation of a rename conflict entry in the index."
          ],
          "members": [
            {
              "name": "ancestor",
              "type": "char *"
            },
            {
              "name": "ours",
              "type": "char *"
            },
            {
              "name": "theirs",
              "type": "char *"
            }
          ],
          "location": {
            "file": "sys/index.h",
            "line": 23,
            "column": 16
          },
          "group": "sys/index",
          "returnedBy": [
            "git_index_name_get_byindex"
          ]
        },
        "git_index_reuc_entry": {
          "kind": "struct",
          "name": "git_index_reuc_entry",
          "referenceName": "git_index_reuc_entry",
          "comment": [
            "Representation of a resolve undo entry in the index."
          ],
          "members": [
            {
              "name": "mode",
              "type": "uint32_t[3]"
            },
            {
              "name": "oid",
              "type": "git_oid[3]"
            },
            {
              "name": "path",
              "type": "char *"
            }
          ],
          "location": {
            "file": "sys/index.h",
            "line": 30,
            "column": 16
          },
          "group": "sys/index",
          "returnedBy": [
            "git_index_reuc_get_bypath",
            "git_index_reuc_get_byindex"
          ]
        },
        "git_index_name_entrycount": {
          "kind": "function",
          "name": "git_index_name_entrycount",
          "location": {
            "file": "sys/index.h",
            "line": 48,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "integer of count of current filename conflict entries"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the count of filename conflict entries currently in the index."
          ],
          "group": "sys/index"
        },
        "git_index_name_get_byindex": {
          "kind": "function",
          "name": "git_index_name_get_byindex",
          "location": {
            "file": "sys/index.h",
            "line": 60,
            "column": 42
          },
          "returns": {
            "type": "const git_index_name_entry *",
            "comment": "a pointer to the filename conflict entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get a filename conflict entry from the index.",
            "The returned entry is read-only and should not be modified\n or freed by the caller."
          ],
          "group": "sys/index"
        },
        "git_index_name_add": {
          "kind": "function",
          "name": "git_index_name_add",
          "location": {
            "file": "sys/index.h",
            "line": 71,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "ancestor",
              "type": "const char *",
              "direction": "in",
              "comment": "the path of the file as it existed in the ancestor"
            },
            {
              "name": "ours",
              "type": "const char *",
              "direction": "in",
              "comment": "the path of the file as it existed in our tree"
            },
            {
              "name": "theirs",
              "type": "const char *",
              "direction": "in",
              "comment": "the path of the file as it existed in their tree"
            }
          ],
          "comment": [
            "Record the filenames involved in a rename conflict."
          ],
          "group": "sys/index"
        },
        "git_index_name_clear": {
          "kind": "function",
          "name": "git_index_name_clear",
          "location": {
            "file": "sys/index.h",
            "line": 80,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Remove all filename conflict entries."
          ],
          "group": "sys/index"
        },
        "git_index_reuc_entrycount": {
          "kind": "function",
          "name": "git_index_reuc_entrycount",
          "location": {
            "file": "sys/index.h",
            "line": 97,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "integer of count of current resolve undo entries"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Get the count of resolve undo entries currently in the index."
          ],
          "group": "sys/index"
        },
        "git_index_reuc_find": {
          "kind": "function",
          "name": "git_index_reuc_find",
          "location": {
            "file": "sys/index.h",
            "line": 108,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if found, \n<\n 0 otherwise (GIT_ENOTFOUND)"
          },
          "params": [
            {
              "name": "at_pos",
              "type": "size_t *",
              "direction": "in",
              "comment": "the address to which the position of the reuc entry is written (optional)"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Finds the resolve undo entry that points to the given path in the Git\n index."
          ],
          "group": "sys/index"
        },
        "git_index_reuc_get_bypath": {
          "kind": "function",
          "name": "git_index_reuc_get_bypath",
          "location": {
            "file": "sys/index.h",
            "line": 120,
            "column": 42
          },
          "returns": {
            "type": "const git_index_reuc_entry *",
            "comment": "the resolve undo entry; NULL if not found"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to search"
            }
          ],
          "comment": [
            "Get a resolve undo entry from the index.",
            "The returned entry is read-only and should not be modified\n or freed by the caller."
          ],
          "group": "sys/index"
        },
        "git_index_reuc_get_byindex": {
          "kind": "function",
          "name": "git_index_reuc_get_byindex",
          "location": {
            "file": "sys/index.h",
            "line": 132,
            "column": 42
          },
          "returns": {
            "type": "const git_index_reuc_entry *",
            "comment": "a pointer to the resolve undo entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the position of the entry"
            }
          ],
          "comment": [
            "Get a resolve undo entry from the index.",
            "The returned entry is read-only and should not be modified\n or freed by the caller."
          ],
          "group": "sys/index"
        },
        "git_index_reuc_add": {
          "kind": "function",
          "name": "git_index_reuc_add",
          "location": {
            "file": "sys/index.h",
            "line": 156,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "filename to add"
            },
            {
              "name": "ancestor_mode",
              "type": "int",
              "direction": "in",
              "comment": "mode of the ancestor file"
            },
            {
              "name": "ancestor_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid of the ancestor file"
            },
            {
              "name": "our_mode",
              "type": "int",
              "direction": "in",
              "comment": "mode of our file"
            },
            {
              "name": "our_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid of our file"
            },
            {
              "name": "their_mode",
              "type": "int",
              "direction": "in",
              "comment": "mode of their file"
            },
            {
              "name": "their_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid of their file"
            }
          ],
          "comment": [
            "Adds a resolve undo entry for a file based on the given parameters.",
            "The resolve undo entry contains the OIDs of files that were involved\n in a merge conflict after the conflict has been resolved.  This allows\n conflicts to be re-resolved later.",
            "If there exists a resolve undo entry for the given path in the index,\n it will be removed.",
            "This method will fail in bare index instances."
          ],
          "group": "sys/index"
        },
        "git_index_reuc_remove": {
          "kind": "function",
          "name": "git_index_reuc_remove",
          "location": {
            "file": "sys/index.h",
            "line": 168,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "position of the resolve undo entry to remove"
            }
          ],
          "comment": [
            "Remove an resolve undo entry from the index"
          ],
          "group": "sys/index"
        },
        "git_index_reuc_clear": {
          "kind": "function",
          "name": "git_index_reuc_clear",
          "location": {
            "file": "sys/index.h",
            "line": 176,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "an existing index object"
            }
          ],
          "comment": [
            "Remove all resolve undo entries from the index"
          ],
          "group": "sys/index"
        }
      },
      "info": {
        "summary": "Low-level Git index manipulation routines"
      }
    },
    "indexer": {
      "apis": {
        "git_indexer": {
          "kind": "struct",
          "name": "git_indexer",
          "referenceName": "struct git_indexer",
          "opaque": true,
          "comment": [
            "A git indexer object"
          ],
          "location": {
            "file": "indexer.h",
            "line": 17,
            "column": 28
          },
          "group": "indexer",
          "parameterTo": [
            "git_indexer_new",
            "git_indexer_append",
            "git_indexer_commit",
            "git_indexer_hash",
            "git_indexer_free"
          ]
        },
        "git_indexer_progress": {
          "kind": "struct",
          "name": "git_indexer_progress",
          "referenceName": "git_indexer_progress",
          "comment": [
            "This structure is used to provide callers information about the\n progress of indexing a packfile, either directly or part of a\n fetch or clone that downloads a packfile."
          ],
          "members": [
            {
              "name": "total_objects",
              "type": "unsigned int",
              "comment": [
                "number of objects in the packfile being indexed"
              ]
            },
            {
              "name": "indexed_objects",
              "type": "unsigned int",
              "comment": [
                "received objects that have been hashed"
              ]
            },
            {
              "name": "received_objects",
              "type": "unsigned int",
              "comment": [
                "received_objects: objects which have been downloaded"
              ]
            },
            {
              "name": "local_objects",
              "type": "unsigned int",
              "comment": [
                "locally-available objects that have been injected in order\n to fix a thin pack"
              ]
            },
            {
              "name": "total_deltas",
              "type": "unsigned int",
              "comment": [
                "number of deltas in the packfile being indexed"
              ]
            },
            {
              "name": "indexed_deltas",
              "type": "unsigned int",
              "comment": [
                "received deltas that have been indexed"
              ]
            },
            {
              "name": "received_bytes",
              "type": "size_t",
              "comment": [
                "size of the packfile received up to now"
              ]
            }
          ],
          "location": {
            "file": "indexer.h",
            "line": 24,
            "column": 16
          },
          "group": "indexer",
          "returnedBy": [
            "git_remote_stats"
          ],
          "parameterTo": [
            "git_indexer_progress_cb",
            "git_indexer_append",
            "git_indexer_commit"
          ]
        },
        "git_indexer_progress_cb": {
          "kind": "callback",
          "name": "git_indexer_progress_cb",
          "type": "int (*)(const git_indexer_progress *, void *)",
          "comment": [
            "Type for progress callbacks during indexing.  Return a value less\n than zero to cancel the indexing or download."
          ],
          "location": {
            "file": "indexer.h",
            "line": 57,
            "column": 26
          },
          "params": [
            {
              "name": "stats",
              "direction": "in",
              "comment": "Structure containing information about the state of the tran    sfer",
              "type": "const git_indexer_progress *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload provided by caller",
              "type": "void *"
            }
          ],
          "group": "indexer",
          "parameterTo": [
            "git_odb_write_pack",
            "git_packbuilder_write"
          ],
          "typedef": true
        },
        "git_indexer_options": {
          "kind": "struct",
          "name": "git_indexer_options",
          "referenceName": "git_indexer_options",
          "comment": [
            "Options for indexer configuration"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "progress_cb",
              "type": "git_indexer_progress_cb",
              "comment": [
                "progress_cb function to call with progress information"
              ],
              "referenceType": "int (*)(const git_indexer_progress *, void *)"
            },
            {
              "name": "progress_cb_payload",
              "type": "void *",
              "comment": [
                "progress_cb_payload payload for the progress callback"
              ]
            },
            {
              "name": "verify",
              "type": "unsigned char",
              "comment": [
                "Do connectivity checks for the received pack"
              ]
            }
          ],
          "location": {
            "file": "indexer.h",
            "line": 62,
            "column": 16
          },
          "group": "indexer",
          "parameterTo": [
            "git_indexer_init_options",
            "git_indexer_options_init",
            "git_indexer_new"
          ]
        },
        "GIT_INDEXER_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_INDEXER_OPTIONS_VERSION",
          "location": {
            "file": "indexer.h",
            "line": 74,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "indexer"
        },
        "GIT_INDEXER_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_INDEXER_OPTIONS_INIT",
          "location": {
            "file": "indexer.h",
            "line": 75,
            "column": 9
          },
          "value": "{ GIT_INDEXER_OPTIONS_VERSION }",
          "comment": "",
          "group": "indexer"
        },
        "git_indexer_options_init": {
          "kind": "function",
          "name": "git_indexer_options_init",
          "location": {
            "file": "indexer.h",
            "line": 85,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_indexer_options *",
              "direction": "in",
              "comment": "the `git_indexer_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Version of struct; pass `GIT_INDEXER_OPTIONS_VERSION`"
            }
          ],
          "comment": [
            "Initializes a `git_indexer_options` with default values. Equivalent to\n creating an instance with GIT_INDEXER_OPTIONS_INIT."
          ],
          "group": "indexer"
        },
        "git_indexer_new": {
          "kind": "function",
          "name": "git_indexer_new",
          "location": {
            "file": "indexer.h",
            "line": 101,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_indexer **",
              "direction": "in",
              "comment": "where to store the indexer instance"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "to the directory where the packfile should be stored"
            },
            {
              "name": "mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "permissions to use creating packfile or 0 for defaults"
            },
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database from which to read base objects when\n fixing thin packs. Pass NULL if no thin pack is expected (an error\n will be returned if there are bases missing)"
            },
            {
              "name": "opts",
              "type": "git_indexer_options *",
              "direction": "in",
              "comment": "Optional structure containing additional options. See\n `git_indexer_options` above."
            }
          ],
          "comment": [
            "Create a new indexer instance"
          ],
          "group": "indexer"
        },
        "git_indexer_append": {
          "kind": "function",
          "name": "git_indexer_append",
          "location": {
            "file": "indexer.h",
            "line": 116,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer *",
              "direction": "in",
              "comment": "the indexer"
            },
            {
              "name": "data",
              "type": "const void *",
              "direction": "in",
              "comment": "the data to add"
            },
            {
              "name": "size",
              "type": "size_t",
              "direction": "in",
              "comment": "the size of the data in bytes"
            },
            {
              "name": "stats",
              "type": "git_indexer_progress *",
              "direction": "in",
              "comment": "stat storage"
            }
          ],
          "comment": [
            "Add data to the indexer"
          ],
          "group": "indexer"
        },
        "git_indexer_commit": {
          "kind": "function",
          "name": "git_indexer_commit",
          "location": {
            "file": "indexer.h",
            "line": 125,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer *",
              "direction": "in",
              "comment": "the indexer"
            },
            {
              "name": "stats",
              "type": "git_indexer_progress *"
            }
          ],
          "comment": [
            "Finalize the pack and index",
            "Resolve any pending deltas and write out the index file"
          ],
          "group": "indexer"
        },
        "git_indexer_hash": {
          "kind": "function",
          "name": "git_indexer_hash",
          "location": {
            "file": "indexer.h",
            "line": 135,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *"
          },
          "params": [
            {
              "name": "idx",
              "type": "const git_indexer *",
              "direction": "in",
              "comment": "the indexer instance"
            }
          ],
          "comment": [
            "Get the packfile's hash",
            "A packfile's name is derived from the sorted hashing of all object\n names. This is only correct after the index has been finalized."
          ],
          "group": "indexer"
        },
        "git_indexer_free": {
          "kind": "function",
          "name": "git_indexer_free",
          "location": {
            "file": "indexer.h",
            "line": 142,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "idx",
              "type": "git_indexer *",
              "direction": "in",
              "comment": "the indexer to free"
            }
          ],
          "comment": [
            "Free the indexer and its resources"
          ],
          "group": "indexer"
        }
      },
      "info": {}
    },
    "mailmap": {
      "apis": {
        "git_mailmap_new": {
          "kind": "function",
          "name": "git_mailmap_new",
          "location": {
            "file": "mailmap.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_mailmap **",
              "direction": "in",
              "comment": "pointer to store the new mailmap"
            }
          ],
          "comment": [
            "Allocate a new mailmap object.",
            "This object is empty, so you'll have to add a mailmap file before you can do\n anything with it. The mailmap must be freed with 'git_mailmap_free'."
          ],
          "group": "mailmap"
        },
        "git_mailmap_free": {
          "kind": "function",
          "name": "git_mailmap_free",
          "location": {
            "file": "mailmap.h",
            "line": 39,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "mm",
              "type": "git_mailmap *",
              "direction": "in",
              "comment": "the mailmap to free"
            }
          ],
          "comment": [
            "Free the mailmap and its associated memory."
          ],
          "group": "mailmap"
        },
        "git_mailmap_add_entry": {
          "kind": "function",
          "name": "git_mailmap_add_entry",
          "location": {
            "file": "mailmap.h",
            "line": 52,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "mm",
              "type": "git_mailmap *",
              "direction": "in",
              "comment": "mailmap to add the entry to"
            },
            {
              "name": "real_name",
              "type": "const char *",
              "direction": "in",
              "comment": "the real name to use, or NULL"
            },
            {
              "name": "real_email",
              "type": "const char *",
              "direction": "in",
              "comment": "the real email to use, or NULL"
            },
            {
              "name": "replace_name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name to replace, or NULL"
            },
            {
              "name": "replace_email",
              "type": "const char *",
              "direction": "in",
              "comment": "the email to replace"
            }
          ],
          "comment": [
            "Add a single entry to the given mailmap object. If the entry already exists,\n it will be replaced with the new entry."
          ],
          "group": "mailmap"
        },
        "git_mailmap_from_buffer": {
          "kind": "function",
          "name": "git_mailmap_from_buffer",
          "location": {
            "file": "mailmap.h",
            "line": 64,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_mailmap **",
              "direction": "in",
              "comment": "pointer to store the new mailmap"
            },
            {
              "name": "buf",
              "type": "const char *",
              "direction": "in",
              "comment": "buffer to parse the mailmap from"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of the input buffer"
            }
          ],
          "comment": [
            "Create a new mailmap instance containing a single mailmap file"
          ],
          "group": "mailmap"
        },
        "git_mailmap_from_repository": {
          "kind": "function",
          "name": "git_mailmap_from_repository",
          "location": {
            "file": "mailmap.h",
            "line": 81,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_mailmap **",
              "direction": "in",
              "comment": "pointer to store the new mailmap"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository to load mailmap information from"
            }
          ],
          "comment": [
            "Create a new mailmap instance from a repository, loading mailmap files based\n on the repository's configuration.",
            "Mailmaps are loaded in the following order:\n  1. '.mailmap' in the root of the repository's working directory, if present.\n  2. The blob object identified by the 'mailmap.blob' config entry, if set.\n \t   [NOTE: 'mailmap.blob' defaults to 'HEAD:.mailmap' in bare repositories]\n  3. The path in the 'mailmap.file' config entry, if set."
          ],
          "group": "mailmap"
        },
        "git_mailmap_resolve": {
          "kind": "function",
          "name": "git_mailmap_resolve",
          "location": {
            "file": "mailmap.h",
            "line": 96,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "real_name",
              "type": "const char **",
              "direction": "in",
              "comment": "pointer to store the real name"
            },
            {
              "name": "real_email",
              "type": "const char **",
              "direction": "in",
              "comment": "pointer to store the real email"
            },
            {
              "name": "mm",
              "type": "const git_mailmap *",
              "direction": "in",
              "comment": "the mailmap to perform a lookup with (may be NULL)"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name to look up"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "the email to look up"
            }
          ],
          "comment": [
            "Resolve a name and email to the corresponding real name and email.",
            "The lifetime of the strings are tied to `mm`, `name`, and `email` parameters."
          ],
          "group": "mailmap"
        },
        "git_mailmap_resolve_signature": {
          "kind": "function",
          "name": "git_mailmap_resolve_signature",
          "location": {
            "file": "mailmap.h",
            "line": 110,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "new signature"
            },
            {
              "name": "mm",
              "type": "const git_mailmap *",
              "direction": "in",
              "comment": "mailmap to resolve with"
            },
            {
              "name": "sig",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature to resolve"
            }
          ],
          "comment": [
            "Resolve a signature to use real names and emails with a mailmap.",
            "Call `git_signature_free()` to free the data."
          ],
          "group": "mailmap"
        },
        "git_mailmap": {
          "kind": "struct",
          "name": "git_mailmap",
          "referenceName": "struct git_mailmap",
          "opaque": true,
          "comment": [
            "Representation of .mailmap file state."
          ],
          "location": {
            "file": "types.h",
            "line": 357,
            "column": 28
          },
          "group": "mailmap",
          "parameterTo": [
            "git_commit_committer_with_mailmap",
            "git_commit_author_with_mailmap",
            "git_mailmap_new",
            "git_mailmap_free",
            "git_mailmap_add_entry",
            "git_mailmap_from_buffer",
            "git_mailmap_from_repository",
            "git_mailmap_resolve",
            "git_mailmap_resolve_signature"
          ]
        }
      },
      "info": {
        "summary": "Mailmap parsing routines"
      }
    },
    "sys/mempack": {
      "apis": {
        "git_mempack_new": {
          "kind": "function",
          "name": "git_mempack_new",
          "location": {
            "file": "sys/mempack.h",
            "line": 45,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_backend **",
              "direction": "in",
              "comment": "Pointer where to store the ODB backend"
            }
          ],
          "comment": [
            "Instantiate a new mempack backend.",
            "The backend must be added to an existing ODB with the highest\n priority.",
            "git_mempack_new(\n&mempacker\n);\n     git_repository_odb(\n&odb\n, repository);\n     git_odb_add_backend(odb, mempacker, 999);",
            "Once the backend has been loaded, all writes to the ODB will\n instead be queued in memory, and can be finalized with\n `git_mempack_dump`.",
            "Subsequent reads will also be served from the in-memory store\n to ensure consistency, until the memory store is dumped."
          ],
          "group": "sys/mempack"
        },
        "git_mempack_dump": {
          "kind": "function",
          "name": "git_mempack_dump",
          "location": {
            "file": "sys/mempack.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "pack",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Buffer where to store the raw packfile"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The active repository where the backend is loaded"
            },
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "The mempack backend"
            }
          ],
          "comment": [
            "Dump all the queued in-memory writes to a packfile.",
            "The contents of the packfile will be stored in the given buffer.\n It is the caller's responsibility to ensure that the generated\n packfile is available to the repository (e.g. by writing it\n to disk, or doing something crazy like distributing it across\n several copies of the repository over a network).",
            "Once the generated packfile is available to the repository,\n call `git_mempack_reset` to cleanup the memory store.",
            "Calling `git_mempack_reset` before the packfile has been\n written to disk will result in an inconsistent repository\n (the objects in the memory store won't be accessible)."
          ],
          "group": "sys/mempack"
        },
        "git_mempack_reset": {
          "kind": "function",
          "name": "git_mempack_reset",
          "location": {
            "file": "sys/mempack.h",
            "line": 83,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "The mempack backend"
            }
          ],
          "comment": [
            "Reset the memory packer by clearing all the queued objects.",
            "This assumes that `git_mempack_dump` has been called before to\n store all the queued objects into a single packfile.",
            "Alternatively, call `reset` without a previous dump to \"undo\"\n all the recently written objects, giving transaction-like\n semantics to the Git repository."
          ],
          "group": "sys/mempack"
        }
      },
      "info": {
        "summary": "Custom ODB backend that permits packing objects in-memory"
      }
    },
    "merge": {
      "apis": {
        "git_merge_file_input": {
          "kind": "struct",
          "name": "git_merge_file_input",
          "referenceName": "git_merge_file_input",
          "comment": [
            "The file inputs to `git_merge_file`.  Callers should populate the\n `git_merge_file_input` structure with descriptions of the files in\n each side of the conflict for use in producing the merge file."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "ptr",
              "type": "const char *",
              "comment": [
                "Pointer to the contents of the file."
              ]
            },
            {
              "name": "size",
              "type": "size_t",
              "comment": [
                "Size of the contents pointed to in `ptr`."
              ]
            },
            {
              "name": "path",
              "type": "const char *",
              "comment": [
                "File name of the conflicted file, or `NULL` to not merge the path."
              ]
            },
            {
              "name": "mode",
              "type": "unsigned int",
              "comment": [
                "File mode of the conflicted file, or `0` to not merge the mode."
              ]
            }
          ],
          "location": {
            "file": "merge.h",
            "line": 32,
            "column": 9
          },
          "group": "merge",
          "parameterTo": [
            "git_merge_file_init_input",
            "git_merge_file_input_init",
            "git_merge_file"
          ]
        },
        "GIT_MERGE_FILE_INPUT_VERSION": {
          "kind": "macro",
          "name": "GIT_MERGE_FILE_INPUT_VERSION",
          "location": {
            "file": "merge.h",
            "line": 48,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "merge"
        },
        "GIT_MERGE_FILE_INPUT_INIT": {
          "kind": "macro",
          "name": "GIT_MERGE_FILE_INPUT_INIT",
          "location": {
            "file": "merge.h",
            "line": 49,
            "column": 9
          },
          "value": "{GIT_MERGE_FILE_INPUT_VERSION}",
          "comment": "",
          "group": "merge"
        },
        "git_merge_file_input_init": {
          "kind": "function",
          "name": "git_merge_file_input_init",
          "location": {
            "file": "merge.h",
            "line": 60,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_merge_file_input *",
              "direction": "in",
              "comment": "the `git_merge_file_input` instance to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the version of the struct; you should pass\n        `GIT_MERGE_FILE_INPUT_VERSION` here."
            }
          ],
          "comment": [
            "Initializes a `git_merge_file_input` with default values. Equivalent to\n creating an instance with GIT_MERGE_FILE_INPUT_INIT."
          ],
          "group": "merge"
        },
        "git_merge_flag_t": {
          "kind": "enum",
          "name": "git_merge_flag_t",
          "referenceName": "git_merge_flag_t",
          "members": [
            {
              "name": "GIT_MERGE_FIND_RENAMES",
              "value": "1",
              "comment": [
                "Detect renames that occur between the common ancestor and the \"ours\"\n side or the common ancestor and the \"theirs\" side.  This will enable\n the ability to merge between a modified and renamed file."
              ]
            },
            {
              "name": "GIT_MERGE_FAIL_ON_CONFLICT",
              "value": "2",
              "comment": [
                "If a conflict occurs, exit immediately instead of attempting to\n continue resolving conflicts.  The merge operation will fail with\n GIT_EMERGECONFLICT and no index will be returned."
              ]
            },
            {
              "name": "GIT_MERGE_SKIP_REUC",
              "value": "4",
              "comment": [
                "Do not write the REUC extension on the generated index"
              ]
            },
            {
              "name": "GIT_MERGE_NO_RECURSIVE",
              "value": "8",
              "comment": [
                "If the commits being merged have multiple merge bases, do not build\n a recursive merge base (by merging the multiple merge bases),\n instead simply use the first base.  This flag provides a similar\n merge base to `git-merge-resolve`."
              ]
            }
          ],
          "comment": [
            "Flags for `git_merge` options.  A combination of these flags can be\n passed in via the `flags` value in the `git_merge_options`."
          ],
          "location": {
            "file": "merge.h",
            "line": 68,
            "column": 9
          },
          "group": "merge"
        },
        "git_merge_file_favor_t": {
          "kind": "enum",
          "name": "git_merge_file_favor_t",
          "referenceName": "git_merge_file_favor_t",
          "members": [
            {
              "name": "GIT_MERGE_FILE_FAVOR_NORMAL",
              "value": "0",
              "comment": [
                "When a region of a file is changed in both branches, a conflict\n will be recorded in the index so that `git_checkout` can produce\n a merge file with conflict markers in the working directory.\n This is the default."
              ]
            },
            {
              "name": "GIT_MERGE_FILE_FAVOR_OURS",
              "value": "1",
              "comment": [
                "When a region of a file is changed in both branches, the file\n created in the index will contain the \"ours\" side of any conflicting\n region.  The index will not record a conflict."
              ]
            },
            {
              "name": "GIT_MERGE_FILE_FAVOR_THEIRS",
              "value": "2",
              "comment": [
                "When a region of a file is changed in both branches, the file\n created in the index will contain the \"theirs\" side of any conflicting\n region.  The index will not record a conflict."
              ]
            },
            {
              "name": "GIT_MERGE_FILE_FAVOR_UNION",
              "value": "3",
              "comment": [
                "When a region of a file is changed in both branches, the file\n created in the index will contain each unique line from each side,\n which has the result of combining both files.  The index will not\n record a conflict."
              ]
            }
          ],
          "comment": [
            "Merge file favor options for `git_merge_options` instruct the file-level\n merging functionality how to deal with conflicting regions of the files."
          ],
          "location": {
            "file": "merge.h",
            "line": 101,
            "column": 9
          },
          "group": "merge"
        },
        "git_merge_file_flag_t": {
          "kind": "enum",
          "name": "git_merge_file_flag_t",
          "referenceName": "git_merge_file_flag_t",
          "members": [
            {
              "name": "GIT_MERGE_FILE_DEFAULT",
              "value": "0",
              "comment": [
                "Defaults"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_STYLE_MERGE",
              "value": "1",
              "comment": [
                "Create standard conflicted merge files"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_STYLE_DIFF3",
              "value": "2",
              "comment": [
                "Create diff3-style files"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_SIMPLIFY_ALNUM",
              "value": "4",
              "comment": [
                "Condense non-alphanumeric regions for simplified diff file"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_IGNORE_WHITESPACE",
              "value": "8",
              "comment": [
                "Ignore all whitespace"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_IGNORE_WHITESPACE_CHANGE",
              "value": "16",
              "comment": [
                "Ignore changes in amount of whitespace"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_IGNORE_WHITESPACE_EOL",
              "value": "32",
              "comment": [
                "Ignore whitespace at end of line"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_DIFF_PATIENCE",
              "value": "64",
              "comment": [
                "Use the \"patience diff\" algorithm"
              ]
            },
            {
              "name": "GIT_MERGE_FILE_DIFF_MINIMAL",
              "value": "128",
              "comment": [
                "Take extra time to find minimal diff"
              ]
            }
          ],
          "comment": [
            "File merging flags"
          ],
          "location": {
            "file": "merge.h",
            "line": 136,
            "column": 9
          },
          "group": "merge"
        },
        "GIT_MERGE_CONFLICT_MARKER_SIZE": {
          "kind": "macro",
          "name": "GIT_MERGE_CONFLICT_MARKER_SIZE",
          "location": {
            "file": "merge.h",
            "line": 165,
            "column": 9
          },
          "value": "7",
          "comment": "",
          "group": "merge"
        },
        "git_merge_file_options": {
          "kind": "struct",
          "name": "git_merge_file_options",
          "referenceName": "git_merge_file_options",
          "comment": [
            "Options for merging a file"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "ancestor_label",
              "type": "const char *",
              "comment": [
                "Label for the ancestor file side of the conflict which will be prepended\n to labels in diff3-format merge files."
              ]
            },
            {
              "name": "our_label",
              "type": "const char *",
              "comment": [
                "Label for our file side of the conflict which will be prepended\n to labels in merge files."
              ]
            },
            {
              "name": "their_label",
              "type": "const char *",
              "comment": [
                "Label for their file side of the conflict which will be prepended\n to labels in merge files."
              ]
            },
            {
              "name": "favor",
              "type": "git_merge_file_favor_t",
              "comment": [
                "The file to favor in region conflicts."
              ],
              "referenceType": "enum git_merge_file_favor_t"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "see `git_merge_file_flag_t` above"
              ]
            },
            {
              "name": "marker_size",
              "type": "unsigned short",
              "comment": [
                "The size of conflict markers (eg, \"<<<<<<<\").  Default is\n GIT_MERGE_CONFLICT_MARKER_SIZE."
              ]
            }
          ],
          "location": {
            "file": "merge.h",
            "line": 170,
            "column": 9
          },
          "group": "merge",
          "returnedBy": [
            "git_merge_driver_source_file_options"
          ],
          "parameterTo": [
            "git_merge_file_init_options",
            "git_merge_file_options_init",
            "git_merge_file",
            "git_merge_file_from_index"
          ]
        },
        "GIT_MERGE_FILE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_MERGE_FILE_OPTIONS_VERSION",
          "location": {
            "file": "merge.h",
            "line": 202,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "merge"
        },
        "GIT_MERGE_FILE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_MERGE_FILE_OPTIONS_INIT",
          "location": {
            "file": "merge.h",
            "line": 203,
            "column": 9
          },
          "value": "{GIT_MERGE_FILE_OPTIONS_VERSION}",
          "comment": "",
          "group": "merge"
        },
        "git_merge_file_options_init": {
          "kind": "function",
          "name": "git_merge_file_options_init",
          "location": {
            "file": "merge.h",
            "line": 215,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_merge_file_options *",
              "direction": "in",
              "comment": "The `git_merge_file_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_MERGE_FILE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_merge_file_options structure",
            "Initializes a `git_merge_file_options` with default values. Equivalent to\n creating an instance with `GIT_MERGE_FILE_OPTIONS_INIT`."
          ],
          "group": "merge"
        },
        "git_merge_file_result": {
          "kind": "struct",
          "name": "git_merge_file_result",
          "referenceName": "git_merge_file_result",
          "comment": [
            "Information about file-level merging"
          ],
          "members": [
            {
              "name": "automergeable",
              "type": "unsigned int",
              "comment": [
                "True if the output was automerged, false if the output contains\n conflict markers."
              ]
            },
            {
              "name": "path",
              "type": "const char *",
              "comment": [
                "The path that the resultant merge file should use, or NULL if a\n filename conflict would occur."
              ]
            },
            {
              "name": "mode",
              "type": "unsigned int",
              "comment": [
                "The mode that the resultant merge file should use."
              ]
            },
            {
              "name": "ptr",
              "type": "const char *",
              "comment": [
                "The contents of the merge."
              ]
            },
            {
              "name": "len",
              "type": "size_t",
              "comment": [
                "The length of the merge contents."
              ]
            }
          ],
          "location": {
            "file": "merge.h",
            "line": 220,
            "column": 9
          },
          "group": "merge",
          "parameterTo": [
            "git_merge_file",
            "git_merge_file_from_index",
            "git_merge_file_result_free"
          ]
        },
        "git_merge_options": {
          "kind": "struct",
          "name": "git_merge_options",
          "referenceName": "git_merge_options",
          "comment": [
            "Merging options"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "See `git_merge_flag_t` above"
              ]
            },
            {
              "name": "rename_threshold",
              "type": "unsigned int",
              "comment": [
                "Similarity to consider a file renamed (default 50).  If\n `GIT_MERGE_FIND_RENAMES` is enabled, added files will be compared\n with deleted files to determine their similarity.  Files that are\n more similar than the rename threshold (percentage-wise) will be\n treated as a rename."
              ]
            },
            {
              "name": "target_limit",
              "type": "unsigned int",
              "comment": [
                "Maximum similarity sources to examine for renames (default 200).\n If the number of rename candidates (add / delete pairs) is greater\n than this value, inexact rename detection is aborted.",
                "This setting overrides the `merge.renameLimit` configuration value."
              ]
            },
            {
              "name": "metric",
              "type": "git_diff_similarity_metric *",
              "comment": [
                "Pluggable similarity metric; pass NULL to use internal metric"
              ]
            },
            {
              "name": "recursion_limit",
              "type": "unsigned int",
              "comment": [
                "Maximum number of times to merge common ancestors to build a\n virtual merge base when faced with criss-cross merges.  When this\n limit is reached, the next ancestor will simply be used instead of\n attempting to merge it.  The default is unlimited."
              ]
            },
            {
              "name": "default_driver",
              "type": "const char *",
              "comment": [
                "Default merge driver to be used when both sides of a merge have\n changed.  The default is the `text` driver."
              ]
            },
            {
              "name": "file_favor",
              "type": "git_merge_file_favor_t",
              "comment": [
                "Flags for handling conflicting content, to be used with the standard\n (`text`) merge driver."
              ],
              "referenceType": "enum git_merge_file_favor_t"
            },
            {
              "name": "file_flags",
              "type": "uint32_t",
              "comment": [
                "see `git_merge_file_flag_t` above"
              ]
            }
          ],
          "location": {
            "file": "merge.h",
            "line": 246,
            "column": 9
          },
          "group": "merge",
          "parameterTo": [
            "git_cherrypick_commit",
            "git_merge_init_options",
            "git_merge_options_init",
            "git_merge_trees",
            "git_merge_commits",
            "git_merge",
            "git_revert_commit"
          ]
        },
        "GIT_MERGE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_MERGE_OPTIONS_VERSION",
          "location": {
            "file": "merge.h",
            "line": 297,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "merge"
        },
        "GIT_MERGE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_MERGE_OPTIONS_INIT",
          "location": {
            "file": "merge.h",
            "line": 299,
            "column": 9
          },
          "value": "{ GIT_MERGE_OPTIONS_VERSION, GIT_MERGE_FIND_RENAMES }",
          "comment": "",
          "group": "merge"
        },
        "git_merge_options_init": {
          "kind": "function",
          "name": "git_merge_options_init",
          "location": {
            "file": "merge.h",
            "line": 311,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_merge_options *",
              "direction": "in",
              "comment": "The `git_merge_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_MERGE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_merge_options structure",
            "Initializes a `git_merge_options` with default values. Equivalent to\n creating an instance with `GIT_MERGE_OPTIONS_INIT`."
          ],
          "group": "merge"
        },
        "git_merge_analysis_t": {
          "kind": "enum",
          "name": "git_merge_analysis_t",
          "referenceName": "git_merge_analysis_t",
          "members": [
            {
              "name": "GIT_MERGE_ANALYSIS_NONE",
              "value": "0",
              "comment": [
                "No merge is possible.  (Unused.)"
              ]
            },
            {
              "name": "GIT_MERGE_ANALYSIS_NORMAL",
              "value": "1",
              "comment": [
                "A \"normal\" merge; both HEAD and the given merge input have diverged\n from their common ancestor.  The divergent commits must be merged."
              ]
            },
            {
              "name": "GIT_MERGE_ANALYSIS_UP_TO_DATE",
              "value": "2",
              "comment": [
                "All given merge inputs are reachable from HEAD, meaning the\n repository is up-to-date and no merge needs to be performed."
              ]
            },
            {
              "name": "GIT_MERGE_ANALYSIS_FASTFORWARD",
              "value": "4",
              "comment": [
                "The given merge input is a fast-forward from HEAD and no merge\n needs to be performed.  Instead, the client can check out the\n given merge input."
              ]
            },
            {
              "name": "GIT_MERGE_ANALYSIS_UNBORN",
              "value": "8",
              "comment": [
                "The HEAD of the current repository is \"unborn\" and does not point to\n a valid commit.  No merge can be performed, but the caller may wish\n to simply set HEAD to the target commit(s)."
              ]
            }
          ],
          "comment": [
            "The results of `git_merge_analysis` indicate the merge opportunities."
          ],
          "location": {
            "file": "merge.h",
            "line": 316,
            "column": 9
          },
          "group": "merge",
          "parameterTo": [
            "git_merge_analysis",
            "git_merge_analysis_for_ref"
          ]
        },
        "git_merge_preference_t": {
          "kind": "enum",
          "name": "git_merge_preference_t",
          "referenceName": "git_merge_preference_t",
          "members": [
            {
              "name": "GIT_MERGE_PREFERENCE_NONE",
              "value": "0",
              "comment": [
                "No configuration was found that suggests a preferred behavior for\n merge."
              ]
            },
            {
              "name": "GIT_MERGE_PREFERENCE_NO_FASTFORWARD",
              "value": "1",
              "comment": [
                "There is a `merge.ff=false` configuration setting, suggesting that\n the user does not want to allow a fast-forward merge."
              ]
            },
            {
              "name": "GIT_MERGE_PREFERENCE_FASTFORWARD_ONLY",
              "value": "2",
              "comment": [
                "There is a `merge.ff=only` configuration setting, suggesting that\n the user only wants fast-forward merges."
              ]
            }
          ],
          "comment": [
            "The user's stated preference for merges."
          ],
          "location": {
            "file": "merge.h",
            "line": 350,
            "column": 9
          },
          "group": "merge",
          "parameterTo": [
            "git_merge_analysis",
            "git_merge_analysis_for_ref"
          ]
        },
        "git_merge_analysis": {
          "kind": "function",
          "name": "git_merge_analysis",
          "location": {
            "file": "merge.h",
            "line": 380,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "analysis_out",
              "type": "git_merge_analysis_t *",
              "direction": "in",
              "comment": "analysis enumeration that the result is written into"
            },
            {
              "name": "preference_out",
              "type": "git_merge_preference_t *"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to merge"
            },
            {
              "name": "their_heads",
              "type": "const git_annotated_commit **",
              "direction": "in",
              "comment": "the heads to merge into"
            },
            {
              "name": "their_heads_len",
              "type": "size_t",
              "direction": "in",
              "comment": "the number of heads to merge"
            }
          ],
          "comment": [
            "Analyzes the given branch(es) and determines the opportunities for\n merging them into the HEAD of the repository."
          ],
          "group": "merge"
        },
        "git_merge_analysis_for_ref": {
          "kind": "function",
          "name": "git_merge_analysis_for_ref",
          "location": {
            "file": "merge.h",
            "line": 398,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "analysis_out",
              "type": "git_merge_analysis_t *",
              "direction": "in",
              "comment": "analysis enumeration that the result is written into"
            },
            {
              "name": "preference_out",
              "type": "git_merge_preference_t *"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to merge"
            },
            {
              "name": "our_ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "the reference to perform the analysis from"
            },
            {
              "name": "their_heads",
              "type": "const git_annotated_commit **",
              "direction": "in",
              "comment": "the heads to merge into"
            },
            {
              "name": "their_heads_len",
              "type": "size_t",
              "direction": "in",
              "comment": "the number of heads to merge"
            }
          ],
          "comment": [
            "Analyzes the given branch(es) and determines the opportunities for\n merging them into a reference."
          ],
          "group": "merge"
        },
        "git_merge_base": {
          "kind": "function",
          "name": "git_merge_base",
          "location": {
            "file": "merge.h",
            "line": 415,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if not found or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the OID of a merge base between 'one' and 'two'"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the commits exist"
            },
            {
              "name": "one",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "one of the commits"
            },
            {
              "name": "two",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the other commit"
            }
          ],
          "comment": [
            "Find a merge base between two commits"
          ],
          "group": "merge"
        },
        "git_merge_bases": {
          "kind": "function",
          "name": "git_merge_bases",
          "location": {
            "file": "merge.h",
            "line": 430,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if not found or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oidarray *",
              "direction": "in",
              "comment": "array in which to store the resulting ids"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the commits exist"
            },
            {
              "name": "one",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "one of the commits"
            },
            {
              "name": "two",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the other commit"
            }
          ],
          "comment": [
            "Find merge bases between two commits"
          ],
          "group": "merge"
        },
        "git_merge_base_many": {
          "kind": "function",
          "name": "git_merge_base_many",
          "location": {
            "file": "merge.h",
            "line": 445,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; GIT_ENOTFOUND or -1 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the OID of a merge base considering all the commits"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the commits exist"
            },
            {
              "name": "length",
              "type": "size_t",
              "direction": "in",
              "comment": "The number of commits in the provided `input_array`"
            },
            {
              "name": "input_array",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oids of the commits"
            }
          ],
          "comment": [
            "Find a merge base given a list of commits"
          ],
          "group": "merge"
        },
        "git_merge_bases_many": {
          "kind": "function",
          "name": "git_merge_bases_many",
          "location": {
            "file": "merge.h",
            "line": 460,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; GIT_ENOTFOUND or -1 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oidarray *",
              "direction": "in",
              "comment": "array in which to store the resulting ids"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the commits exist"
            },
            {
              "name": "length",
              "type": "size_t",
              "direction": "in",
              "comment": "The number of commits in the provided `input_array`"
            },
            {
              "name": "input_array",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oids of the commits"
            }
          ],
          "comment": [
            "Find all merge bases given a list of commits"
          ],
          "group": "merge"
        },
        "git_merge_base_octopus": {
          "kind": "function",
          "name": "git_merge_base_octopus",
          "location": {
            "file": "merge.h",
            "line": 475,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; GIT_ENOTFOUND or -1 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the OID of a merge base considering all the commits"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository where the commits exist"
            },
            {
              "name": "length",
              "type": "size_t",
              "direction": "in",
              "comment": "The number of commits in the provided `input_array`"
            },
            {
              "name": "input_array",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oids of the commits"
            }
          ],
          "comment": [
            "Find a merge base in preparation for an octopus merge"
          ],
          "group": "merge"
        },
        "git_merge_file": {
          "kind": "function",
          "name": "git_merge_file",
          "location": {
            "file": "merge.h",
            "line": 497,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_merge_file_result *",
              "direction": "in",
              "comment": "The git_merge_file_result to be filled in"
            },
            {
              "name": "ancestor",
              "type": "const git_merge_file_input *",
              "direction": "in",
              "comment": "The contents of the ancestor file"
            },
            {
              "name": "ours",
              "type": "const git_merge_file_input *",
              "direction": "in",
              "comment": "The contents of the file in \"our\" side"
            },
            {
              "name": "theirs",
              "type": "const git_merge_file_input *",
              "direction": "in",
              "comment": "The contents of the file in \"their\" side"
            },
            {
              "name": "opts",
              "type": "const git_merge_file_options *",
              "direction": "in",
              "comment": "The merge file options or `NULL` for defaults"
            }
          ],
          "comment": [
            "Merge two files as they exist in the in-memory data structures, using\n the given common ancestor as the baseline, producing a\n `git_merge_file_result` that reflects the merge result.  The\n `git_merge_file_result` must be freed with `git_merge_file_result_free`.",
            "Note that this function does not reference a repository and any\n configuration must be passed as `git_merge_file_options`."
          ],
          "group": "merge"
        },
        "git_merge_file_from_index": {
          "kind": "function",
          "name": "git_merge_file_from_index",
          "location": {
            "file": "merge.h",
            "line": 518,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_merge_file_result *",
              "direction": "in",
              "comment": "The git_merge_file_result to be filled in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository"
            },
            {
              "name": "ancestor",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "The index entry for the ancestor file (stage level 1)"
            },
            {
              "name": "ours",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "The index entry for our file (stage level 2)"
            },
            {
              "name": "theirs",
              "type": "const git_index_entry *",
              "direction": "in",
              "comment": "The index entry for their file (stage level 3)"
            },
            {
              "name": "opts",
              "type": "const git_merge_file_options *",
              "direction": "in",
              "comment": "The merge file options or NULL"
            }
          ],
          "comment": [
            "Merge two files as they exist in the index, using the given common\n ancestor as the baseline, producing a `git_merge_file_result` that\n reflects the merge result.  The `git_merge_file_result` must be freed with\n `git_merge_file_result_free`."
          ],
          "group": "merge"
        },
        "git_merge_file_result_free": {
          "kind": "function",
          "name": "git_merge_file_result_free",
          "location": {
            "file": "merge.h",
            "line": 531,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "result",
              "type": "git_merge_file_result *",
              "direction": "in",
              "comment": "The result to free or `NULL`"
            }
          ],
          "comment": [
            "Frees a `git_merge_file_result`."
          ],
          "group": "merge"
        },
        "git_merge_trees": {
          "kind": "function",
          "name": "git_merge_trees",
          "location": {
            "file": "merge.h",
            "line": 549,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "pointer to store the index result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository that contains the given trees"
            },
            {
              "name": "ancestor_tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "the common ancestor between the trees (or null if none)"
            },
            {
              "name": "our_tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "the tree that reflects the destination tree"
            },
            {
              "name": "their_tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "the tree to merge in to `our_tree`"
            },
            {
              "name": "opts",
              "type": "const git_merge_options *",
              "direction": "in",
              "comment": "the merge tree options (or null for defaults)"
            }
          ],
          "comment": [
            "Merge two trees, producing a `git_index` that reflects the result of\n the merge.  The index may be written as-is to the working directory\n or checked out.  If the index is to be converted to a tree, the caller\n should resolve any conflicts that arose as part of the merge.",
            "The returned index must be freed explicitly with `git_index_free`."
          ],
          "group": "merge"
        },
        "git_merge_commits": {
          "kind": "function",
          "name": "git_merge_commits",
          "location": {
            "file": "merge.h",
            "line": 572,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "pointer to store the index result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository that contains the given trees"
            },
            {
              "name": "our_commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "the commit that reflects the destination tree"
            },
            {
              "name": "their_commit",
              "type": "const git_commit *",
              "direction": "in",
              "comment": "the commit to merge in to `our_commit`"
            },
            {
              "name": "opts",
              "type": "const git_merge_options *",
              "direction": "in",
              "comment": "the merge tree options (or null for defaults)"
            }
          ],
          "comment": [
            "Merge two commits, producing a `git_index` that reflects the result of\n the merge.  The index may be written as-is to the working directory\n or checked out.  If the index is to be converted to a tree, the caller\n should resolve any conflicts that arose as part of the merge.",
            "The returned index must be freed explicitly with `git_index_free`."
          ],
          "group": "merge"
        },
        "git_merge": {
          "kind": "function",
          "name": "git_merge",
          "location": {
            "file": "merge.h",
            "line": 597,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to merge"
            },
            {
              "name": "their_heads",
              "type": "const git_annotated_commit **",
              "direction": "in",
              "comment": "the heads to merge into"
            },
            {
              "name": "their_heads_len",
              "type": "size_t",
              "direction": "in",
              "comment": "the number of heads to merge"
            },
            {
              "name": "merge_opts",
              "type": "const git_merge_options *",
              "direction": "in",
              "comment": "merge options"
            },
            {
              "name": "checkout_opts",
              "type": "const git_checkout_options *",
              "direction": "in",
              "comment": "checkout options"
            }
          ],
          "comment": [
            "Merges the given commit(s) into HEAD, writing the results into the working\n directory.  Any changes are staged for commit and any conflicts are written\n to the index.  Callers should inspect the repository's index after this\n completes, resolve any conflicts and prepare a commit.",
            "For compatibility with git, the repository is put into a merging\n state. Once the commit is done (or if the uses wishes to abort),\n you should clear this state by calling\n `git_repository_state_cleanup()`."
          ],
          "group": "merge"
        }
      },
      "info": {
        "summary": "Git merge routines"
      }
    },
    "sys/merge": {
      "apis": {
        "git_merge_driver_lookup": {
          "kind": "function",
          "name": "git_merge_driver_lookup",
          "location": {
            "file": "sys/merge.h",
            "line": 32,
            "column": 32
          },
          "returns": {
            "type": "git_merge_driver *",
            "comment": "Pointer to the merge driver object or NULL if not found"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the merge driver"
            }
          ],
          "comment": [
            "Look up a merge driver by name"
          ],
          "group": "sys/merge"
        },
        "GIT_MERGE_DRIVER_TEXT": {
          "kind": "macro",
          "name": "GIT_MERGE_DRIVER_TEXT",
          "location": {
            "file": "sys/merge.h",
            "line": 34,
            "column": 9
          },
          "value": "\"text\"",
          "comment": "",
          "group": "sys/merge"
        },
        "GIT_MERGE_DRIVER_BINARY": {
          "kind": "macro",
          "name": "GIT_MERGE_DRIVER_BINARY",
          "location": {
            "file": "sys/merge.h",
            "line": 35,
            "column": 9
          },
          "value": "\"binary\"",
          "comment": "",
          "group": "sys/merge"
        },
        "GIT_MERGE_DRIVER_UNION": {
          "kind": "macro",
          "name": "GIT_MERGE_DRIVER_UNION",
          "location": {
            "file": "sys/merge.h",
            "line": 36,
            "column": 9
          },
          "value": "\"union\"",
          "comment": "",
          "group": "sys/merge"
        },
        "git_merge_driver_source": {
          "kind": "struct",
          "name": "git_merge_driver_source",
          "referenceName": "struct git_merge_driver_source",
          "opaque": true,
          "comment": [
            "A merge driver source represents the file to be merged"
          ],
          "location": {
            "file": "sys/merge.h",
            "line": 41,
            "column": 40
          },
          "group": "sys/merge",
          "parameterTo": [
            "git_merge_driver_source_repo",
            "git_merge_driver_source_ancestor",
            "git_merge_driver_source_ours",
            "git_merge_driver_source_theirs",
            "git_merge_driver_source_file_options",
            "git_merge_driver_apply_fn"
          ]
        },
        "git_merge_driver_source_repo": {
          "kind": "function",
          "name": "git_merge_driver_source_repo",
          "location": {
            "file": "sys/merge.h",
            "line": 44,
            "column": 30
          },
          "returns": {
            "type": "git_repository *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_merge_driver_source *"
            }
          ],
          "comment": [
            "Get the repository that the source data is coming from."
          ],
          "group": "sys/merge"
        },
        "git_merge_driver_source_ancestor": {
          "kind": "function",
          "name": "git_merge_driver_source_ancestor",
          "location": {
            "file": "sys/merge.h",
            "line": 48,
            "column": 37
          },
          "returns": {
            "type": "const git_index_entry *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_merge_driver_source *"
            }
          ],
          "comment": [
            "Gets the ancestor of the file to merge."
          ],
          "group": "sys/merge"
        },
        "git_merge_driver_source_ours": {
          "kind": "function",
          "name": "git_merge_driver_source_ours",
          "location": {
            "file": "sys/merge.h",
            "line": 52,
            "column": 37
          },
          "returns": {
            "type": "const git_index_entry *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_merge_driver_source *"
            }
          ],
          "comment": [
            "Gets the ours side of the file to merge."
          ],
          "group": "sys/merge"
        },
        "git_merge_driver_source_theirs": {
          "kind": "function",
          "name": "git_merge_driver_source_theirs",
          "location": {
            "file": "sys/merge.h",
            "line": 56,
            "column": 37
          },
          "returns": {
            "type": "const git_index_entry *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_merge_driver_source *"
            }
          ],
          "comment": [
            "Gets the theirs side of the file to merge."
          ],
          "group": "sys/merge"
        },
        "git_merge_driver_source_file_options": {
          "kind": "function",
          "name": "git_merge_driver_source_file_options",
          "location": {
            "file": "sys/merge.h",
            "line": 60,
            "column": 44
          },
          "returns": {
            "type": "const git_merge_file_options *"
          },
          "params": [
            {
              "name": "src",
              "type": "const git_merge_driver_source *"
            }
          ],
          "comment": [
            "Gets the merge file options that the merge was invoked with"
          ],
          "group": "sys/merge"
        },
        "git_merge_driver_init_fn": {
          "kind": "callback",
          "name": "git_merge_driver_init_fn",
          "type": "int (*)(git_merge_driver *)",
          "comment": [
            "Initialize callback on merge driver",
            "Specified as `driver.initialize`, this is an optional callback invoked\n before a merge driver is first used.  It will be called once at most\n per library lifetime.",
            "If non-NULL, the merge driver's `initialize` callback will be invoked\n right before the first use of the driver, so you can defer expensive\n initialization operations (in case libgit2 is being used in a way that\n doesn't need the merge driver)."
          ],
          "location": {
            "file": "sys/merge.h",
            "line": 76,
            "column": 26
          },
          "params": [
            {
              "type": "git_merge_driver *"
            }
          ],
          "group": "sys/merge",
          "typedef": true
        },
        "git_merge_driver_shutdown_fn": {
          "kind": "callback",
          "name": "git_merge_driver_shutdown_fn",
          "type": "void (*)(git_merge_driver *)",
          "comment": [
            "Shutdown callback on merge driver",
            "Specified as `driver.shutdown`, this is an optional callback invoked\n when the merge driver is unregistered or when libgit2 is shutting down.\n It will be called once at most and should release resources as needed.\n This may be called even if the `initialize` callback was not made.",
            "Typically this function will free the `git_merge_driver` object itself."
          ],
          "location": {
            "file": "sys/merge.h",
            "line": 88,
            "column": 27
          },
          "params": [
            {
              "type": "git_merge_driver *"
            }
          ],
          "returns": {
            "type": "void"
          },
          "group": "sys/merge",
          "typedef": true
        },
        "git_merge_driver_apply_fn": {
          "kind": "callback",
          "name": "git_merge_driver_apply_fn",
          "type": "int (*)(git_merge_driver *, const char **, uint32_t *, git_buf *, const char *, const git_merge_driver_source *)",
          "comment": [
            "Callback to perform the merge.",
            "Specified as `driver.apply`, this is the callback that actually does the\n merge.  If it can successfully perform a merge, it should populate\n `path_out` with a pointer to the filename to accept, `mode_out` with\n the resultant mode, and `merged_out` with the buffer of the merged file\n and then return 0.  If the driver returns `GIT_PASSTHROUGH`, then the\n default merge driver should instead be run.  It can also return\n `GIT_EMERGECONFLICT` if the driver is not able to produce a merge result,\n and the file will remain conflicted.  Any other errors will fail and\n return to the caller.",
            "The `filter_name` contains the name of the filter that was invoked, as\n specified by the file's attributes.",
            "The `src` contains the data about the file to be merged."
          ],
          "location": {
            "file": "sys/merge.h",
            "line": 108,
            "column": 26
          },
          "params": [
            {
              "type": "git_merge_driver *"
            },
            {
              "type": "const char **"
            },
            {
              "type": "uint32_t *"
            },
            {
              "type": "git_buf *"
            },
            {
              "type": "const char *"
            },
            {
              "type": "const git_merge_driver_source *"
            }
          ],
          "group": "sys/merge",
          "typedef": true
        },
        "git_merge_driver": {
          "kind": "struct",
          "name": "git_merge_driver",
          "referenceName": "struct git_merge_driver",
          "comment": [
            "Merge driver structure used to register custom merge drivers.",
            "To associate extra data with a driver, allocate extra data and put the\n `git_merge_driver` struct at the start of your data buffer, then cast\n the `self` pointer to your larger structure when your callback is invoked."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The `version` should be set to `GIT_MERGE_DRIVER_VERSION`."
              ]
            },
            {
              "name": "initialize",
              "type": "git_merge_driver_init_fn",
              "comment": [
                "Called when the merge driver is first used for any file."
              ],
              "referenceType": "int (*)(git_merge_driver *)"
            },
            {
              "name": "shutdown",
              "type": "git_merge_driver_shutdown_fn",
              "comment": [
                "Called when the merge driver is unregistered from the system."
              ],
              "referenceType": "void (*)(git_merge_driver *)"
            },
            {
              "name": "apply",
              "type": "git_merge_driver_apply_fn",
              "comment": [
                "Called to merge the contents of a conflict.  If this function\n returns `GIT_PASSTHROUGH` then the default (`text`) merge driver\n will instead be invoked.  If this function returns\n `GIT_EMERGECONFLICT` then the file will remain conflicted."
              ],
              "referenceType": "int (*)(git_merge_driver *, const char **, uint32_t *, git_buf *, const char *, const git_merge_driver_source *)"
            }
          ],
          "location": {
            "file": "sys/merge.h",
            "line": 123,
            "column": 8
          },
          "group": "sys/merge",
          "returnedBy": [
            "git_merge_driver_lookup"
          ],
          "parameterTo": [
            "git_merge_driver_init_fn",
            "git_merge_driver_shutdown_fn",
            "git_merge_driver_apply_fn",
            "git_merge_driver_register"
          ]
        },
        "GIT_MERGE_DRIVER_VERSION": {
          "kind": "macro",
          "name": "GIT_MERGE_DRIVER_VERSION",
          "location": {
            "file": "sys/merge.h",
            "line": 142,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/merge"
        },
        "git_merge_driver_register": {
          "kind": "function",
          "name": "git_merge_driver_register",
          "location": {
            "file": "sys/merge.h",
            "line": 162,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on successful registry, error code \n<\n0 on failure"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of this driver to match an attribute.  Attempting\n \t\t\tto register with an in-use name will return GIT_EEXISTS."
            },
            {
              "name": "driver",
              "type": "git_merge_driver *",
              "direction": "in",
              "comment": "The merge driver definition.  This pointer will be stored\n\t\t\tas is by libgit2 so it must be a durable allocation (either\n\t\t\tstatic or on the heap)."
            }
          ],
          "comment": [
            "Register a merge driver under a given name.",
            "As mentioned elsewhere, the initialize callback will not be invoked\n immediately.  It is deferred until the driver is used in some way.",
            "Currently the merge driver registry is not thread safe, so any\n registering or deregistering of merge drivers must be done outside of\n any possible usage of the drivers (i.e. during application setup or\n shutdown)."
          ],
          "group": "sys/merge"
        },
        "git_merge_driver_unregister": {
          "kind": "function",
          "name": "git_merge_driver_unregister",
          "location": {
            "file": "sys/merge.h",
            "line": 178,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, error code \n<\n0 on failure"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name under which the merge driver was registered"
            }
          ],
          "comment": [
            "Remove the merge driver with the given name.",
            "Attempting to remove the builtin libgit2 merge drivers is not permitted\n and will return an error.",
            "Currently the merge driver registry is not thread safe, so any\n registering or deregistering of drivers must be done outside of any\n possible usage of the drivers (i.e. during application setup or shutdown)."
          ],
          "group": "sys/merge"
        }
      },
      "info": {
        "summary": "Git merge driver backend and plugin routines"
      }
    },
    "message": {
      "apis": {
        "git_message_prettify": {
          "kind": "function",
          "name": "git_message_prettify",
          "location": {
            "file": "message.h",
            "line": 38,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The user-allocated git_buf which will be filled with the\n     cleaned up message."
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "The message to be prettified."
            },
            {
              "name": "strip_comments",
              "type": "int",
              "direction": "in",
              "comment": "Non-zero to remove comment lines, 0 to leave them in."
            },
            {
              "name": "comment_char",
              "type": "char",
              "direction": "in",
              "comment": "Comment character. Lines starting with this character\n are considered to be comments and removed if `strip_comments` is non-zero."
            }
          ],
          "comment": [
            "Clean up excess whitespace and make sure there is a trailing newline in the message.",
            "Optionally, it can remove lines which start with the comment character."
          ],
          "group": "message"
        },
        "git_message_trailer": {
          "kind": "struct",
          "name": "git_message_trailer",
          "referenceName": "git_message_trailer",
          "comment": [
            "Represents a single git message trailer."
          ],
          "members": [
            {
              "name": "key",
              "type": "const char *"
            },
            {
              "name": "value",
              "type": "const char *"
            }
          ],
          "location": {
            "file": "message.h",
            "line": 43,
            "column": 9
          },
          "group": "message"
        },
        "git_message_trailer_array": {
          "kind": "struct",
          "name": "git_message_trailer_array",
          "referenceName": "git_message_trailer_array",
          "comment": [
            "Represents an array of git message trailers.",
            "Struct members under the private comment are private, subject to change\n and should not be used by callers."
          ],
          "members": [
            {
              "name": "trailers",
              "type": "git_message_trailer *"
            },
            {
              "name": "count",
              "type": "size_t"
            },
            {
              "name": "_trailer_block",
              "type": "char *"
            }
          ],
          "location": {
            "file": "message.h",
            "line": 54,
            "column": 9
          },
          "group": "message",
          "parameterTo": [
            "git_message_trailers",
            "git_message_trailer_array_free"
          ]
        },
        "git_message_trailers": {
          "kind": "function",
          "name": "git_message_trailers",
          "location": {
            "file": "message.h",
            "line": 73,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or non-zero on error."
          },
          "params": [
            {
              "name": "arr",
              "type": "git_message_trailer_array *",
              "direction": "in",
              "comment": "A pre-allocated git_message_trailer_array struct to be filled in\n            with any trailers found during parsing."
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "The message to be parsed"
            }
          ],
          "comment": [
            "Parse trailers out of a message, filling the array pointed to by +arr+.",
            "Trailers are key/value pairs in the last paragraph of a message, not\n including any patches or conflicts that may be present."
          ],
          "group": "message"
        },
        "git_message_trailer_array_free": {
          "kind": "function",
          "name": "git_message_trailer_array_free",
          "location": {
            "file": "message.h",
            "line": 79,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "arr",
              "type": "git_message_trailer_array *"
            }
          ],
          "comment": [
            "Clean's up any allocated memory in the git_message_trailer_array filled by\n a call to git_message_trailers."
          ],
          "group": "message"
        }
      },
      "info": {
        "summary": "Git message management routines"
      }
    },
    "net": {
      "apis": {
        "GIT_DEFAULT_PORT": {
          "kind": "macro",
          "name": "GIT_DEFAULT_PORT",
          "location": {
            "file": "net.h",
            "line": 22,
            "column": 9
          },
          "value": "\"9418\"",
          "comment": "",
          "group": "net"
        },
        "git_direction": {
          "kind": "enum",
          "name": "git_direction",
          "referenceName": "git_direction",
          "members": [
            {
              "name": "GIT_DIRECTION_FETCH",
              "value": "0"
            },
            {
              "name": "GIT_DIRECTION_PUSH",
              "value": "1"
            }
          ],
          "comment": [
            "Direction of the connection.",
            "We need this because we need to know whether we should call\n git-upload-pack or git-receive-pack on the remote end when get_refs\n gets called."
          ],
          "location": {
            "file": "net.h",
            "line": 31,
            "column": 9
          },
          "group": "net",
          "returnedBy": [
            "git_refspec_direction"
          ],
          "parameterTo": [
            "git_remote_connect"
          ]
        },
        "git_remote_head": {
          "kind": "struct",
          "name": "git_remote_head",
          "referenceName": "struct git_remote_head",
          "comment": [
            "Description of a reference advertised by a remote server, given out\n on `ls` calls."
          ],
          "members": [
            {
              "name": "local",
              "type": "int"
            },
            {
              "name": "oid",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "loid",
              "type": "git_oid",
              "referenceType": "struct git_oid"
            },
            {
              "name": "name",
              "type": "char *"
            },
            {
              "name": "symref_target",
              "type": "char *",
              "comment": [
                "If the server send a symref mapping for this ref, this will\n point to the target."
              ]
            }
          ],
          "location": {
            "file": "net.h",
            "line": 40,
            "column": 8
          },
          "group": "net",
          "parameterTo": [
            "git_headlist_cb",
            "git_remote_ls"
          ]
        }
      },
      "info": {
        "summary": "Git networking declarations"
      }
    },
    "notes": {
      "apis": {
        "git_note_foreach_cb": {
          "kind": "callback",
          "name": "git_note_foreach_cb",
          "type": "int (*)(const git_oid *, const git_oid *, void *)",
          "comment": [
            "Callback for git_note_foreach.",
            "Receives:\n - blob_id: Oid of the blob containing the message\n - annotated_object_id: Oid of the git object being annotated\n - payload: Payload data passed to `git_note_foreach`"
          ],
          "location": {
            "file": "notes.h",
            "line": 29,
            "column": 26
          },
          "params": [
            {
              "type": "const git_oid *"
            },
            {
              "type": "const git_oid *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "notes",
          "parameterTo": [
            "git_note_foreach"
          ],
          "typedef": true
        },
        "git_note_iterator": {
          "kind": "struct",
          "name": "git_note_iterator",
          "referenceName": "struct git_iterator",
          "opaque": true,
          "comment": [
            "note iterator"
          ],
          "location": {
            "file": "notes.h",
            "line": 35,
            "column": 29
          },
          "group": "notes",
          "parameterTo": [
            "git_note_iterator_new",
            "git_note_commit_iterator_new",
            "git_note_iterator_free",
            "git_note_next"
          ]
        },
        "git_note_iterator_new": {
          "kind": "function",
          "name": "git_note_iterator_new",
          "location": {
            "file": "notes.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_note_iterator **",
              "direction": "in",
              "comment": "pointer to the iterator"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to look up the note"
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "canonical name of the reference to use (optional); defaults to\n                  \"refs/notes/commits\""
            }
          ],
          "comment": [
            "Creates a new iterator for notes",
            "The iterator must be freed manually by the user."
          ],
          "group": "notes"
        },
        "git_note_commit_iterator_new": {
          "kind": "function",
          "name": "git_note_commit_iterator_new",
          "location": {
            "file": "notes.h",
            "line": 64,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_note_iterator **",
              "direction": "in",
              "comment": "pointer to the iterator"
            },
            {
              "name": "notes_commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a pointer to the notes commit object"
            }
          ],
          "comment": [
            "Creates a new iterator for notes from a commit",
            "The iterator must be freed manually by the user."
          ],
          "group": "notes"
        },
        "git_note_iterator_free": {
          "kind": "function",
          "name": "git_note_iterator_free",
          "location": {
            "file": "notes.h",
            "line": 73,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "it",
              "type": "git_note_iterator *",
              "direction": "in",
              "comment": "pointer to the iterator"
            }
          ],
          "comment": [
            "Frees an git_note_iterator"
          ],
          "group": "notes"
        },
        "git_note_next": {
          "kind": "function",
          "name": "git_note_next",
          "location": {
            "file": "notes.h",
            "line": 86,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 (no error), GIT_ITEROVER (iteration is done) or an error code\n         (negative value)"
          },
          "params": [
            {
              "name": "note_id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "id of blob containing the message"
            },
            {
              "name": "annotated_id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "id of the git object being annotated"
            },
            {
              "name": "it",
              "type": "git_note_iterator *",
              "direction": "in",
              "comment": "pointer to the iterator"
            }
          ],
          "comment": [
            "Return the current item (note_id and annotated_id) and advance the iterator\n internally to the next value"
          ],
          "group": "notes"
        },
        "git_note_read": {
          "kind": "function",
          "name": "git_note_read",
          "location": {
            "file": "notes.h",
            "line": 105,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_note **",
              "direction": "in",
              "comment": "pointer to the read note; NULL in case of error"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to look up the note"
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "canonical name of the reference to use (optional); defaults to\n                  \"refs/notes/commits\""
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "OID of the git object to read the note from"
            }
          ],
          "comment": [
            "Read the note for an object",
            "The note must be freed manually by the user."
          ],
          "group": "notes"
        },
        "git_note_commit_read": {
          "kind": "function",
          "name": "git_note_commit_read",
          "location": {
            "file": "notes.h",
            "line": 124,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_note **",
              "direction": "in",
              "comment": "pointer to the read note; NULL in case of error"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to look up the note"
            },
            {
              "name": "notes_commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a pointer to the notes commit object"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "OID of the git object to read the note from"
            }
          ],
          "comment": [
            "Read the note for an object from a note commit",
            "The note must be freed manually by the user."
          ],
          "group": "notes"
        },
        "git_note_author": {
          "kind": "function",
          "name": "git_note_author",
          "location": {
            "file": "notes.h",
            "line": 136,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the author"
          },
          "params": [
            {
              "name": "note",
              "type": "const git_note *",
              "direction": "in",
              "comment": "the note"
            }
          ],
          "comment": [
            "Get the note author"
          ],
          "group": "notes"
        },
        "git_note_committer": {
          "kind": "function",
          "name": "git_note_committer",
          "location": {
            "file": "notes.h",
            "line": 144,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the committer"
          },
          "params": [
            {
              "name": "note",
              "type": "const git_note *",
              "direction": "in",
              "comment": "the note"
            }
          ],
          "comment": [
            "Get the note committer"
          ],
          "group": "notes"
        },
        "git_note_message": {
          "kind": "function",
          "name": "git_note_message",
          "location": {
            "file": "notes.h",
            "line": 153,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the note message"
          },
          "params": [
            {
              "name": "note",
              "type": "const git_note *",
              "direction": "in",
              "comment": "the note"
            }
          ],
          "comment": [
            "Get the note message"
          ],
          "group": "notes"
        },
        "git_note_id": {
          "kind": "function",
          "name": "git_note_id",
          "location": {
            "file": "notes.h",
            "line": 162,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the note object's id"
          },
          "params": [
            {
              "name": "note",
              "type": "const git_note *",
              "direction": "in",
              "comment": "the note"
            }
          ],
          "comment": [
            "Get the note object's id"
          ],
          "group": "notes"
        },
        "git_note_create": {
          "kind": "function",
          "name": "git_note_create",
          "location": {
            "file": "notes.h",
            "line": 179,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "pointer to store the OID (optional); NULL in case of error"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to store the note"
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "canonical name of the reference to use (optional);\n\t\t\t\t\tdefaults to \"refs/notes/commits\""
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit author"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit committer"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "OID of the git object to decorate"
            },
            {
              "name": "note",
              "type": "const char *",
              "direction": "in",
              "comment": "Content of the note to add for object oid"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing note"
            }
          ],
          "comment": [
            "Add a note for an object"
          ],
          "group": "notes"
        },
        "git_note_commit_create": {
          "kind": "function",
          "name": "git_note_commit_create",
          "location": {
            "file": "notes.h",
            "line": 209,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "notes_commit_out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "pointer to store the commit (optional);\n\t\t\t\t\tNULL in case of error"
            },
            {
              "name": "notes_blob_out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "a point to the id of a note blob (optional)"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the note will live"
            },
            {
              "name": "parent",
              "type": "git_commit *",
              "direction": "in",
              "comment": "Pointer to parent note\n\t\t\t\t\tor NULL if this shall start a new notes tree"
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit author"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit committer"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "OID of the git object to decorate"
            },
            {
              "name": "note",
              "type": "const char *",
              "direction": "in",
              "comment": "Content of the note to add for object oid"
            },
            {
              "name": "allow_note_overwrite",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing note"
            }
          ],
          "comment": [
            "Add a note for an object from a commit",
            "This function will create a notes commit for a given object,\n the commit is a dangling commit, no reference is created."
          ],
          "group": "notes"
        },
        "git_note_remove": {
          "kind": "function",
          "name": "git_note_remove",
          "location": {
            "file": "notes.h",
            "line": 232,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the note lives"
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "canonical name of the reference to use (optional);\n\t\t\t\t\tdefaults to \"refs/notes/commits\""
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit author"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit committer"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "OID of the git object to remove the note from"
            }
          ],
          "comment": [
            "Remove the note for an object"
          ],
          "group": "notes"
        },
        "git_note_commit_remove": {
          "kind": "function",
          "name": "git_note_commit_remove",
          "location": {
            "file": "notes.h",
            "line": 257,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "notes_commit_out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "pointer to store the new notes commit (optional);\n\t\t\t\t\tNULL in case of error.\n\t\t\t\t\tWhen removing a note a new tree containing all notes\n\t\t\t\t\tsans the note to be removed is created and a new commit\n\t\t\t\t\tpointing to that tree is also created.\n\t\t\t\t\tIn the case where the resulting tree is an empty tree\n\t\t\t\t\ta new commit pointing to this empty tree will be returned."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where the note lives"
            },
            {
              "name": "notes_commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "a pointer to the notes commit object"
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit author"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature of the notes commit committer"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "OID of the git object to remove the note from"
            }
          ],
          "comment": [
            "Remove the note for an object"
          ],
          "group": "notes"
        },
        "git_note_free": {
          "kind": "function",
          "name": "git_note_free",
          "location": {
            "file": "notes.h",
            "line": 270,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "note",
              "type": "git_note *",
              "direction": "in",
              "comment": "git_note object"
            }
          ],
          "comment": [
            "Free a git_note object"
          ],
          "group": "notes"
        },
        "git_note_default_ref": {
          "kind": "function",
          "name": "git_note_default_ref",
          "location": {
            "file": "notes.h",
            "line": 280,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer in which to store the name of the default notes reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The Git repository"
            }
          ],
          "comment": [
            "Get the default notes reference for a repository"
          ],
          "group": "notes"
        },
        "git_note_foreach": {
          "kind": "function",
          "name": "git_note_foreach",
          "location": {
            "file": "notes.h",
            "line": 298,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the notes."
            },
            {
              "name": "notes_ref",
              "type": "const char *",
              "direction": "in",
              "comment": "Reference to read from (optional); defaults to\n        \"refs/notes/commits\"."
            },
            {
              "name": "note_cb",
              "type": "git_note_foreach_cb",
              "direction": "in",
              "comment": "Callback to invoke per found annotation.  Return non-zero\n        to stop looping.",
              "referenceType": "int (*)(const git_oid *, const git_oid *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Extra parameter to callback function."
            }
          ],
          "comment": [
            "Loop over all the notes within a specified namespace\n and issue a callback for each one."
          ],
          "group": "notes"
        },
        "git_note": {
          "kind": "struct",
          "name": "git_note",
          "referenceName": "struct git_note",
          "opaque": true,
          "comment": [
            "Representation of a git note"
          ],
          "location": {
            "file": "types.h",
            "line": 160,
            "column": 25
          },
          "group": "notes",
          "parameterTo": [
            "git_note_read",
            "git_note_commit_read",
            "git_note_author",
            "git_note_committer",
            "git_note_message",
            "git_note_id",
            "git_note_free"
          ]
        }
      },
      "info": {
        "summary": "Git notes management routines"
      }
    },
    "object": {
      "apis": {
        "GIT_OBJECT_SIZE_MAX": {
          "kind": "macro",
          "name": "GIT_OBJECT_SIZE_MAX",
          "location": {
            "file": "object.h",
            "line": 24,
            "column": 9
          },
          "value": "UINT64_MAX",
          "comment": "",
          "group": "object"
        },
        "git_object_lookup": {
          "kind": "function",
          "name": "git_object_lookup",
          "location": {
            "file": "object.h",
            "line": 44,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the looked-up object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the object"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the unique identifier for the object"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "the type of the object",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Lookup a reference to one of the objects in a repository.",
            "The generated reference is owned by the repository and\n should be closed with the `git_object_free` method\n instead of free'd manually.",
            "The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJECT_ANY' may be passed to let\n the method guess the object's type."
          ],
          "group": "object"
        },
        "git_object_lookup_prefix": {
          "kind": "function",
          "name": "git_object_lookup_prefix",
          "location": {
            "file": "object.h",
            "line": 77,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "object_out",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer where to store the looked-up object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the object"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "a short identifier for the object"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of the short identifier"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "the type of the object",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Lookup a reference to one of the objects in a repository,\n given a prefix of its identifier (short id).",
            "The object obtained will be so that its identifier\n matches the first 'len' hexadecimal characters\n (packets of 4 bits) of the given 'id'.\n 'len' must be at least GIT_OID_MINPREFIXLEN, and\n long enough to identify a unique object matching\n the prefix; otherwise the method will fail.",
            "The generated reference is owned by the repository and\n should be closed with the `git_object_free` method\n instead of free'd manually.",
            "The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJECT_ANY' may be passed to let\n the method guess the object's type."
          ],
          "group": "object"
        },
        "git_object_lookup_bypath": {
          "kind": "function",
          "name": "git_object_lookup_bypath",
          "location": {
            "file": "object.h",
            "line": 95,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_object **",
              "direction": "in",
              "comment": "buffer that receives a pointer to the object (which must be freed\n            by the caller)"
            },
            {
              "name": "treeish",
              "type": "const git_object *",
              "direction": "in",
              "comment": "root object that can be peeled to a tree"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "relative path from the root object to the desired object"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "type of object desired",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Lookup an object that represents a tree entry."
          ],
          "group": "object"
        },
        "git_object_id": {
          "kind": "function",
          "name": "git_object_id",
          "location": {
            "file": "object.h",
            "line": 107,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the SHA1 id"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the id (SHA1) of a repository object"
          ],
          "group": "object"
        },
        "git_object_short_id": {
          "kind": "function",
          "name": "git_object_short_id",
          "location": {
            "file": "object.h",
            "line": 121,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 for error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Buffer to write string into"
            },
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "The object to get an ID for"
            }
          ],
          "comment": [
            "Get a short abbreviated OID string for the object",
            "This starts at the \"core.abbrev\" length (default 7 characters) and\n iteratively extends to a longer string if that length is ambiguous.\n The result will be unambiguous (at least until new objects are added to\n the repository)."
          ],
          "group": "object"
        },
        "git_object_type": {
          "kind": "function",
          "name": "git_object_type",
          "location": {
            "file": "object.h",
            "line": 129,
            "column": 26
          },
          "returns": {
            "type": "git_object_t",
            "comment": "the object's type"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the repository object"
            }
          ],
          "comment": [
            "Get the object type of an object"
          ],
          "group": "object"
        },
        "git_object_owner": {
          "kind": "function",
          "name": "git_object_owner",
          "location": {
            "file": "object.h",
            "line": 143,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository who owns this object"
          },
          "params": [
            {
              "name": "obj",
              "type": "const git_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Get the repository that owns this object",
            "Freeing or calling `git_repository_close` on the\n returned pointer will invalidate the actual object.",
            "Any other operation may be run on the repository without\n affecting the object."
          ],
          "group": "object"
        },
        "git_object_free": {
          "kind": "function",
          "name": "git_object_free",
          "location": {
            "file": "object.h",
            "line": 160,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "object",
              "type": "git_object *",
              "direction": "in",
              "comment": "the object to close"
            }
          ],
          "comment": [
            "Close an open object",
            "This method instructs the library to close an existing\n object; note that git_objects are owned and cached by the repository\n so the object may or may not be freed after this library call,\n depending on how aggressive is the caching mechanism used\n by the repository.",
            "IMPORTANT:\n It *is* necessary to call this method when you stop using\n an object. Failure to do so will cause a memory leak."
          ],
          "group": "object"
        },
        "git_object_type2string": {
          "kind": "function",
          "name": "git_object_type2string",
          "location": {
            "file": "object.h",
            "line": 171,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the corresponding string representation."
          },
          "params": [
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "object type to convert.",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Convert an object type to its string representation.",
            "The result is a pointer to a string in static memory and\n should not be free()'ed."
          ],
          "group": "object"
        },
        "git_object_string2type": {
          "kind": "function",
          "name": "git_object_string2type",
          "location": {
            "file": "object.h",
            "line": 179,
            "column": 26
          },
          "returns": {
            "type": "git_object_t",
            "comment": "the corresponding git_object_t."
          },
          "params": [
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "the string to convert."
            }
          ],
          "comment": [
            "Convert a string object type representation to it's git_object_t."
          ],
          "group": "object"
        },
        "git_object_typeisloose": {
          "kind": "function",
          "name": "git_object_typeisloose",
          "location": {
            "file": "object.h",
            "line": 188,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "true if the type represents a valid loose object type,\n false otherwise."
          },
          "params": [
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "object type to test.",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Determine if the given git_object_t is a valid loose object type."
          ],
          "group": "object"
        },
        "git_object_peel": {
          "kind": "function",
          "name": "git_object_peel",
          "location": {
            "file": "object.h",
            "line": 213,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC, GIT_EPEEL, or an error code"
          },
          "params": [
            {
              "name": "peeled",
              "type": "git_object **",
              "direction": "in",
              "comment": "Pointer to the peeled git_object"
            },
            {
              "name": "object",
              "type": "const git_object *",
              "direction": "in",
              "comment": "The object to be processed"
            },
            {
              "name": "target_type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "The type of the requested object (a GIT_OBJECT_ value)",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Recursively peel an object until an object of the specified type is met.",
            "If the query cannot be satisfied due to the object model,\n GIT_EINVALIDSPEC will be returned (e.g. trying to peel a blob to a\n tree).",
            "If you pass `GIT_OBJECT_ANY` as the target type, then the object will\n be peeled until the type changes. A tag will be peeled until the\n referenced object is no longer a tag, and a commit will be peeled\n to a tree. Any other object type will return GIT_EINVALIDSPEC.",
            "If peeling a tag we discover an object which cannot be peeled to\n the target type due to the object model, GIT_EPEEL will be\n returned.",
            "You must free the returned object."
          ],
          "group": "object"
        },
        "git_object_dup": {
          "kind": "function",
          "name": "git_object_dup",
          "location": {
            "file": "object.h",
            "line": 225,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "dest",
              "type": "git_object **",
              "direction": "in",
              "comment": "Pointer to store the copy of the object"
            },
            {
              "name": "source",
              "type": "git_object *",
              "direction": "in",
              "comment": "Original object to copy"
            }
          ],
          "comment": [
            "Create an in-memory copy of a Git object. The copy must be\n explicitly free'd or it will leak."
          ],
          "group": "object"
        },
        "git_object_size_t": {
          "kind": "alias",
          "name": "git_object_size_t",
          "type": "uint64_t",
          "comment": [
            "The maximum size of an object"
          ],
          "location": {
            "file": "types.h",
            "line": 67,
            "column": 18
          },
          "group": "object",
          "returnedBy": [
            "git_blob_rawsize"
          ],
          "parameterTo": [
            "git_odb_open_wstream"
          ],
          "typedef": true
        },
        "git_object_t": {
          "kind": "enum",
          "name": "git_object_t",
          "referenceName": "git_object_t",
          "members": [
            {
              "name": "GIT_OBJECT_ANY",
              "value": "-2",
              "comment": [
                "Object can be any of the following"
              ]
            },
            {
              "name": "GIT_OBJECT_INVALID",
              "value": "-1",
              "comment": [
                "Object is invalid."
              ]
            },
            {
              "name": "GIT_OBJECT_COMMIT",
              "value": "1",
              "comment": [
                "A commit object."
              ]
            },
            {
              "name": "GIT_OBJECT_TREE",
              "value": "2",
              "comment": [
                "A tree (directory listing) object."
              ]
            },
            {
              "name": "GIT_OBJECT_BLOB",
              "value": "3",
              "comment": [
                "A file revision object."
              ]
            },
            {
              "name": "GIT_OBJECT_TAG",
              "value": "4",
              "comment": [
                "An annotated tag object."
              ]
            },
            {
              "name": "GIT_OBJECT_OFS_DELTA",
              "value": "6",
              "comment": [
                "A delta, base is given by an offset."
              ]
            },
            {
              "name": "GIT_OBJECT_REF_DELTA",
              "value": "7",
              "comment": [
                "A delta, base is given by object id."
              ]
            }
          ],
          "comment": [
            "Basic type (loose or packed) of any Git object."
          ],
          "location": {
            "file": "types.h",
            "line": 73,
            "column": 9
          },
          "group": "object",
          "returnedBy": [
            "git_object_type",
            "git_object_string2type",
            "git_odb_object_type",
            "git_tag_target_type",
            "git_tree_entry_type"
          ],
          "parameterTo": [
            "git_object__size",
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_object_lookup_bypath",
            "git_object_type2string",
            "git_object_typeisloose",
            "git_object_peel",
            "git_odb_read_header",
            "git_odb_write",
            "git_odb_open_wstream",
            "git_odb_open_rstream",
            "git_odb_hash",
            "git_odb_hashfile",
            "git_reference_peel",
            "git_repository_hashfile"
          ]
        },
        "git_object": {
          "kind": "struct",
          "name": "git_object",
          "referenceName": "struct git_object",
          "opaque": true,
          "comment": [
            "Representation of a generic object in a repository"
          ],
          "location": {
            "file": "types.h",
            "line": 115,
            "column": 27
          },
          "group": "object",
          "parameterTo": [
            "git_checkout_tree",
            "git_describe_commit",
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_object_lookup_bypath",
            "git_object_id",
            "git_object_short_id",
            "git_object_type",
            "git_object_owner",
            "git_object_free",
            "git_object_peel",
            "git_object_dup",
            "git_reference_peel",
            "git_reset",
            "git_reset_default",
            "git_revparse_single",
            "git_revparse_ext",
            "git_tag_target",
            "git_tag_create",
            "git_tag_annotation_create",
            "git_tag_create_lightweight",
            "git_tag_peel",
            "git_tree_entry_to_object"
          ]
        }
      },
      "info": {
        "summary": "Git revision object management routines"
      }
    },
    "odb": {
      "apis": {
        "git_odb_foreach_cb": {
          "kind": "callback",
          "name": "git_odb_foreach_cb",
          "type": "int (*)(const git_oid *, void *)",
          "comment": [
            "Function type for callbacks from git_odb_foreach."
          ],
          "location": {
            "file": "odb.h",
            "line": 28,
            "column": 26
          },
          "params": [
            {
              "type": "const git_oid *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "odb",
          "parameterTo": [
            "git_odb_foreach"
          ],
          "typedef": true
        },
        "git_odb_new": {
          "kind": "function",
          "name": "git_odb_new",
          "location": {
            "file": "odb.h",
            "line": 40,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."
            }
          ],
          "comment": [
            "Create a new object database with no backends.",
            "Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`"
          ],
          "group": "odb"
        },
        "git_odb_open": {
          "kind": "function",
          "name": "git_odb_open",
          "location": {
            "file": "odb.h",
            "line": 58,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."
            },
            {
              "name": "objects_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "path of the backends' \"objects\" directory."
            }
          ],
          "comment": [
            "Create a new object database and automatically add\n the two default backends:",
            "- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder",
            "- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data"
          ],
          "group": "odb"
        },
        "git_odb_add_disk_alternate": {
          "kind": "function",
          "name": "git_odb_add_disk_alternate",
          "location": {
            "file": "odb.h",
            "line": 75,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "path to the objects folder for the alternate"
            }
          ],
          "comment": [
            "Add an on-disk alternate to an existing Object DB.",
            "Note that the added path must point to an `objects`, not\n to a full repository, to use it as an alternate store.",
            "Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.",
            "Writing is disabled on alternate backends."
          ],
          "group": "odb"
        },
        "git_odb_free": {
          "kind": "function",
          "name": "git_odb_free",
          "location": {
            "file": "odb.h",
            "line": 82,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database pointer to close. If NULL no action is taken."
            }
          ],
          "comment": [
            "Close an open object database."
          ],
          "group": "odb"
        },
        "git_odb_read": {
          "kind": "function",
          "name": "git_odb_read",
          "location": {
            "file": "odb.h",
            "line": 101,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_object **",
              "direction": "in",
              "comment": "pointer where to store the read object"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read an object from the database.",
            "This method queries all available ODB backends\n trying to read the given OID.",
            "The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use."
          ],
          "group": "odb"
        },
        "git_odb_read_prefix": {
          "kind": "function",
          "name": "git_odb_read_prefix",
          "location": {
            "file": "odb.h",
            "line": 130,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n - GIT_EAMBIGUOUS if the prefix is ambiguous (several objects match the prefix)"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_object **",
              "direction": "in",
              "comment": "pointer where to store the read object"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "short_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "a prefix of the id of the object to read."
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of the prefix"
            }
          ],
          "comment": [
            "Read an object from the database, given a prefix\n of its identifier.",
            "This method queries all available ODB backends\n trying to match the 'len' first hexadecimal\n characters of the 'short_id'.\n The remaining (GIT_OID_HEXSZ-len)*4 bits of\n 'short_id' must be 0s.\n 'len' must be at least GIT_OID_MINPREFIXLEN,\n and the prefix must be long enough to identify\n a unique object in all the backends; the\n method will fail otherwise.",
            "The returned object is reference counted and\n internally cached, so it should be closed\n by the user once it's no longer in use."
          ],
          "group": "odb"
        },
        "git_odb_read_header": {
          "kind": "function",
          "name": "git_odb_read_header",
          "location": {
            "file": "odb.h",
            "line": 150,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database."
          },
          "params": [
            {
              "name": "len_out",
              "type": "size_t *",
              "direction": "in",
              "comment": "pointer where to store the length"
            },
            {
              "name": "type_out",
              "type": "git_object_t *",
              "direction": "in",
              "comment": "pointer where to store the type"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to search for the object in."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the object to read."
            }
          ],
          "comment": [
            "Read the header of an object from the database, without\n reading its full contents.",
            "The header includes the length and the type of an object.",
            "Note that most backends do not support reading only the header\n of an object, so the whole object will be read and then the\n header will be returned."
          ],
          "group": "odb"
        },
        "git_odb_exists": {
          "kind": "function",
          "name": "git_odb_exists",
          "location": {
            "file": "odb.h",
            "line": 161,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "- 1, if the object was found\n - 0, otherwise"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to be searched for the given object."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the object to search for."
            }
          ],
          "comment": [
            "Determine if the given object can be found in the object database."
          ],
          "group": "odb"
        },
        "git_odb_exists_prefix": {
          "kind": "function",
          "name": "git_odb_exists_prefix",
          "location": {
            "file": "odb.h",
            "line": 174,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if found, GIT_ENOTFOUND if not found, GIT_EAMBIGUOUS if multiple\n         matches were found, other value \n<\n 0 if there was a read error."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "The full OID of the found object if just one is found."
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "The database to be searched for the given object."
            },
            {
              "name": "short_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "A prefix of the id of the object to read."
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "The length of the prefix."
            }
          ],
          "comment": [
            "Determine if an object can be found in the object database by an\n abbreviated object ID."
          ],
          "group": "odb"
        },
        "git_odb_expand_id": {
          "kind": "struct",
          "name": "git_odb_expand_id",
          "referenceName": "git_odb_expand_id",
          "comment": [
            "The information about object IDs to query in `git_odb_expand_ids`,\n which will be populated upon return."
          ],
          "members": [
            {
              "name": "id",
              "type": "git_oid",
              "comment": [
                "The object ID to expand"
              ],
              "referenceType": "struct git_oid"
            },
            {
              "name": "length",
              "type": "unsigned short",
              "comment": [
                "The length of the object ID (in nibbles, or packets of 4 bits; the\n number of hex characters)"
              ]
            },
            {
              "name": "type",
              "type": "git_object_t",
              "comment": [
                "The (optional) type of the object to search for; leave as `0` or set\n to `GIT_OBJECT_ANY` to query for any object matching the ID."
              ],
              "referenceType": "enum git_object_t"
            }
          ],
          "location": {
            "file": "odb.h",
            "line": 181,
            "column": 16
          },
          "group": "odb",
          "parameterTo": [
            "git_odb_expand_ids"
          ]
        },
        "git_odb_expand_ids": {
          "kind": "function",
          "name": "git_odb_expand_ids",
          "location": {
            "file": "odb.h",
            "line": 216,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or an error code on failure"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "The database to be searched for the given objects."
            },
            {
              "name": "ids",
              "type": "git_odb_expand_id *",
              "direction": "in",
              "comment": "An array of short object IDs to search for"
            },
            {
              "name": "count",
              "type": "size_t",
              "direction": "in",
              "comment": "The length of the `ids` array"
            }
          ],
          "comment": [
            "Determine if one or more objects can be found in the object database\n by their abbreviated object ID and type.  The given array will be\n updated in place:  for each abbreviated ID that is unique in the\n database, and of the given type (if specified), the full object ID,\n object ID length (`GIT_OID_HEXSZ`) and type will be written back to\n the array.  For IDs that are not found (or are ambiguous), the\n array entry will be zeroed.",
            "Note that since this function operates on multiple objects, the\n underlying database will not be asked to be reloaded if an object is\n not found (which is unlike other object database operations.)"
          ],
          "group": "odb"
        },
        "git_odb_refresh": {
          "kind": "function",
          "name": "git_odb_refresh",
          "location": {
            "file": "odb.h",
            "line": 239,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, error code otherwise"
          },
          "params": [
            {
              "name": "db",
              "type": "struct git_odb *",
              "direction": "in",
              "comment": "database to refresh"
            }
          ],
          "comment": [
            "Refresh the object database to load newly added files.",
            "If the object databases have changed on disk while the library\n is running, this function will force a reload of the underlying\n indexes.",
            "Use this function when you're confident that an external\n application has tampered with the ODB.",
            "NOTE that it is not necessary to call this function at all. The\n library will automatically attempt to refresh the ODB\n when a lookup fails, to see if the looked up object exists\n on disk but hasn't been loaded yet."
          ],
          "group": "odb"
        },
        "git_odb_foreach": {
          "kind": "function",
          "name": "git_odb_foreach",
          "location": {
            "file": "odb.h",
            "line": 254,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to use"
            },
            {
              "name": "cb",
              "type": "git_odb_foreach_cb",
              "direction": "in",
              "comment": "the callback to call for each object",
              "referenceType": "int (*)(const git_oid *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "data to pass to the callback"
            }
          ],
          "comment": [
            "List all objects available in the database",
            "The callback will be called for each object available in the\n database. Note that the objects are likely to be returned in the index\n order, which would make accessing the objects in that order inefficient.\n Return a non-zero value from the callback to stop looping."
          ],
          "group": "odb"
        },
        "git_odb_write": {
          "kind": "function",
          "name": "git_odb_write",
          "location": {
            "file": "odb.h",
            "line": 274,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "pointer to store the OID result of the write"
            },
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database where to store the object"
            },
            {
              "name": "data",
              "type": "const void *",
              "direction": "in",
              "comment": "buffer with the data to store"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "size of the buffer"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "type of the data to store",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Write an object directly into the ODB",
            "This method writes a full object straight into the ODB.\n For most cases, it is preferred to write objects through a write\n stream, which is both faster and less memory intensive, specially\n for big objects.",
            "This method is provided for compatibility with custom backends\n which are not able to support streaming writes"
          ],
          "group": "odb"
        },
        "git_odb_open_wstream": {
          "kind": "function",
          "name": "git_odb_open_wstream",
          "location": {
            "file": "odb.h",
            "line": 297,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the stream was created; error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_stream **",
              "direction": "in",
              "comment": "pointer where to store the stream"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database where the stream will write"
            },
            {
              "name": "size",
              "type": "git_object_size_t",
              "direction": "in",
              "comment": "final size of the object that will be written",
              "referenceType": "uint64_t"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "type of the object that will be written",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Open a stream to write an object into the ODB",
            "The type and final length of the object must be specified\n when opening the stream.",
            "The returned stream will be of type `GIT_STREAM_WRONLY`, and it\n won't be effective until `git_odb_stream_finalize_write` is called\n and returns without an error",
            "The stream must always be freed when done with `git_odb_stream_free` or\n will leak memory."
          ],
          "see": [
            "git_odb_stream"
          ],
          "group": "odb"
        },
        "git_odb_stream_write": {
          "kind": "function",
          "name": "git_odb_stream_write",
          "location": {
            "file": "odb.h",
            "line": 310,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the write succeeded; error code otherwise"
          },
          "params": [
            {
              "name": "stream",
              "type": "git_odb_stream *",
              "direction": "in",
              "comment": "the stream"
            },
            {
              "name": "buffer",
              "type": "const char *",
              "direction": "in",
              "comment": "the data to write"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the buffer's length"
            }
          ],
          "comment": [
            "Write to an odb stream",
            "This method will fail if the total number of received bytes exceeds the\n size declared with `git_odb_open_wstream()`"
          ],
          "group": "odb"
        },
        "git_odb_stream_finalize_write": {
          "kind": "function",
          "name": "git_odb_stream_finalize_write",
          "location": {
            "file": "odb.h",
            "line": 325,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; an error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "pointer to store the resulting object's id"
            },
            {
              "name": "stream",
              "type": "git_odb_stream *",
              "direction": "in",
              "comment": "the stream"
            }
          ],
          "comment": [
            "Finish writing to an odb stream",
            "The object will take its final name and will be available to the\n odb.",
            "This method will fail if the total number of received bytes\n differs from the size declared with `git_odb_open_wstream()`"
          ],
          "group": "odb"
        },
        "git_odb_stream_read": {
          "kind": "function",
          "name": "git_odb_stream_read",
          "location": {
            "file": "odb.h",
            "line": 332,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "stream",
              "type": "git_odb_stream *"
            },
            {
              "name": "buffer",
              "type": "char *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ],
          "comment": [
            "Read from an odb stream",
            "Most backends don't implement streaming reads"
          ],
          "group": "odb"
        },
        "git_odb_stream_free": {
          "kind": "function",
          "name": "git_odb_stream_free",
          "location": {
            "file": "odb.h",
            "line": 339,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "stream",
              "type": "git_odb_stream *",
              "direction": "in",
              "comment": "the stream to free"
            }
          ],
          "comment": [
            "Free an odb stream"
          ],
          "group": "odb"
        },
        "git_odb_open_rstream": {
          "kind": "function",
          "name": "git_odb_open_rstream",
          "location": {
            "file": "odb.h",
            "line": 367,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the stream was created; error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_stream **",
              "direction": "in",
              "comment": "pointer where to store the stream"
            },
            {
              "name": "len",
              "type": "size_t *",
              "direction": "in",
              "comment": "pointer where to store the length of the object"
            },
            {
              "name": "type",
              "type": "git_object_t *",
              "direction": "in",
              "comment": "pointer where to store the type of the object"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database where the stream will read from"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid of the object the stream will read from"
            }
          ],
          "comment": [
            "Open a stream to read an object from the ODB",
            "Note that most backends do *not* support streaming reads\n because they store their objects as compressed/delta'ed blobs.",
            "It's recommended to use `git_odb_read` instead, which is\n assured to work on all backends.",
            "The returned stream will be of type `GIT_STREAM_RDONLY` and\n will have the following methods:",
            "- stream->read: read `n` bytes from the stream\n\t\t- stream->free: free the stream",
            "The stream must always be free'd or will leak memory."
          ],
          "see": [
            "git_odb_stream"
          ],
          "group": "odb"
        },
        "git_odb_write_pack": {
          "kind": "function",
          "name": "git_odb_write_pack",
          "location": {
            "file": "odb.h",
            "line": 392,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_writepack **",
              "direction": "in",
              "comment": "pointer to the writepack functions"
            },
            {
              "name": "db",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database where the stream will read from"
            },
            {
              "name": "progress_cb",
              "type": "git_indexer_progress_cb",
              "direction": "in",
              "comment": "function to call with progress information.\n Be aware that this is called inline with network and indexing operations,\n so performance may be affected.",
              "referenceType": "int (*)(const git_indexer_progress *, void *)"
            },
            {
              "name": "progress_payload",
              "type": "void *",
              "direction": "in",
              "comment": "payload for the progress callback"
            }
          ],
          "comment": [
            "Open a stream for writing a pack file to the ODB.",
            "If the ODB layer understands pack files, then the given\n packfile will likely be streamed directly to disk (and a\n corresponding index created).  If the ODB layer does not\n understand pack files, the objects will be stored in whatever\n format the ODB layer uses."
          ],
          "see": [
            "git_odb_writepack"
          ],
          "group": "odb"
        },
        "git_odb_hash": {
          "kind": "function",
          "name": "git_odb_hash",
          "location": {
            "file": "odb.h",
            "line": 410,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "the resulting object-ID."
            },
            {
              "name": "data",
              "type": "const void *",
              "direction": "in",
              "comment": "data to hash"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "size of the data"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "of the data to hash",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Determine the object-ID (sha1 hash) of a data buffer",
            "The resulting SHA-1 OID will be the identifier for the data\n buffer as if the data buffer it were to written to the ODB."
          ],
          "group": "odb"
        },
        "git_odb_hashfile": {
          "kind": "function",
          "name": "git_odb_hashfile",
          "location": {
            "file": "odb.h",
            "line": 425,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "file to read and determine object id for"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "the type of the object that will be hashed",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Read a file from disk and fill a git_oid with the object id\n that the file would have if it were written to the Object\n Database as an object of the given type (w/o applying filters).\n Similar functionality to git.git's `git hash-object` without\n the `-w` flag, however, with the --no-filters flag.\n If you need filters, see git_repository_hashfile."
          ],
          "group": "odb"
        },
        "git_odb_object_dup": {
          "kind": "function",
          "name": "git_odb_object_dup",
          "location": {
            "file": "odb.h",
            "line": 439,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "dest",
              "type": "git_odb_object **",
              "direction": "in",
              "comment": "pointer where to store the copy"
            },
            {
              "name": "source",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "object to copy"
            }
          ],
          "comment": [
            "Create a copy of an odb_object",
            "The returned copy must be manually freed with `git_odb_object_free`.\n Note that because of an implementation detail, the returned copy will be\n the same pointer as `source`: the object is internally refcounted, so the\n copy still needs to be freed twice."
          ],
          "group": "odb"
        },
        "git_odb_object_free": {
          "kind": "function",
          "name": "git_odb_object_free",
          "location": {
            "file": "odb.h",
            "line": 449,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "object to close"
            }
          ],
          "comment": [
            "Close an ODB object",
            "This method must always be called once a `git_odb_object` is no\n longer needed, otherwise memory will leak."
          ],
          "group": "odb"
        },
        "git_odb_object_id": {
          "kind": "function",
          "name": "git_odb_object_id",
          "location": {
            "file": "odb.h",
            "line": 459,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "a pointer to the OID"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the OID of an ODB object",
            "This is the OID from which the object was read from"
          ],
          "group": "odb"
        },
        "git_odb_object_data": {
          "kind": "function",
          "name": "git_odb_object_data",
          "location": {
            "file": "odb.h",
            "line": 472,
            "column": 26
          },
          "returns": {
            "type": "const void *",
            "comment": "a pointer to the data"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the data of an ODB object",
            "This is the uncompressed, raw data as read from the ODB,\n without the leading header.",
            "This pointer is owned by the object and shall not be free'd."
          ],
          "group": "odb"
        },
        "git_odb_object_size": {
          "kind": "function",
          "name": "git_odb_object_size",
          "location": {
            "file": "odb.h",
            "line": 483,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the size"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the size of an ODB object",
            "This is the real size of the `data` buffer, not the\n actual size of the object."
          ],
          "group": "odb"
        },
        "git_odb_object_type": {
          "kind": "function",
          "name": "git_odb_object_type",
          "location": {
            "file": "odb.h",
            "line": 491,
            "column": 26
          },
          "returns": {
            "type": "git_object_t",
            "comment": "the type"
          },
          "params": [
            {
              "name": "object",
              "type": "git_odb_object *",
              "direction": "in",
              "comment": "the object"
            }
          ],
          "comment": [
            "Return the type of an ODB object"
          ],
          "group": "odb"
        },
        "git_odb_add_backend": {
          "kind": "function",
          "name": "git_odb_add_backend",
          "location": {
            "file": "odb.h",
            "line": 506,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "pointer to a git_odb_backend instance"
            },
            {
              "name": "priority",
              "type": "int",
              "direction": "in",
              "comment": "Value for ordering the backends queue"
            }
          ],
          "comment": [
            "Add a custom backend to an existing Object DB",
            "The backends are checked in relative ordering, based on the\n value of the `priority` parameter.",
            "Read \n<sys\n/odb_backend.h> for more information."
          ],
          "group": "odb"
        },
        "git_odb_add_alternate": {
          "kind": "function",
          "name": "git_odb_add_alternate",
          "location": {
            "file": "odb.h",
            "line": 527,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "pointer to a git_odb_backend instance"
            },
            {
              "name": "priority",
              "type": "int",
              "direction": "in",
              "comment": "Value for ordering the backends queue"
            }
          ],
          "comment": [
            "Add a custom backend to an existing Object DB; this\n backend will work as an alternate.",
            "Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.",
            "The backends are checked in relative ordering, based on the\n value of the `priority` parameter.",
            "Writing is disabled on alternate backends.",
            "Read \n<sys\n/odb_backend.h> for more information."
          ],
          "group": "odb"
        },
        "git_odb_num_backends": {
          "kind": "function",
          "name": "git_odb_num_backends",
          "location": {
            "file": "odb.h",
            "line": 535,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "number of backends in the ODB"
          },
          "params": [
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database"
            }
          ],
          "comment": [
            "Get the number of ODB backend objects"
          ],
          "group": "odb"
        },
        "git_odb_get_backend": {
          "kind": "function",
          "name": "git_odb_get_backend",
          "location": {
            "file": "odb.h",
            "line": 545,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_ENOTFOUND if pos is invalid; other errors \n<\n 0"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_backend **",
              "direction": "in",
              "comment": "output pointer to ODB backend at pos"
            },
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "object database"
            },
            {
              "name": "pos",
              "type": "size_t",
              "direction": "in",
              "comment": "index into object database backend list"
            }
          ],
          "comment": [
            "Lookup an ODB backend object by index"
          ],
          "group": "odb"
        },
        "git_odb": {
          "kind": "struct",
          "name": "git_odb",
          "referenceName": "struct git_odb",
          "opaque": true,
          "comment": [
            "An open object database handle."
          ],
          "location": {
            "file": "types.h",
            "line": 85,
            "column": 24
          },
          "group": "odb",
          "parameterTo": [
            "git_indexer_new",
            "git_odb_new",
            "git_odb_open",
            "git_odb_add_disk_alternate",
            "git_odb_free",
            "git_odb_read",
            "git_odb_read_prefix",
            "git_odb_read_header",
            "git_odb_exists",
            "git_odb_exists_prefix",
            "git_odb_expand_ids",
            "git_odb_foreach",
            "git_odb_write",
            "git_odb_open_wstream",
            "git_odb_open_rstream",
            "git_odb_write_pack",
            "git_odb_add_backend",
            "git_odb_add_alternate",
            "git_odb_num_backends",
            "git_odb_get_backend",
            "git_repository_wrap_odb",
            "git_repository_odb",
            "git_repository_set_odb"
          ]
        },
        "git_odb_object": {
          "kind": "struct",
          "name": "git_odb_object",
          "referenceName": "struct git_odb_object",
          "opaque": true,
          "comment": [
            "An object read from the ODB"
          ],
          "location": {
            "file": "types.h",
            "line": 91,
            "column": 31
          },
          "group": "odb",
          "parameterTo": [
            "git_odb_read",
            "git_odb_read_prefix",
            "git_odb_object_dup",
            "git_odb_object_free",
            "git_odb_object_id",
            "git_odb_object_data",
            "git_odb_object_size",
            "git_odb_object_type"
          ]
        }
      },
      "info": {
        "summary": "Git object database routines"
      }
    },
    "odb_backend": {
      "apis": {
        "git_odb_backend_pack": {
          "kind": "function",
          "name": "git_odb_backend_pack",
          "location": {
            "file": "odb_backend.h",
            "line": 35,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_backend **",
              "direction": "in",
              "comment": "location to store the odb backend pointer"
            },
            {
              "name": "objects_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "the Git repository's objects directory"
            }
          ],
          "comment": [
            "Create a backend for the packfiles."
          ],
          "group": "odb_backend"
        },
        "git_odb_backend_loose": {
          "kind": "function",
          "name": "git_odb_backend_loose",
          "location": {
            "file": "odb_backend.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_backend **",
              "direction": "in",
              "comment": "location to store the odb backend pointer"
            },
            {
              "name": "objects_dir",
              "type": "const char *",
              "direction": "in",
              "comment": "the Git repository's objects directory"
            },
            {
              "name": "compression_level",
              "type": "int",
              "direction": "in",
              "comment": "zlib compression level to use"
            },
            {
              "name": "do_fsync",
              "type": "int",
              "direction": "in",
              "comment": "whether to do an fsync() after writing"
            },
            {
              "name": "dir_mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "permissions to use creating a directory or 0 for defaults"
            },
            {
              "name": "file_mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "permissions to use creating a file or 0 for defaults"
            }
          ],
          "comment": [
            "Create a backend for loose objects"
          ],
          "group": "odb_backend"
        },
        "git_odb_backend_one_pack": {
          "kind": "function",
          "name": "git_odb_backend_one_pack",
          "location": {
            "file": "odb_backend.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb_backend **",
              "direction": "in",
              "comment": "location to store the odb backend pointer"
            },
            {
              "name": "index_file",
              "type": "const char *",
              "direction": "in",
              "comment": "path to the packfile's .idx file"
            }
          ],
          "comment": [
            "Create a backend out of a single packfile",
            "This can be useful for inspecting the contents of a single\n packfile."
          ],
          "group": "odb_backend"
        },
        "git_odb_stream_t": {
          "kind": "enum",
          "name": "git_odb_stream_t",
          "referenceName": "git_odb_stream_t",
          "members": [
            {
              "name": "GIT_STREAM_RDONLY",
              "value": "2"
            },
            {
              "name": "GIT_STREAM_WRONLY",
              "value": "4"
            },
            {
              "name": "GIT_STREAM_RW",
              "value": "6"
            }
          ],
          "comment": [
            "Streaming mode"
          ],
          "location": {
            "file": "odb_backend.h",
            "line": 71,
            "column": 9
          },
          "group": "odb_backend"
        },
        "git_odb_stream": {
          "kind": "struct",
          "name": "git_odb_stream",
          "referenceName": "struct git_odb_stream",
          "comment": [
            "A stream to read/write from a backend.",
            "This represents a stream of data being written to or read from a\n backend. When writing, the frontend functions take care of\n calculating the object's id and all `finalize_write` needs to do is\n store the object with the id it is passed."
          ],
          "members": [
            {
              "name": "backend",
              "type": "git_odb_backend *"
            },
            {
              "name": "mode",
              "type": "unsigned int"
            },
            {
              "name": "hash_ctx",
              "type": "void *"
            },
            {
              "name": "declared_size",
              "type": "git_object_size_t",
              "referenceType": "uint64_t"
            },
            {
              "name": "received_bytes",
              "type": "git_object_size_t",
              "referenceType": "uint64_t"
            },
            {
              "name": "read",
              "type": "int (*)(git_odb_stream *, char *, size_t)",
              "comment": [
                "Write at most `len` bytes into `buffer` and advance the stream."
              ]
            },
            {
              "name": "write",
              "type": "int (*)(git_odb_stream *, const char *, size_t)",
              "comment": [
                "Write `len` bytes from `buffer` into the stream."
              ]
            },
            {
              "name": "finalize_write",
              "type": "int (*)(git_odb_stream *, const git_oid *)",
              "comment": [
                "Store the contents of the stream as an object with the id\n specified in `oid`.",
                "This method might not be invoked if:\n - an error occurs earlier with the `write` callback,\n - the object referred to by `oid` already exists in any backend, or\n - the final number of received bytes differs from the size declared\n   with `git_odb_open_wstream()`"
              ]
            },
            {
              "name": "free",
              "type": "void (*)(git_odb_stream *)",
              "comment": [
                "Free the stream's memory.",
                "This method might be called without a call to `finalize_write` if\n an error occurs or if the object is already present in the ODB."
              ]
            }
          ],
          "location": {
            "file": "odb_backend.h",
            "line": 85,
            "column": 8
          },
          "group": "odb_backend",
          "parameterTo": [
            "git_odb_open_wstream",
            "git_odb_stream_write",
            "git_odb_stream_finalize_write",
            "git_odb_stream_read",
            "git_odb_stream_free",
            "git_odb_open_rstream"
          ]
        },
        "git_odb_writepack": {
          "kind": "struct",
          "name": "git_odb_writepack",
          "referenceName": "struct git_odb_writepack",
          "comment": [
            "A stream to write a pack file to the ODB"
          ],
          "members": [
            {
              "name": "backend",
              "type": "git_odb_backend *"
            },
            {
              "name": "append",
              "type": "int (*)(git_odb_writepack *, const void *, size_t, git_indexer_progress *)"
            },
            {
              "name": "commit",
              "type": "int (*)(git_odb_writepack *, git_indexer_progress *)"
            },
            {
              "name": "free",
              "type": "void (*)(git_odb_writepack *)"
            }
          ],
          "location": {
            "file": "odb_backend.h",
            "line": 125,
            "column": 8
          },
          "group": "odb_backend",
          "parameterTo": [
            "git_odb_write_pack"
          ]
        }
      },
      "info": {
        "summary": "Git custom backend functions"
      }
    },
    "sys/odb_backend": {
      "apis": {
        "git_odb_backend": {
          "kind": "struct",
          "name": "git_odb_backend",
          "referenceName": "struct git_odb_backend",
          "comment": [
            "An instance for a custom backend"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "odb",
              "type": "git_odb *"
            },
            {
              "name": "read",
              "type": "int (*)(void **, size_t *, git_object_t *, git_odb_backend *, const git_oid *)"
            },
            {
              "name": "read_prefix",
              "type": "int (*)(git_oid *, void **, size_t *, git_object_t *, git_odb_backend *, const git_oid *, size_t)"
            },
            {
              "name": "read_header",
              "type": "int (*)(size_t *, git_object_t *, git_odb_backend *, const git_oid *)"
            },
            {
              "name": "write",
              "type": "int (*)(git_odb_backend *, const git_oid *, const void *, size_t, git_object_t)",
              "comment": [
                "Write an object into the backend. The id of the object has\n already been calculated and is passed in."
              ]
            },
            {
              "name": "writestream",
              "type": "int (*)(git_odb_stream **, git_odb_backend *, git_object_size_t, git_object_t)"
            },
            {
              "name": "readstream",
              "type": "int (*)(git_odb_stream **, size_t *, git_object_t *, git_odb_backend *, const git_oid *)"
            },
            {
              "name": "exists",
              "type": "int (*)(git_odb_backend *, const git_oid *)"
            },
            {
              "name": "exists_prefix",
              "type": "int (*)(git_oid *, git_odb_backend *, const git_oid *, size_t)"
            },
            {
              "name": "refresh",
              "type": "int (*)(git_odb_backend *)",
              "comment": [
                "If the backend implements a refreshing mechanism, it should be exposed\n through this endpoint. Each call to `git_odb_refresh()` will invoke it.",
                "However, the backend implementation should try to stay up-to-date as much\n as possible by itself as libgit2 will not automatically invoke\n `git_odb_refresh()`. For instance, a potential strategy for the backend\n implementation to achieve this could be to internally invoke this\n endpoint on failed lookups (ie. `exists()`, `read()`, `read_header()`)."
              ]
            },
            {
              "name": "foreach",
              "type": "int (*)(git_odb_backend *, git_odb_foreach_cb, void *)"
            },
            {
              "name": "writepack",
              "type": "int (*)(git_odb_writepack **, git_odb_backend *, git_odb *, git_indexer_progress_cb, void *)"
            },
            {
              "name": "freshen",
              "type": "int (*)(git_odb_backend *, const git_oid *)",
              "comment": [
                "\"Freshens\" an already existing object, updating its last-used\n time.  This occurs when `git_odb_write` was called, but the\n object already existed (and will not be re-written).  The\n underlying implementation may want to update last-used timestamps.",
                "If callers implement this, they should return `0` if the object\n exists and was freshened, and non-zero otherwise."
              ]
            },
            {
              "name": "free",
              "type": "void (*)(git_odb_backend *)",
              "comment": [
                "Frees any resources held by the odb (including the `git_odb_backend`\n itself). An odb backend implementation must provide this function."
              ]
            }
          ],
          "location": {
            "file": "sys/odb_backend.h",
            "line": 27,
            "column": 8
          },
          "group": "sys/odb_backend",
          "parameterTo": [
            "git_odb_add_backend",
            "git_odb_add_alternate",
            "git_odb_get_backend",
            "git_odb_backend_pack",
            "git_odb_backend_loose",
            "git_odb_backend_one_pack",
            "git_mempack_new",
            "git_mempack_dump",
            "git_mempack_reset",
            "git_odb_init_backend",
            "git_odb_backend_data_alloc",
            "git_odb_backend_data_free",
            "git_odb_backend_malloc"
          ]
        },
        "GIT_ODB_BACKEND_VERSION": {
          "kind": "macro",
          "name": "GIT_ODB_BACKEND_VERSION",
          "location": {
            "file": "sys/odb_backend.h",
            "line": 105,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/odb_backend"
        },
        "GIT_ODB_BACKEND_INIT": {
          "kind": "macro",
          "name": "GIT_ODB_BACKEND_INIT",
          "location": {
            "file": "sys/odb_backend.h",
            "line": 106,
            "column": 9
          },
          "value": "{GIT_ODB_BACKEND_VERSION}",
          "comment": "",
          "group": "sys/odb_backend"
        },
        "git_odb_init_backend": {
          "kind": "function",
          "name": "git_odb_init_backend",
          "location": {
            "file": "sys/odb_backend.h",
            "line": 116,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "the `git_odb_backend` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Version the struct; pass `GIT_ODB_BACKEND_VERSION`"
            }
          ],
          "comment": [
            "Initializes a `git_odb_backend` with default values. Equivalent to\n creating an instance with GIT_ODB_BACKEND_INIT."
          ],
          "group": "sys/odb_backend"
        },
        "git_odb_backend_data_alloc": {
          "kind": "function",
          "name": "git_odb_backend_data_alloc",
          "location": {
            "file": "sys/odb_backend.h",
            "line": 132,
            "column": 20
          },
          "returns": {
            "type": "void *",
            "comment": "the allocated buffer on success or NULL if out of memory"
          },
          "params": [
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "the ODB backend that is allocating this memory"
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the number of bytes to allocate"
            }
          ],
          "comment": [
            "Allocate data for an ODB object.  Custom ODB backends may use this\n to provide data back to the ODB from their read function.  This\n memory should not be freed once it is returned to libgit2.  If a\n custom ODB uses this function but encounters an error and does not\n return this data to libgit2, then they should use the corresponding\n git_odb_backend_data_free function."
          ],
          "group": "sys/odb_backend"
        },
        "git_odb_backend_data_free": {
          "kind": "function",
          "name": "git_odb_backend_data_free",
          "location": {
            "file": "sys/odb_backend.h",
            "line": 143,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "backend",
              "type": "git_odb_backend *",
              "direction": "in",
              "comment": "the ODB backend that is freeing this memory"
            },
            {
              "name": "data",
              "type": "void *",
              "direction": "in",
              "comment": "the buffer to free"
            }
          ],
          "comment": [
            "Frees custom allocated ODB data.  This should only be called when\n memory allocated using git_odb_backend_data_alloc is not returned\n to libgit2 because the backend encountered an error in the read\n function after allocation and did not return this data to libgit2."
          ],
          "group": "sys/odb_backend"
        },
        "git_odb_backend_malloc": {
          "kind": "function",
          "name": "git_odb_backend_malloc",
          "location": {
            "file": "sys/odb_backend.h",
            "line": 162,
            "column": 20
          },
          "returns": {
            "type": "void *"
          },
          "params": [
            {
              "name": "backend",
              "type": "git_odb_backend *"
            },
            {
              "name": "len",
              "type": "size_t"
            }
          ],
          "comment": [
            "Allocate memory for an ODB object from a custom backend.  This is\n an alias of `git_odb_backend_data_alloc` and is preserved for\n backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "git_odb_backend_data_alloc"
          ],
          "see": [
            "git_odb_backend_data_alloc"
          ],
          "group": "sys/odb_backend"
        }
      },
      "info": {
        "summary": "Git custom backend implementors functions"
      }
    },
    "oid": {
      "apis": {
        "GIT_OID_RAWSZ": {
          "kind": "macro",
          "name": "GIT_OID_RAWSZ",
          "location": {
            "file": "oid.h",
            "line": 23,
            "column": 9
          },
          "value": "20",
          "comment": "Size (in bytes) of a raw/binary oid",
          "group": "oid"
        },
        "GIT_OID_HEXSZ": {
          "kind": "macro",
          "name": "GIT_OID_HEXSZ",
          "location": {
            "file": "oid.h",
            "line": 26,
            "column": 9
          },
          "value": "(GIT_OID_RAWSZ * 2)",
          "comment": "Size (in bytes) of a hex formatted oid",
          "group": "oid"
        },
        "GIT_OID_MINPREFIXLEN": {
          "kind": "macro",
          "name": "GIT_OID_MINPREFIXLEN",
          "location": {
            "file": "oid.h",
            "line": 30,
            "column": 9
          },
          "value": "4",
          "comment": "Minimum length (in number of hex characters, i.e. packets of 4 bits) of an oid prefix",
          "group": "oid"
        },
        "git_oid": {
          "kind": "struct",
          "name": "git_oid",
          "referenceName": "git_oid",
          "comment": [
            "Unique identity of any object (commit, tree, blob, tag)."
          ],
          "members": [
            {
              "name": "id",
              "type": "unsigned char[20]",
              "comment": [
                "raw binary formatted id"
              ]
            }
          ],
          "location": {
            "file": "oid.h",
            "line": 33,
            "column": 16
          },
          "group": "oid",
          "returnedBy": [
            "git_annotated_commit_id",
            "git_blob_id",
            "git_commit_id",
            "git_commit_tree_id",
            "git_commit_parent_id",
            "git_index_checksum",
            "git_indexer_hash",
            "git_note_id",
            "git_object_id",
            "git_odb_object_id",
            "git_packbuilder_hash",
            "git_rebase_orig_head_id",
            "git_rebase_onto_id",
            "git_reflog_entry_id_old",
            "git_reflog_entry_id_new",
            "git_reference_target",
            "git_reference_target_peel",
            "git_submodule_index_id",
            "git_submodule_head_id",
            "git_submodule_wd_id",
            "git_tag_id",
            "git_tag_target_id",
            "git_tree_id",
            "git_tree_entry_id",
            "git_filter_source_id"
          ],
          "parameterTo": [
            "git_annotated_commit_from_fetchhead",
            "git_annotated_commit_lookup",
            "git_blob_lookup",
            "git_blob_lookup_prefix",
            "git_blob_create_from_workdir",
            "git_blob_create_from_disk",
            "git_blob_create_from_stream_commit",
            "git_blob_create_from_buffer",
            "git_commit_lookup",
            "git_commit_lookup_prefix",
            "git_commit_extract_signature",
            "git_commit_create",
            "git_commit_create_v",
            "git_commit_amend",
            "git_commit_create_with_signature",
            "git_blob_create_fromworkdir",
            "git_blob_create_fromdisk",
            "git_blob_create_fromstream_commit",
            "git_blob_create_frombuffer",
            "git_tag_create_frombuffer",
            "git_oid_iszero",
            "git_diff_patchid",
            "git_graph_ahead_behind",
            "git_graph_descendant_of",
            "git_index_write_tree",
            "git_index_write_tree_to",
            "git_merge_base",
            "git_merge_bases",
            "git_merge_base_many",
            "git_merge_bases_many",
            "git_merge_base_octopus",
            "git_note_foreach_cb",
            "git_note_next",
            "git_note_read",
            "git_note_commit_read",
            "git_note_create",
            "git_note_commit_create",
            "git_note_remove",
            "git_note_commit_remove",
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_odb_foreach_cb",
            "git_odb_read",
            "git_odb_read_prefix",
            "git_odb_read_header",
            "git_odb_exists",
            "git_odb_exists_prefix",
            "git_odb_write",
            "git_odb_stream_finalize_write",
            "git_odb_open_rstream",
            "git_odb_hash",
            "git_odb_hashfile",
            "git_oid_fromstr",
            "git_oid_fromstrp",
            "git_oid_fromstrn",
            "git_oid_fromraw",
            "git_oid_fmt",
            "git_oid_nfmt",
            "git_oid_pathfmt",
            "git_oid_tostr_s",
            "git_oid_tostr",
            "git_oid_cpy",
            "git_oid_cmp",
            "git_oid_equal",
            "git_oid_ncmp",
            "git_oid_streq",
            "git_oid_strcmp",
            "git_oid_is_zero",
            "git_packbuilder_insert",
            "git_packbuilder_insert_tree",
            "git_packbuilder_insert_commit",
            "git_packbuilder_insert_recur",
            "git_rebase_commit",
            "git_reflog_append",
            "git_reference_name_to_id",
            "git_reference_create",
            "git_reference_create_matching",
            "git_reference_set_target",
            "git_repository_fetchhead_foreach_cb",
            "git_repository_mergehead_foreach_cb",
            "git_repository_hashfile",
            "git_repository_set_head_detached",
            "git_revwalk_push",
            "git_revwalk_hide",
            "git_revwalk_next",
            "git_revwalk_hide_cb",
            "git_stash_save",
            "git_stash_cb",
            "git_tag_lookup",
            "git_tag_lookup_prefix",
            "git_tag_create",
            "git_tag_annotation_create",
            "git_tag_create_from_buffer",
            "git_tag_create_lightweight",
            "git_tag_foreach_cb",
            "git_transaction_set_target",
            "git_tree_lookup",
            "git_tree_lookup_prefix",
            "git_tree_entry_byid",
            "git_treebuilder_insert",
            "git_treebuilder_write",
            "git_treebuilder_write_with_buffer",
            "git_tree_create_updated",
            "git_commit_create_from_ids",
            "git_commit_create_from_callback",
            "git_index_reuc_add",
            "git_reference__alloc"
          ]
        },
        "git_oid_fromstr": {
          "kind": "function",
          "name": "git_oid_fromstr",
          "location": {
            "file": "oid.h",
            "line": 47,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes)."
            }
          ],
          "comment": [
            "Parse a hex formatted object id into a git_oid."
          ],
          "group": "oid"
        },
        "git_oid_fromstrp": {
          "kind": "function",
          "name": "git_oid_fromstrp",
          "location": {
            "file": "oid.h",
            "line": 56,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string; must be null-terminated."
            }
          ],
          "comment": [
            "Parse a hex formatted null-terminated string into a git_oid."
          ],
          "group": "oid"
        },
        "git_oid_fromstrn": {
          "kind": "function",
          "name": "git_oid_fromstrn",
          "location": {
            "file": "oid.h",
            "line": 69,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string of at least size `length`"
            },
            {
              "name": "length",
              "type": "size_t",
              "direction": "in",
              "comment": "length of the input string"
            }
          ],
          "comment": [
            "Parse N characters of a hex formatted object id into a git_oid.",
            "If N is odd, the last byte's high nibble will be read in and the\n low nibble set to zero."
          ],
          "group": "oid"
        },
        "git_oid_fromraw": {
          "kind": "function",
          "name": "git_oid_fromraw",
          "location": {
            "file": "oid.h",
            "line": 78,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "raw",
              "type": "const unsigned char *",
              "direction": "in",
              "comment": "the raw input bytes to be copied."
            }
          ],
          "comment": [
            "Copy an already raw oid into a git_oid structure."
          ],
          "group": "oid"
        },
        "git_oid_fmt": {
          "kind": "function",
          "name": "git_oid_fmt",
          "location": {
            "file": "oid.h",
            "line": 91,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes). Only the\n\t\toid digits are written; a '\n\\\n0' terminator must be added\n\t\tby the caller if it is required."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a hex string."
          ],
          "group": "oid"
        },
        "git_oid_nfmt": {
          "kind": "function",
          "name": "git_oid_nfmt",
          "location": {
            "file": "oid.h",
            "line": 103,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; you say how many bytes to write.\n\t\tIf the number of bytes is > GIT_OID_HEXSZ, extra bytes\n\t\twill be zeroed; if not, a '\n\\\n0' terminator is NOT added."
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "number of characters to write into out string"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a partial hex string."
          ],
          "group": "oid"
        },
        "git_oid_pathfmt": {
          "kind": "function",
          "name": "git_oid_pathfmt",
          "location": {
            "file": "oid.h",
            "line": 119,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "output hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (41 bytes). Only the\n\t\toid digits are written; a '\n\\\n0' terminator must be added\n\t\tby the caller if it is required."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a loose-object path string.",
            "The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digits of the oid and \"...\" is the remaining 38 digits."
          ],
          "group": "oid"
        },
        "git_oid_tostr_s": {
          "kind": "function",
          "name": "git_oid_tostr_s",
          "location": {
            "file": "oid.h",
            "line": 132,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the c-string"
          },
          "params": [
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The oid structure to format"
            }
          ],
          "comment": [
            "Format a git_oid into a statically allocated c-string.",
            "The c-string is owned by the library and should not be freed\n by the user. If libgit2 is built with thread support, the string\n will be stored in TLS (i.e. one buffer per thread) to allow for\n concurrent calls of the function."
          ],
          "group": "oid"
        },
        "git_oid_tostr": {
          "kind": "function",
          "name": "git_oid_tostr",
          "location": {
            "file": "oid.h",
            "line": 151,
            "column": 20
          },
          "returns": {
            "type": "char *",
            "comment": "the out buffer pointer, assuming no input parameter\n\t\t\terrors, otherwise a pointer to an empty string."
          },
          "params": [
            {
              "name": "out",
              "type": "char *",
              "direction": "in",
              "comment": "the buffer into which the oid string is output."
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the size of the out buffer."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid structure to format."
            }
          ],
          "comment": [
            "Format a git_oid into a buffer as a hex format c-string.",
            "If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters (but will still be\n NUL-byte terminated).",
            "If there are any input parameter errors (out == NULL, n == 0, oid ==\n NULL), then a pointer to an empty string is returned, so that the\n return value can always be printed."
          ],
          "group": "oid"
        },
        "git_oid_cpy": {
          "kind": "function",
          "name": "git_oid_cpy",
          "location": {
            "file": "oid.h",
            "line": 160,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "oid structure the result is written into."
            },
            {
              "name": "src",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure to copy from."
            }
          ],
          "comment": [
            "Copy an oid from one structure to another."
          ],
          "group": "oid"
        },
        "git_oid_cmp": {
          "kind": "function",
          "name": "git_oid_cmp",
          "location": {
            "file": "oid.h",
            "line": 169,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "<\n0, 0, >0 if a \n<\n b, a == b, a > b."
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "first oid structure."
            },
            {
              "name": "b",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "second oid structure."
            }
          ],
          "comment": [
            "Compare two oid structures."
          ],
          "group": "oid"
        },
        "git_oid_equal": {
          "kind": "function",
          "name": "git_oid_equal",
          "location": {
            "file": "oid.h",
            "line": 178,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "true if equal, false otherwise"
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "first oid structure."
            },
            {
              "name": "b",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "second oid structure."
            }
          ],
          "comment": [
            "Compare two oid structures for equality"
          ],
          "group": "oid"
        },
        "git_oid_ncmp": {
          "kind": "function",
          "name": "git_oid_ncmp",
          "location": {
            "file": "oid.h",
            "line": 189,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 in case of a match"
          },
          "params": [
            {
              "name": "a",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "first oid structure."
            },
            {
              "name": "b",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "second oid structure."
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the number of hex chars to compare"
            }
          ],
          "comment": [
            "Compare the first 'len' hexadecimal characters (packets of 4 bits)\n of two oid structures."
          ],
          "group": "oid"
        },
        "git_oid_streq": {
          "kind": "function",
          "name": "git_oid_streq",
          "location": {
            "file": "oid.h",
            "line": 198,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 in case of a match, -1 otherwise."
          },
          "params": [
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string of an object id."
            }
          ],
          "comment": [
            "Check if an oid equals an hex formatted object id."
          ],
          "group": "oid"
        },
        "git_oid_strcmp": {
          "kind": "function",
          "name": "git_oid_strcmp",
          "location": {
            "file": "oid.h",
            "line": 208,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "-1 if str is not valid, \n<\n0 if id sorts before str,\n         0 if id matches str, >0 if id sorts after str."
          },
          "params": [
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "oid structure."
            },
            {
              "name": "str",
              "type": "const char *",
              "direction": "in",
              "comment": "input hex string of an object id."
            }
          ],
          "comment": [
            "Compare an oid to an hex formatted object id."
          ],
          "group": "oid"
        },
        "git_oid_is_zero": {
          "kind": "function",
          "name": "git_oid_is_zero",
          "location": {
            "file": "oid.h",
            "line": 215,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if all zeros, 0 otherwise."
          },
          "params": [
            {
              "name": "id",
              "type": "const git_oid *"
            }
          ],
          "comment": [
            "Check is an oid is all zeros."
          ],
          "group": "oid"
        },
        "git_oid_shorten": {
          "kind": "struct",
          "name": "git_oid_shorten",
          "referenceName": "struct git_oid_shorten",
          "opaque": true,
          "comment": [
            "OID Shortener object"
          ],
          "location": {
            "file": "oid.h",
            "line": 220,
            "column": 32
          },
          "group": "oid",
          "returnedBy": [
            "git_oid_shorten_new"
          ],
          "parameterTo": [
            "git_oid_shorten_add",
            "git_oid_shorten_free"
          ]
        },
        "git_oid_shorten_new": {
          "kind": "function",
          "name": "git_oid_shorten_new",
          "location": {
            "file": "oid.h",
            "line": 236,
            "column": 31
          },
          "returns": {
            "type": "git_oid_shorten *",
            "comment": "a `git_oid_shorten` instance, NULL if OOM"
          },
          "params": [
            {
              "name": "min_length",
              "type": "size_t",
              "direction": "in",
              "comment": "The minimal length for all identifiers,\n\t\twhich will be used even if shorter OIDs would still\n\t\tbe unique."
            }
          ],
          "comment": [
            "Create a new OID shortener.",
            "The OID shortener is used to process a list of OIDs\n in text form and return the shortest length that would\n uniquely identify all of them.",
            "E.g. look at the result of `git log --abbrev`."
          ],
          "group": "oid"
        },
        "git_oid_shorten_add": {
          "kind": "function",
          "name": "git_oid_shorten_add",
          "location": {
            "file": "oid.h",
            "line": 262,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the minimal length to uniquely identify all OIDs\n\t\tadded so far to the set; or an error code (\n<\n0) if an\n\t\terror occurs."
          },
          "params": [
            {
              "name": "os",
              "type": "git_oid_shorten *",
              "direction": "in",
              "comment": "a `git_oid_shorten` instance"
            },
            {
              "name": "text_id",
              "type": "const char *",
              "direction": "in",
              "comment": "an OID in text form"
            }
          ],
          "comment": [
            "Add a new OID to set of shortened OIDs and calculate\n the minimal length to uniquely identify all the OIDs in\n the set.",
            "The OID is expected to be a 40-char hexadecimal string.\n The OID is owned by the user and will not be modified\n or freed.",
            "For performance reasons, there is a hard-limit of how many\n OIDs can be added to a single set (around ~32000, assuming\n a mostly randomized distribution), which should be enough\n for any kind of program, and keeps the algorithm fast and\n memory-efficient.",
            "Attempting to add more than those OIDs will result in a\n GIT_ERROR_INVALID error"
          ],
          "group": "oid"
        },
        "git_oid_shorten_free": {
          "kind": "function",
          "name": "git_oid_shorten_free",
          "location": {
            "file": "oid.h",
            "line": 269,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "os",
              "type": "git_oid_shorten *",
              "direction": "in",
              "comment": "a `git_oid_shorten` instance"
            }
          ],
          "comment": [
            "Free an OID shortener instance"
          ],
          "group": "oid"
        }
      },
      "info": {
        "summary": "Git object id routines"
      }
    },
    "oidarray": {
      "apis": {
        "git_oidarray": {
          "kind": "struct",
          "name": "git_oidarray",
          "referenceName": "git_oidarray",
          "comment": [
            "Array of object ids"
          ],
          "members": [
            {
              "name": "ids",
              "type": "git_oid *"
            },
            {
              "name": "count",
              "type": "size_t"
            }
          ],
          "location": {
            "file": "oidarray.h",
            "line": 16,
            "column": 16
          },
          "group": "oidarray",
          "parameterTo": [
            "git_merge_bases",
            "git_merge_bases_many",
            "git_oidarray_free"
          ]
        },
        "git_oidarray_free": {
          "kind": "function",
          "name": "git_oidarray_free",
          "location": {
            "file": "oidarray.h",
            "line": 34,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "array",
              "type": "git_oidarray *",
              "direction": "in",
              "comment": "git_oidarray from which to free oid data"
            }
          ],
          "comment": [
            "Free the OID array",
            "This method must (and must only) be called on `git_oidarray`\n objects where the array is allocated by the library. Not doing so,\n will result in a memory leak.",
            "This does not free the `git_oidarray` itself, since the library will\n never allocate that object directly itself (it is more commonly embedded\n inside another struct or created on the stack)."
          ],
          "group": "oidarray"
        }
      },
      "info": {}
    },
    "sys/openssl": {
      "apis": {
        "git_openssl_set_locking": {
          "kind": "function",
          "name": "git_openssl_set_locking",
          "location": {
            "file": "sys/openssl.h",
            "line": 34,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 if there are errors or if libgit2 was not\n built with OpenSSL and threading support."
          },
          "comment": [
            "Initialize the OpenSSL locks",
            "OpenSSL requires the application to determine how it performs\n locking.",
            "This is a last-resort convenience function which libgit2 provides for\n allocating and initializing the locks as well as setting the\n locking function to use the system's native locking functions.",
            "The locking function will be cleared and the memory will be freed\n when you call git_threads_sutdown().",
            "If your programming language has an OpenSSL package/bindings, it\n likely sets up locking. You should very strongly prefer that over\n this function."
          ],
          "group": "sys/openssl"
        }
      },
      "info": {}
    },
    "pack": {
      "apis": {
        "git_packbuilder_stage_t": {
          "kind": "enum",
          "name": "git_packbuilder_stage_t",
          "referenceName": "git_packbuilder_stage_t",
          "members": [
            {
              "name": "GIT_PACKBUILDER_ADDING_OBJECTS",
              "value": "0"
            },
            {
              "name": "GIT_PACKBUILDER_DELTAFICATION",
              "value": "1"
            }
          ],
          "comment": [
            "Stages that are reported by the packbuilder progress callback."
          ],
          "location": {
            "file": "pack.h",
            "line": 52,
            "column": 9
          },
          "group": "pack"
        },
        "git_packbuilder_new": {
          "kind": "function",
          "name": "git_packbuilder_new",
          "location": {
            "file": "pack.h",
            "line": 65,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_packbuilder **",
              "direction": "in",
              "comment": "The new packbuilder object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository"
            }
          ],
          "comment": [
            "Initialize a new packbuilder"
          ],
          "group": "pack"
        },
        "git_packbuilder_set_threads": {
          "kind": "function",
          "name": "git_packbuilder_set_threads",
          "location": {
            "file": "pack.h",
            "line": 78,
            "column": 26
          },
          "returns": {
            "type": "unsigned int",
            "comment": "number of actual threads to be used"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder"
            },
            {
              "name": "n",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Number of threads to spawn"
            }
          ],
          "comment": [
            "Set number of threads to spawn",
            "By default, libgit2 won't spawn any threads at all;\n when set to 0, libgit2 will autodetect the number of\n CPUs."
          ],
          "group": "pack"
        },
        "git_packbuilder_insert": {
          "kind": "function",
          "name": "git_packbuilder_insert",
          "location": {
            "file": "pack.h",
            "line": 92,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The oid of the commit"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name; might be NULL"
            }
          ],
          "comment": [
            "Insert a single object",
            "For an optimal pack it's mandatory to insert objects in recency order,\n commits followed by trees and blobs."
          ],
          "group": "pack"
        },
        "git_packbuilder_insert_tree": {
          "kind": "function",
          "name": "git_packbuilder_insert_tree",
          "location": {
            "file": "pack.h",
            "line": 104,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The oid of the root tree"
            }
          ],
          "comment": [
            "Insert a root tree object",
            "This will add the tree as well as all referenced trees and blobs."
          ],
          "group": "pack"
        },
        "git_packbuilder_insert_commit": {
          "kind": "function",
          "name": "git_packbuilder_insert_commit",
          "location": {
            "file": "pack.h",
            "line": 116,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The oid of the commit"
            }
          ],
          "comment": [
            "Insert a commit object",
            "This will add a commit as well as the completed referenced tree."
          ],
          "group": "pack"
        },
        "git_packbuilder_insert_walk": {
          "kind": "function",
          "name": "git_packbuilder_insert_walk",
          "location": {
            "file": "pack.h",
            "line": 129,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "the packbuilder"
            },
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the revwalk to use to fill the packbuilder"
            }
          ],
          "comment": [
            "Insert objects as given by the walk",
            "Those commits and all objects they reference will be inserted into\n the packbuilder."
          ],
          "group": "pack"
        },
        "git_packbuilder_insert_recur": {
          "kind": "function",
          "name": "git_packbuilder_insert_recur",
          "location": {
            "file": "pack.h",
            "line": 141,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "the packbuilder"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the id of the root object to insert"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "optional name for the object"
            }
          ],
          "comment": [
            "Recursively insert an object and its referenced objects",
            "Insert the object as well as any object it references."
          ],
          "group": "pack"
        },
        "git_packbuilder_write_buf": {
          "kind": "function",
          "name": "git_packbuilder_write_buf",
          "location": {
            "file": "pack.h",
            "line": 152,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "buf",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Buffer where to write the packfile"
            },
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder"
            }
          ],
          "comment": [
            "Write the contents of the packfile to an in-memory buffer",
            "The contents of the buffer will become a valid packfile, even though there\n will be no attached index"
          ],
          "group": "pack"
        },
        "git_packbuilder_write": {
          "kind": "function",
          "name": "git_packbuilder_write",
          "location": {
            "file": "pack.h",
            "line": 165,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to the directory where the packfile and index should be stored, or NULL for default location"
            },
            {
              "name": "mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "permissions to use creating a packfile or 0 for defaults"
            },
            {
              "name": "progress_cb",
              "type": "git_indexer_progress_cb",
              "direction": "in",
              "comment": "function to call with progress information from the indexer (optional)",
              "referenceType": "int (*)(const git_indexer_progress *, void *)"
            },
            {
              "name": "progress_cb_payload",
              "type": "void *",
              "direction": "in",
              "comment": "payload for the progress callback (optional)"
            }
          ],
          "comment": [
            "Write the new pack and corresponding index file to path."
          ],
          "group": "pack"
        },
        "git_packbuilder_hash": {
          "kind": "function",
          "name": "git_packbuilder_hash",
          "location": {
            "file": "pack.h",
            "line": 180,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder object"
            }
          ],
          "comment": [
            "Get the packfile's hash",
            "A packfile's name is derived from the sorted hashing of all object\n names. This is only correct after the packfile has been written."
          ],
          "group": "pack"
        },
        "git_packbuilder_foreach_cb": {
          "kind": "callback",
          "name": "git_packbuilder_foreach_cb",
          "type": "int (*)(void *, size_t, void *)",
          "comment": [
            "Callback used to iterate over packed objects"
          ],
          "location": {
            "file": "pack.h",
            "line": 192,
            "column": 26
          },
          "see": [
            "git_packbuilder_foreach"
          ],
          "params": [
            {
              "name": "buf",
              "direction": "in",
              "comment": "A pointer to the object's data",
              "type": "void *"
            },
            {
              "name": "size",
              "direction": "in",
              "comment": "The size of the underlying object",
              "type": "size_t"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload passed to git_packbuilder_foreach",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "non-zero to terminate the iteration",
            "type": "int"
          },
          "group": "pack",
          "parameterTo": [
            "git_packbuilder_foreach"
          ],
          "typedef": true
        },
        "git_packbuilder_foreach": {
          "kind": "function",
          "name": "git_packbuilder_foreach",
          "location": {
            "file": "pack.h",
            "line": 202,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "the packbuilder"
            },
            {
              "name": "cb",
              "type": "git_packbuilder_foreach_cb",
              "direction": "in",
              "comment": "the callback to call with each packed object's buffer",
              "referenceType": "int (*)(void *, size_t, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "the callback's data"
            }
          ],
          "comment": [
            "Create the new pack and pass each object to the callback"
          ],
          "group": "pack"
        },
        "git_packbuilder_object_count": {
          "kind": "function",
          "name": "git_packbuilder_object_count",
          "location": {
            "file": "pack.h",
            "line": 210,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the number of objects in the packfile"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "the packbuilder"
            }
          ],
          "comment": [
            "Get the total number of objects the packbuilder will write out"
          ],
          "group": "pack"
        },
        "git_packbuilder_written": {
          "kind": "function",
          "name": "git_packbuilder_written",
          "location": {
            "file": "pack.h",
            "line": 218,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the number of objects which have already been written"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "the packbuilder"
            }
          ],
          "comment": [
            "Get the number of objects the packbuilder has already written out"
          ],
          "group": "pack"
        },
        "git_packbuilder_progress": {
          "kind": "callback",
          "name": "git_packbuilder_progress",
          "type": "int (*)(int, uint32_t, uint32_t, void *)",
          "comment": [
            "Packbuilder progress notification function"
          ],
          "location": {
            "file": "pack.h",
            "line": 221,
            "column": 26
          },
          "params": [
            {
              "type": "int"
            },
            {
              "type": "uint32_t"
            },
            {
              "type": "uint32_t"
            },
            {
              "type": "void *"
            }
          ],
          "group": "pack",
          "parameterTo": [
            "git_packbuilder_set_callbacks"
          ],
          "typedef": true
        },
        "git_packbuilder_set_callbacks": {
          "kind": "function",
          "name": "git_packbuilder_set_callbacks",
          "location": {
            "file": "pack.h",
            "line": 237,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder object"
            },
            {
              "name": "progress_cb",
              "type": "git_packbuilder_progress",
              "direction": "in",
              "comment": "Function to call with progress information during\n pack building. Be aware that this is called inline with pack building\n operations, so performance may be affected.",
              "referenceType": "int (*)(int, uint32_t, uint32_t, void *)"
            },
            {
              "name": "progress_cb_payload",
              "type": "void *",
              "direction": "in",
              "comment": "Payload for progress callback."
            }
          ],
          "comment": [
            "Set the callbacks for a packbuilder"
          ],
          "group": "pack"
        },
        "git_packbuilder_free": {
          "kind": "function",
          "name": "git_packbuilder_free",
          "location": {
            "file": "pack.h",
            "line": 247,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "pb",
              "type": "git_packbuilder *",
              "direction": "in",
              "comment": "The packbuilder"
            }
          ],
          "comment": [
            "Free the packbuilder and all associated data"
          ],
          "group": "pack"
        },
        "git_packbuilder": {
          "kind": "struct",
          "name": "git_packbuilder",
          "referenceName": "struct git_packbuilder",
          "opaque": true,
          "comment": [
            "Representation of a git packbuilder"
          ],
          "location": {
            "file": "types.h",
            "line": 163,
            "column": 32
          },
          "group": "pack",
          "parameterTo": [
            "git_packbuilder_new",
            "git_packbuilder_set_threads",
            "git_packbuilder_insert",
            "git_packbuilder_insert_tree",
            "git_packbuilder_insert_commit",
            "git_packbuilder_insert_walk",
            "git_packbuilder_insert_recur",
            "git_packbuilder_write_buf",
            "git_packbuilder_write",
            "git_packbuilder_hash",
            "git_packbuilder_foreach",
            "git_packbuilder_object_count",
            "git_packbuilder_written",
            "git_packbuilder_set_callbacks",
            "git_packbuilder_free"
          ]
        }
      },
      "info": {
        "summary": "Git pack management routines",
        "details": "Packing objects\n---------------\nCreation of packfiles requires two steps:\n- First, insert all the objects you want to put into the packfile\nusing `git_packbuilder_insert` and `git_packbuilder_insert_tree`.\nIt's important to add the objects in recency order (\"in the order\nthat they are 'reachable' from head\").\n\"ANY order will give you a working pack, ... [but it is] the thing\nthat gives packs good locality. It keeps the objects close to the\nhead (whether they are old or new, but they are _reachable_ from the\nhead) at the head of the pack. So packs actually have absolutely\n_wonderful_ IO patterns.\" - Linus Torvalds\ngit.git/Documentation/technical/pack-heuristics.txt\n- Second, use `git_packbuilder_write` or `git_packbuilder_foreach` to\nwrite the resulting packfile.\nlibgit2 will take care of the delta ordering and generation.\n`git_packbuilder_set_threads` can be used to adjust the number of\nthreads used for the process.\nSee tests/pack/packbuilder.c for an example."
      }
    },
    "patch": {
      "apis": {
        "git_patch": {
          "kind": "struct",
          "name": "git_patch",
          "referenceName": "struct git_patch",
          "opaque": true,
          "comment": [
            "The diff patch is used to store all the text diffs for a delta.",
            "You can easily loop over the content of patches and get information about\n them."
          ],
          "location": {
            "file": "patch.h",
            "line": 29,
            "column": 26
          },
          "group": "patch",
          "parameterTo": [
            "git_patch_from_diff",
            "git_patch_from_blobs",
            "git_patch_from_blob_and_buffer",
            "git_patch_from_buffers",
            "git_patch_free",
            "git_patch_get_delta",
            "git_patch_num_hunks",
            "git_patch_line_stats",
            "git_patch_get_hunk",
            "git_patch_num_lines_in_hunk",
            "git_patch_get_line_in_hunk",
            "git_patch_size",
            "git_patch_print",
            "git_patch_to_buf"
          ]
        },
        "git_patch_from_diff": {
          "kind": "function",
          "name": "git_patch_from_diff",
          "location": {
            "file": "patch.h",
            "line": 51,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, other value \n<\n 0 on error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_patch **",
              "direction": "in",
              "comment": "Output parameter for the delta patch object"
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "Diff list object"
            },
            {
              "name": "idx",
              "type": "size_t",
              "direction": "in",
              "comment": "Index into diff list"
            }
          ],
          "comment": [
            "Return a patch for an entry in the diff list.",
            "The `git_patch` is a newly created object contains the text diffs\n for the delta.  You have to call `git_patch_free()` when you are\n done with it.  You can use the patch object to loop over all the hunks\n and lines in the diff of the one delta.",
            "For an unchanged file or a binary file, no `git_patch` will be\n created, the output will be set to NULL, and the `binary` flag will be\n set true in the `git_diff_delta` structure.",
            "It is okay to pass NULL for either of the output parameters; if you pass\n NULL for the `git_patch`, then the text diff will not be calculated."
          ],
          "group": "patch"
        },
        "git_patch_from_blobs": {
          "kind": "function",
          "name": "git_patch_from_blobs",
          "location": {
            "file": "patch.h",
            "line": 70,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code \n<\n 0"
          },
          "params": [
            {
              "name": "out",
              "type": "git_patch **",
              "direction": "in",
              "comment": "The generated patch; NULL on error"
            },
            {
              "name": "old_blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "Blob for old side of diff, or NULL for empty blob"
            },
            {
              "name": "old_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat old blob as if it had this filename; can be NULL"
            },
            {
              "name": "new_blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "Blob for new side of diff, or NULL for empty blob"
            },
            {
              "name": "new_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat new blob as if it had this filename; can be NULL"
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Options for diff, or NULL for default options"
            }
          ],
          "comment": [
            "Directly generate a patch from the difference between two blobs.",
            "This is just like `git_diff_blobs()` except it generates a patch object\n for the difference instead of directly making callbacks.  You can use the\n standard `git_patch` accessor functions to read the patch data, and\n you must call `git_patch_free()` on the patch when done."
          ],
          "group": "patch"
        },
        "git_patch_from_blob_and_buffer": {
          "kind": "function",
          "name": "git_patch_from_blob_and_buffer",
          "location": {
            "file": "patch.h",
            "line": 95,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code \n<\n 0"
          },
          "params": [
            {
              "name": "out",
              "type": "git_patch **",
              "direction": "in",
              "comment": "The generated patch; NULL on error"
            },
            {
              "name": "old_blob",
              "type": "const git_blob *",
              "direction": "in",
              "comment": "Blob for old side of diff, or NULL for empty blob"
            },
            {
              "name": "old_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat old blob as if it had this filename; can be NULL"
            },
            {
              "name": "buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "Raw data for new side of diff, or NULL for empty"
            },
            {
              "name": "buffer_len",
              "type": "size_t",
              "direction": "in",
              "comment": "Length of raw data for new side of diff"
            },
            {
              "name": "buffer_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat buffer as if it had this filename; can be NULL"
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Options for diff, or NULL for default options"
            }
          ],
          "comment": [
            "Directly generate a patch from the difference between a blob and a buffer.",
            "This is just like `git_diff_blob_to_buffer()` except it generates a patch\n object for the difference instead of directly making callbacks.  You can\n use the standard `git_patch` accessor functions to read the patch\n data, and you must call `git_patch_free()` on the patch when done."
          ],
          "group": "patch"
        },
        "git_patch_from_buffers": {
          "kind": "function",
          "name": "git_patch_from_buffers",
          "location": {
            "file": "patch.h",
            "line": 122,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code \n<\n 0"
          },
          "params": [
            {
              "name": "out",
              "type": "git_patch **",
              "direction": "in",
              "comment": "The generated patch; NULL on error"
            },
            {
              "name": "old_buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "Raw data for old side of diff, or NULL for empty"
            },
            {
              "name": "old_len",
              "type": "size_t",
              "direction": "in",
              "comment": "Length of the raw data for old side of the diff"
            },
            {
              "name": "old_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat old buffer as if it had this filename; can be NULL"
            },
            {
              "name": "new_buffer",
              "type": "const void *",
              "direction": "in",
              "comment": "Raw data for new side of diff, or NULL for empty"
            },
            {
              "name": "new_len",
              "type": "size_t",
              "direction": "in",
              "comment": "Length of raw data for new side of diff"
            },
            {
              "name": "new_as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Treat buffer as if it had this filename; can be NULL"
            },
            {
              "name": "opts",
              "type": "const git_diff_options *",
              "direction": "in",
              "comment": "Options for diff, or NULL for default options"
            }
          ],
          "comment": [
            "Directly generate a patch from the difference between two buffers.",
            "This is just like `git_diff_buffers()` except it generates a patch\n object for the difference instead of directly making callbacks.  You can\n use the standard `git_patch` accessor functions to read the patch\n data, and you must call `git_patch_free()` on the patch when done."
          ],
          "group": "patch"
        },
        "git_patch_free": {
          "kind": "function",
          "name": "git_patch_free",
          "location": {
            "file": "patch.h",
            "line": 135,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "patch",
              "type": "git_patch *"
            }
          ],
          "comment": [
            "Free a git_patch object."
          ],
          "group": "patch"
        },
        "git_patch_get_delta": {
          "kind": "function",
          "name": "git_patch_get_delta",
          "location": {
            "file": "patch.h",
            "line": 141,
            "column": 36
          },
          "returns": {
            "type": "const git_diff_delta *"
          },
          "params": [
            {
              "name": "patch",
              "type": "const git_patch *"
            }
          ],
          "comment": [
            "Get the delta associated with a patch.  This delta points to internal\n data and you do not have to release it when you are done with it."
          ],
          "group": "patch"
        },
        "git_patch_num_hunks": {
          "kind": "function",
          "name": "git_patch_num_hunks",
          "location": {
            "file": "patch.h",
            "line": 146,
            "column": 20
          },
          "returns": {
            "type": "size_t"
          },
          "params": [
            {
              "name": "patch",
              "type": "const git_patch *"
            }
          ],
          "comment": [
            "Get the number of hunks in a patch"
          ],
          "group": "patch"
        },
        "git_patch_line_stats": {
          "kind": "function",
          "name": "git_patch_line_stats",
          "location": {
            "file": "patch.h",
            "line": 164,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on error"
          },
          "params": [
            {
              "name": "total_context",
              "type": "size_t *",
              "direction": "in",
              "comment": "Count of context lines in output, can be NULL."
            },
            {
              "name": "total_additions",
              "type": "size_t *",
              "direction": "in",
              "comment": "Count of addition lines in output, can be NULL."
            },
            {
              "name": "total_deletions",
              "type": "size_t *",
              "direction": "in",
              "comment": "Count of deletion lines in output, can be NULL."
            },
            {
              "name": "patch",
              "type": "const git_patch *",
              "direction": "in",
              "comment": "The git_patch object"
            }
          ],
          "comment": [
            "Get line counts of each type in a patch.",
            "This helps imitate a diff --numstat type of output.  For that purpose,\n you only need the `total_additions` and `total_deletions` values, but we\n include the `total_context` line count in case you want the total number\n of lines of diff output that will be generated.",
            "All outputs are optional. Pass NULL if you don't need a particular count."
          ],
          "group": "patch"
        },
        "git_patch_get_hunk": {
          "kind": "function",
          "name": "git_patch_get_hunk",
          "location": {
            "file": "patch.h",
            "line": 183,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if hunk_idx out of range, \n<\n0 on error"
          },
          "params": [
            {
              "name": "out",
              "type": "const git_diff_hunk **",
              "direction": "in",
              "comment": "Output pointer to git_diff_hunk of hunk"
            },
            {
              "name": "lines_in_hunk",
              "type": "size_t *",
              "direction": "in",
              "comment": "Output count of total lines in this hunk"
            },
            {
              "name": "patch",
              "type": "git_patch *",
              "direction": "in",
              "comment": "Input pointer to patch object"
            },
            {
              "name": "hunk_idx",
              "type": "size_t",
              "direction": "in",
              "comment": "Input index of hunk to get information about"
            }
          ],
          "comment": [
            "Get the information about a hunk in a patch",
            "Given a patch and a hunk index into the patch, this returns detailed\n information about that hunk.  Any of the output pointers can be passed\n as NULL if you don't care about that particular piece of information."
          ],
          "group": "patch"
        },
        "git_patch_num_lines_in_hunk": {
          "kind": "function",
          "name": "git_patch_num_lines_in_hunk",
          "location": {
            "file": "patch.h",
            "line": 196,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Number of lines in hunk or GIT_ENOTFOUND if invalid hunk index"
          },
          "params": [
            {
              "name": "patch",
              "type": "const git_patch *",
              "direction": "in",
              "comment": "The git_patch object"
            },
            {
              "name": "hunk_idx",
              "type": "size_t",
              "direction": "in",
              "comment": "Index of the hunk"
            }
          ],
          "comment": [
            "Get the number of lines in a hunk."
          ],
          "group": "patch"
        },
        "git_patch_get_line_in_hunk": {
          "kind": "function",
          "name": "git_patch_get_line_in_hunk",
          "location": {
            "file": "patch.h",
            "line": 214,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure"
          },
          "params": [
            {
              "name": "out",
              "type": "const git_diff_line **",
              "direction": "in",
              "comment": "The git_diff_line data for this line"
            },
            {
              "name": "patch",
              "type": "git_patch *",
              "direction": "in",
              "comment": "The patch to look in"
            },
            {
              "name": "hunk_idx",
              "type": "size_t",
              "direction": "in",
              "comment": "The index of the hunk"
            },
            {
              "name": "line_of_hunk",
              "type": "size_t",
              "direction": "in",
              "comment": "The index of the line in the hunk"
            }
          ],
          "comment": [
            "Get data about a line in a hunk of a patch.",
            "Given a patch, a hunk index, and a line index in the hunk, this\n will return a lot of details about that line.  If you pass a hunk\n index larger than the number of hunks or a line index larger than\n the number of lines in the hunk, this will return -1."
          ],
          "group": "patch"
        },
        "git_patch_size": {
          "kind": "function",
          "name": "git_patch_size",
          "location": {
            "file": "patch.h",
            "line": 236,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "The number of bytes of data"
          },
          "params": [
            {
              "name": "patch",
              "type": "git_patch *",
              "direction": "in",
              "comment": "A git_patch representing changes to one file"
            },
            {
              "name": "include_context",
              "type": "int",
              "direction": "in",
              "comment": "Include context lines in size if non-zero"
            },
            {
              "name": "include_hunk_headers",
              "type": "int",
              "direction": "in",
              "comment": "Include hunk header lines if non-zero"
            },
            {
              "name": "include_file_headers",
              "type": "int",
              "direction": "in",
              "comment": "Include file header lines if non-zero"
            }
          ],
          "comment": [
            "Look up size of patch diff data in bytes",
            "This returns the raw size of the patch data.  This only includes the\n actual data from the lines of the diff, not the file or hunk headers.",
            "If you pass `include_context` as true (non-zero), this will be the size\n of all of the diff output; if you pass it as false (zero), this will\n only include the actual changed lines (as if `context_lines` was 0)."
          ],
          "group": "patch"
        },
        "git_patch_print": {
          "kind": "function",
          "name": "git_patch_print",
          "location": {
            "file": "patch.h",
            "line": 254,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "patch",
              "type": "git_patch *",
              "direction": "in",
              "comment": "A git_patch representing changes to one file"
            },
            {
              "name": "print_cb",
              "type": "git_diff_line_cb",
              "direction": "in",
              "comment": "Callback function to output lines of the patch.  Will be\n                 called for file headers, hunk headers, and diff lines.",
              "referenceType": "int (*)(const git_diff_delta *, const git_diff_hunk *, const git_diff_line *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Reference pointer that will be passed to your callbacks."
            }
          ],
          "comment": [
            "Serialize the patch to text via callback.",
            "Returning a non-zero value from the callback will terminate the iteration\n and return that value to the caller."
          ],
          "group": "patch"
        },
        "git_patch_to_buf": {
          "kind": "function",
          "name": "git_patch_to_buf",
          "location": {
            "file": "patch.h",
            "line": 266,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "The git_buf to be filled in"
            },
            {
              "name": "patch",
              "type": "git_patch *",
              "direction": "in",
              "comment": "A git_patch representing changes to one file"
            }
          ],
          "comment": [
            "Get the content of a patch as a single diff text."
          ],
          "group": "patch"
        }
      },
      "info": {
        "summary": "Patch handling routines."
      }
    },
    "sys/path": {
      "apis": {
        "git_path_gitfile": {
          "kind": "enum",
          "name": "git_path_gitfile",
          "referenceName": "git_path_gitfile",
          "members": [
            {
              "name": "GIT_PATH_GITFILE_GITIGNORE",
              "comment": [
                "Check for the .gitignore file"
              ]
            },
            {
              "name": "GIT_PATH_GITFILE_GITMODULES",
              "comment": [
                "Check for the .gitmodules file"
              ]
            },
            {
              "name": "GIT_PATH_GITFILE_GITATTRIBUTES",
              "comment": [
                "Check for the .gitattributes file"
              ]
            }
          ],
          "comment": [
            "The kinds of git-specific files we know about.",
            "The order needs to stay the same to not break the `gitfiles`\n array in path.c"
          ],
          "location": {
            "file": "sys/path.h",
            "line": 21,
            "column": 9
          },
          "group": "sys/path",
          "parameterTo": [
            "git_path_is_gitfile"
          ]
        },
        "git_path_fs": {
          "kind": "enum",
          "name": "git_path_fs",
          "referenceName": "git_path_fs",
          "members": [
            {
              "name": "GIT_PATH_FS_GENERIC",
              "comment": [
                "Do both NTFS- and HFS-specific checks"
              ]
            },
            {
              "name": "GIT_PATH_FS_NTFS",
              "comment": [
                "Do NTFS-specific checks only"
              ]
            },
            {
              "name": "GIT_PATH_FS_HFS",
              "comment": [
                "Do HFS-specific checks only"
              ]
            }
          ],
          "comment": [
            "The kinds of checks to perform according to which filesystem we are trying to\n protect."
          ],
          "location": {
            "file": "sys/path.h",
            "line": 34,
            "column": 9
          },
          "group": "sys/path",
          "parameterTo": [
            "git_path_is_gitfile"
          ]
        },
        "git_path_is_gitfile": {
          "kind": "function",
          "name": "git_path_is_gitfile",
          "location": {
            "file": "sys/path.h",
            "line": 60,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 in case the file does not match, a positive value if\n         it does; -1 in case of an error"
          },
          "params": [
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path component to check"
            },
            {
              "name": "pathlen",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of `path` that is to be checked"
            },
            {
              "name": "gitfile",
              "type": "git_path_gitfile",
              "direction": "in",
              "comment": "which file to check against",
              "referenceType": "enum git_path_gitfile"
            },
            {
              "name": "fs",
              "type": "git_path_fs",
              "direction": "in",
              "comment": "which filesystem-specific checks to use",
              "referenceType": "enum git_path_fs"
            }
          ],
          "comment": [
            "Check whether a path component corresponds to a .git$SUFFIX\n file.",
            "As some filesystems do special things to filenames when\n writing files to disk, you cannot always do a plain string\n comparison to verify whether a file name matches an expected\n path or not. This function can do the comparison for you,\n depending on the filesystem you're on."
          ],
          "group": "sys/path"
        }
      },
      "info": {}
    },
    "pathspec": {
      "apis": {
        "git_pathspec": {
          "kind": "struct",
          "name": "git_pathspec",
          "referenceName": "struct git_pathspec",
          "opaque": true,
          "comment": [
            "Compiled pathspec"
          ],
          "location": {
            "file": "pathspec.h",
            "line": 20,
            "column": 29
          },
          "group": "pathspec",
          "parameterTo": [
            "git_pathspec_new",
            "git_pathspec_free",
            "git_pathspec_matches_path",
            "git_pathspec_match_workdir",
            "git_pathspec_match_index",
            "git_pathspec_match_tree",
            "git_pathspec_match_diff"
          ]
        },
        "git_pathspec_match_list": {
          "kind": "struct",
          "name": "git_pathspec_match_list",
          "referenceName": "struct git_pathspec_match_list",
          "opaque": true,
          "comment": [
            "List of filenames matching a pathspec"
          ],
          "location": {
            "file": "pathspec.h",
            "line": 25,
            "column": 40
          },
          "group": "pathspec",
          "parameterTo": [
            "git_pathspec_match_workdir",
            "git_pathspec_match_index",
            "git_pathspec_match_tree",
            "git_pathspec_match_diff",
            "git_pathspec_match_list_free",
            "git_pathspec_match_list_entrycount",
            "git_pathspec_match_list_entry",
            "git_pathspec_match_list_diff_entry",
            "git_pathspec_match_list_failed_entrycount",
            "git_pathspec_match_list_failed_entry"
          ]
        },
        "git_pathspec_flag_t": {
          "kind": "enum",
          "name": "git_pathspec_flag_t",
          "referenceName": "git_pathspec_flag_t",
          "members": [
            {
              "name": "GIT_PATHSPEC_DEFAULT",
              "value": "0"
            },
            {
              "name": "GIT_PATHSPEC_IGNORE_CASE",
              "comment": [
                "GIT_PATHSPEC_IGNORE_CASE forces match to ignore case; otherwise\n match will use native case sensitivity of platform filesystem"
              ]
            },
            {
              "name": "GIT_PATHSPEC_USE_CASE",
              "comment": [
                "GIT_PATHSPEC_USE_CASE forces case sensitive match; otherwise\n match will use native case sensitivity of platform filesystem"
              ]
            },
            {
              "name": "GIT_PATHSPEC_NO_GLOB",
              "comment": [
                "GIT_PATHSPEC_NO_GLOB disables glob patterns and just uses simple\n string comparison for matching"
              ]
            },
            {
              "name": "GIT_PATHSPEC_NO_MATCH_ERROR",
              "comment": [
                "GIT_PATHSPEC_NO_MATCH_ERROR means the match functions return error\n code GIT_ENOTFOUND if no matches are found; otherwise no matches is\n still success (return 0) but `git_pathspec_match_list_entrycount`\n will indicate 0 matches."
              ]
            },
            {
              "name": "GIT_PATHSPEC_FIND_FAILURES",
              "comment": [
                "GIT_PATHSPEC_FIND_FAILURES means that the `git_pathspec_match_list`\n should track which patterns matched which files so that at the end of\n the match we can identify patterns that did not match any files."
              ]
            },
            {
              "name": "GIT_PATHSPEC_FAILURES_ONLY",
              "comment": [
                "GIT_PATHSPEC_FAILURES_ONLY means that the `git_pathspec_match_list`\n does not need to keep the actual matching filenames.  Use this to\n just test if there were any matches at all or in combination with\n GIT_PATHSPEC_FIND_FAILURES to validate a pathspec."
              ]
            }
          ],
          "comment": [
            "Options controlling how pathspec match should be executed"
          ],
          "location": {
            "file": "pathspec.h",
            "line": 30,
            "column": 9
          },
          "group": "pathspec"
        },
        "git_pathspec_new": {
          "kind": "function",
          "name": "git_pathspec_new",
          "location": {
            "file": "pathspec.h",
            "line": 82,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure"
          },
          "params": [
            {
              "name": "out",
              "type": "git_pathspec **",
              "direction": "in",
              "comment": "Output of the compiled pathspec"
            },
            {
              "name": "pathspec",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "A git_strarray of the paths to match"
            }
          ],
          "comment": [
            "Compile a pathspec"
          ],
          "group": "pathspec"
        },
        "git_pathspec_free": {
          "kind": "function",
          "name": "git_pathspec_free",
          "location": {
            "file": "pathspec.h",
            "line": 90,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "ps",
              "type": "git_pathspec *",
              "direction": "in",
              "comment": "The compiled pathspec"
            }
          ],
          "comment": [
            "Free a pathspec"
          ],
          "group": "pathspec"
        },
        "git_pathspec_matches_path": {
          "kind": "function",
          "name": "git_pathspec_matches_path",
          "location": {
            "file": "pathspec.h",
            "line": 105,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 is path matches spec, 0 if it does not"
          },
          "params": [
            {
              "name": "ps",
              "type": "const git_pathspec *",
              "direction": "in",
              "comment": "The compiled pathspec"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "Combination of git_pathspec_flag_t options to control match"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The pathname to attempt to match"
            }
          ],
          "comment": [
            "Try to match a path against a pathspec",
            "Unlike most of the other pathspec matching functions, this will not\n fall back on the native case-sensitivity for your platform.  You must\n explicitly pass flags to control case sensitivity or else this will\n fall back on being case sensitive."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_workdir": {
          "kind": "function",
          "name": "git_pathspec_match_workdir",
          "location": {
            "file": "pathspec.h",
            "line": 130,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag was given"
          },
          "params": [
            {
              "name": "out",
              "type": "git_pathspec_match_list **",
              "direction": "in",
              "comment": "Output list of matches; pass NULL to just get return value"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository in which to match; bare repo is an error"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "Combination of git_pathspec_flag_t options to control match"
            },
            {
              "name": "ps",
              "type": "git_pathspec *",
              "direction": "in",
              "comment": "Pathspec to be matched"
            }
          ],
          "comment": [
            "Match a pathspec against the working directory of a repository.",
            "This matches the pathspec against the current files in the working\n directory of the repository.  It is an error to invoke this on a bare\n repo.  This handles git ignores (i.e. ignored files will not be\n considered to match the `pathspec` unless the file is tracked in the\n index).",
            "If `out` is not NULL, this returns a `git_patchspec_match_list`.  That\n contains the list of all matched filenames (unless you pass the\n `GIT_PATHSPEC_FAILURES_ONLY` flag) and may also contain the list of\n pathspecs with no match (if you used the `GIT_PATHSPEC_FIND_FAILURES`\n flag).  You must call `git_pathspec_match_list_free()` on this object."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_index": {
          "kind": "function",
          "name": "git_pathspec_match_index",
          "location": {
            "file": "pathspec.h",
            "line": 159,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag is used"
          },
          "params": [
            {
              "name": "out",
              "type": "git_pathspec_match_list **",
              "direction": "in",
              "comment": "Output list of matches; pass NULL to just get return value"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "The index to match against"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "Combination of git_pathspec_flag_t options to control match"
            },
            {
              "name": "ps",
              "type": "git_pathspec *",
              "direction": "in",
              "comment": "Pathspec to be matched"
            }
          ],
          "comment": [
            "Match a pathspec against entries in an index.",
            "This matches the pathspec against the files in the repository index.",
            "NOTE: At the moment, the case sensitivity of this match is controlled\n by the current case-sensitivity of the index object itself and the\n USE_CASE and IGNORE_CASE flags will have no effect.  This behavior will\n be corrected in a future release.",
            "If `out` is not NULL, this returns a `git_patchspec_match_list`.  That\n contains the list of all matched filenames (unless you pass the\n `GIT_PATHSPEC_FAILURES_ONLY` flag) and may also contain the list of\n pathspecs with no match (if you used the `GIT_PATHSPEC_FIND_FAILURES`\n flag).  You must call `git_pathspec_match_list_free()` on this object."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_tree": {
          "kind": "function",
          "name": "git_pathspec_match_tree",
          "location": {
            "file": "pathspec.h",
            "line": 183,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag is used"
          },
          "params": [
            {
              "name": "out",
              "type": "git_pathspec_match_list **",
              "direction": "in",
              "comment": "Output list of matches; pass NULL to just get return value"
            },
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "The root-level tree to match against"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "Combination of git_pathspec_flag_t options to control match"
            },
            {
              "name": "ps",
              "type": "git_pathspec *",
              "direction": "in",
              "comment": "Pathspec to be matched"
            }
          ],
          "comment": [
            "Match a pathspec against files in a tree.",
            "This matches the pathspec against the files in the given tree.",
            "If `out` is not NULL, this returns a `git_patchspec_match_list`.  That\n contains the list of all matched filenames (unless you pass the\n `GIT_PATHSPEC_FAILURES_ONLY` flag) and may also contain the list of\n pathspecs with no match (if you used the `GIT_PATHSPEC_FIND_FAILURES`\n flag).  You must call `git_pathspec_match_list_free()` on this object."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_diff": {
          "kind": "function",
          "name": "git_pathspec_match_diff",
          "location": {
            "file": "pathspec.h",
            "line": 207,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag is used"
          },
          "params": [
            {
              "name": "out",
              "type": "git_pathspec_match_list **",
              "direction": "in",
              "comment": "Output list of matches; pass NULL to just get return value"
            },
            {
              "name": "diff",
              "type": "git_diff *",
              "direction": "in",
              "comment": "A generated diff list"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "Combination of git_pathspec_flag_t options to control match"
            },
            {
              "name": "ps",
              "type": "git_pathspec *",
              "direction": "in",
              "comment": "Pathspec to be matched"
            }
          ],
          "comment": [
            "Match a pathspec against files in a diff list.",
            "This matches the pathspec against the files in the given diff list.",
            "If `out` is not NULL, this returns a `git_patchspec_match_list`.  That\n contains the list of all matched filenames (unless you pass the\n `GIT_PATHSPEC_FAILURES_ONLY` flag) and may also contain the list of\n pathspecs with no match (if you used the `GIT_PATHSPEC_FIND_FAILURES`\n flag).  You must call `git_pathspec_match_list_free()` on this object."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_list_free": {
          "kind": "function",
          "name": "git_pathspec_match_list_free",
          "location": {
            "file": "pathspec.h",
            "line": 218,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "m",
              "type": "git_pathspec_match_list *",
              "direction": "in",
              "comment": "The git_pathspec_match_list to be freed"
            }
          ],
          "comment": [
            "Free memory associates with a git_pathspec_match_list"
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_list_entrycount": {
          "kind": "function",
          "name": "git_pathspec_match_list_entrycount",
          "location": {
            "file": "pathspec.h",
            "line": 226,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "Number of items in match list"
          },
          "params": [
            {
              "name": "m",
              "type": "const git_pathspec_match_list *",
              "direction": "in",
              "comment": "The git_pathspec_match_list object"
            }
          ],
          "comment": [
            "Get the number of items in a match list."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_list_entry": {
          "kind": "function",
          "name": "git_pathspec_match_list_entry",
          "location": {
            "file": "pathspec.h",
            "line": 239,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "The filename of the match"
          },
          "params": [
            {
              "name": "m",
              "type": "const git_pathspec_match_list *",
              "direction": "in",
              "comment": "The git_pathspec_match_list object"
            },
            {
              "name": "pos",
              "type": "size_t",
              "direction": "in",
              "comment": "The index into the list"
            }
          ],
          "comment": [
            "Get a matching filename by position.",
            "This routine cannot be used if the match list was generated by\n `git_pathspec_match_diff`.  If so, it will always return NULL."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_list_diff_entry": {
          "kind": "function",
          "name": "git_pathspec_match_list_diff_entry",
          "location": {
            "file": "pathspec.h",
            "line": 252,
            "column": 36
          },
          "returns": {
            "type": "const git_diff_delta *",
            "comment": "The filename of the match"
          },
          "params": [
            {
              "name": "m",
              "type": "const git_pathspec_match_list *",
              "direction": "in",
              "comment": "The git_pathspec_match_list object"
            },
            {
              "name": "pos",
              "type": "size_t",
              "direction": "in",
              "comment": "The index into the list"
            }
          ],
          "comment": [
            "Get a matching diff delta by position.",
            "This routine can only be used if the match list was generated by\n `git_pathspec_match_diff`.  Otherwise it will always return NULL."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_list_failed_entrycount": {
          "kind": "function",
          "name": "git_pathspec_match_list_failed_entrycount",
          "location": {
            "file": "pathspec.h",
            "line": 264,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "Number of items in original pathspec that had no matches"
          },
          "params": [
            {
              "name": "m",
              "type": "const git_pathspec_match_list *",
              "direction": "in",
              "comment": "The git_pathspec_match_list object"
            }
          ],
          "comment": [
            "Get the number of pathspec items that did not match.",
            "This will be zero unless you passed GIT_PATHSPEC_FIND_FAILURES when\n generating the git_pathspec_match_list."
          ],
          "group": "pathspec"
        },
        "git_pathspec_match_list_failed_entry": {
          "kind": "function",
          "name": "git_pathspec_match_list_failed_entry",
          "location": {
            "file": "pathspec.h",
            "line": 276,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "The pathspec pattern that didn't match anything"
          },
          "params": [
            {
              "name": "m",
              "type": "const git_pathspec_match_list *",
              "direction": "in",
              "comment": "The git_pathspec_match_list object"
            },
            {
              "name": "pos",
              "type": "size_t",
              "direction": "in",
              "comment": "The index into the failed items"
            }
          ],
          "comment": [
            "Get an original pathspec string that had no matches.",
            "This will be return NULL for positions out of range."
          ],
          "group": "pathspec"
        }
      },
      "info": {}
    },
    "proxy": {
      "apis": {
        "git_proxy_t": {
          "kind": "enum",
          "name": "git_proxy_t",
          "referenceName": "git_proxy_t",
          "members": [
            {
              "name": "GIT_PROXY_NONE",
              "comment": [
                "Do not attempt to connect through a proxy",
                "If built against libcurl, it itself may attempt to connect\n to a proxy if the environment variables specify it."
              ]
            },
            {
              "name": "GIT_PROXY_AUTO",
              "comment": [
                "Try to auto-detect the proxy from the git configuration."
              ]
            },
            {
              "name": "GIT_PROXY_SPECIFIED",
              "comment": [
                "Connect via the URL given in the options"
              ]
            }
          ],
          "comment": [
            "The type of proxy to use."
          ],
          "location": {
            "file": "proxy.h",
            "line": 20,
            "column": 9
          },
          "group": "proxy"
        },
        "git_proxy_options": {
          "kind": "struct",
          "name": "git_proxy_options",
          "referenceName": "git_proxy_options",
          "comment": [
            "Options for connecting through a proxy",
            "Note that not all types may be supported, depending on the platform\n and compilation options."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "type",
              "type": "git_proxy_t",
              "comment": [
                "The type of proxy to use, by URL, auto-detect."
              ],
              "referenceType": "enum git_proxy_t"
            },
            {
              "name": "url",
              "type": "const char *",
              "comment": [
                "The URL of the proxy."
              ]
            },
            {
              "name": "credentials",
              "type": "git_credential_acquire_cb",
              "comment": [
                "This will be called if the remote host requires\n authentication in order to connect to it.",
                "Returning GIT_PASSTHROUGH will make libgit2 behave as\n though this field isn't set."
              ],
              "referenceType": "int (*)(git_credential **, const char *, const char *, unsigned int, void *)"
            },
            {
              "name": "certificate_check",
              "type": "git_transport_certificate_check_cb",
              "comment": [
                "If cert verification fails, this will be called to let the\n user make the final decision of whether to allow the\n connection to proceed. Returns 0 to allow the connection\n or a negative value to indicate an error."
              ],
              "referenceType": "int (*)(git_cert *, int, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "Payload to be provided to the credentials and certificate\n check callbacks."
              ]
            }
          ],
          "location": {
            "file": "proxy.h",
            "line": 44,
            "column": 9
          },
          "group": "proxy",
          "parameterTo": [
            "git_proxy_init_options",
            "git_proxy_options_init",
            "git_remote_connect",
            "git_transport_smart_proxy_options"
          ]
        },
        "GIT_PROXY_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_PROXY_OPTIONS_VERSION",
          "location": {
            "file": "proxy.h",
            "line": 81,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "proxy"
        },
        "GIT_PROXY_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_PROXY_OPTIONS_INIT",
          "location": {
            "file": "proxy.h",
            "line": 82,
            "column": 9
          },
          "value": "{GIT_PROXY_OPTIONS_VERSION}",
          "comment": "",
          "group": "proxy"
        },
        "git_proxy_options_init": {
          "kind": "function",
          "name": "git_proxy_options_init",
          "location": {
            "file": "proxy.h",
            "line": 94,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_proxy_options *",
              "direction": "in",
              "comment": "The `git_proxy_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_PROXY_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_proxy_options structure",
            "Initializes a `git_proxy_options` with default values. Equivalent to\n creating an instance with `GIT_PROXY_OPTIONS_INIT`."
          ],
          "group": "proxy"
        }
      },
      "info": {}
    },
    "rebase": {
      "apis": {
        "git_rebase_options": {
          "kind": "struct",
          "name": "git_rebase_options",
          "referenceName": "git_rebase_options",
          "comment": [
            "Rebase options",
            "Use to tell the rebase machinery how to operate."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "quiet",
              "type": "int",
              "comment": [
                "Used by `git_rebase_init`, this will instruct other clients working\n on this rebase that you want a quiet rebase experience, which they\n may choose to provide in an application-specific manner.  This has no\n effect upon libgit2 directly, but is provided for interoperability\n between Git tools."
              ]
            },
            {
              "name": "inmemory",
              "type": "int",
              "comment": [
                "Used by `git_rebase_init`, this will begin an in-memory rebase,\n which will allow callers to step through the rebase operations and\n commit the rebased changes, but will not rewind HEAD or update the\n repository to be in a rebasing state.  This will not interfere with\n the working directory (if there is one)."
              ]
            },
            {
              "name": "rewrite_notes_ref",
              "type": "const char *",
              "comment": [
                "Used by `git_rebase_finish`, this is the name of the notes reference\n used to rewrite notes for rebased commits when finishing the rebase;\n if NULL, the contents of the configuration option `notes.rewriteRef`\n is examined, unless the configuration option `notes.rewrite.rebase`\n is set to false.  If `notes.rewriteRef` is also NULL, notes will\n not be rewritten."
              ]
            },
            {
              "name": "merge_options",
              "type": "git_merge_options",
              "comment": [
                "Options to control how trees are merged during `git_rebase_next`."
              ],
              "referenceType": "struct git_merge_options"
            },
            {
              "name": "checkout_options",
              "type": "git_checkout_options",
              "comment": [
                "Options to control how files are written during `git_rebase_init`,\n `git_rebase_next` and `git_rebase_abort`.  Note that a minimum\n strategy of `GIT_CHECKOUT_SAFE` is defaulted in `init` and `next`,\n and a minimum strategy of `GIT_CHECKOUT_FORCE` is defaulted in\n `abort` to match git semantics."
              ],
              "referenceType": "struct git_checkout_options"
            },
            {
              "name": "signing_cb",
              "type": "git_commit_signing_cb",
              "comment": [
                "If provided, this will be called with the commit content, allowing\n a signature to be added to the rebase commit. Can be skipped with\n GIT_PASSTHROUGH. If GIT_PASSTHROUGH is returned, a commit will be made\n without a signature.\n This field is only used when performing git_rebase_commit."
              ],
              "referenceType": "int (*)(git_buf *, git_buf *, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "This will be passed to each of the callbacks in this struct\n as the last parameter."
              ]
            }
          ],
          "location": {
            "file": "rebase.h",
            "line": 32,
            "column": 9
          },
          "group": "rebase",
          "parameterTo": [
            "git_rebase_init_options",
            "git_rebase_options_init",
            "git_rebase_init",
            "git_rebase_open"
          ]
        },
        "git_rebase_operation_t": {
          "kind": "enum",
          "name": "git_rebase_operation_t",
          "referenceName": "git_rebase_operation_t",
          "members": [
            {
              "name": "GIT_REBASE_OPERATION_PICK",
              "value": "0",
              "comment": [
                "The given commit is to be cherry-picked.  The client should commit\n the changes and continue if there are no conflicts."
              ]
            },
            {
              "name": "GIT_REBASE_OPERATION_REWORD",
              "comment": [
                "The given commit is to be cherry-picked, but the client should prompt\n the user to provide an updated commit message."
              ]
            },
            {
              "name": "GIT_REBASE_OPERATION_EDIT",
              "comment": [
                "The given commit is to be cherry-picked, but the client should stop\n to allow the user to edit the changes before committing them."
              ]
            },
            {
              "name": "GIT_REBASE_OPERATION_SQUASH",
              "comment": [
                "The given commit is to be squashed into the previous commit.  The\n commit message will be merged with the previous message."
              ]
            },
            {
              "name": "GIT_REBASE_OPERATION_FIXUP",
              "comment": [
                "The given commit is to be squashed into the previous commit.  The\n commit message from this commit will be discarded."
              ]
            },
            {
              "name": "GIT_REBASE_OPERATION_EXEC",
              "comment": [
                "No commit will be cherry-picked.  The client should run the given\n command and (if successful) continue."
              ]
            }
          ],
          "comment": [
            "Type of rebase operation in-progress after calling `git_rebase_next`."
          ],
          "location": {
            "file": "rebase.h",
            "line": 96,
            "column": 9
          },
          "group": "rebase"
        },
        "GIT_REBASE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_REBASE_OPTIONS_VERSION",
          "location": {
            "file": "rebase.h",
            "line": 134,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "rebase"
        },
        "GIT_REBASE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_REBASE_OPTIONS_INIT",
          "location": {
            "file": "rebase.h",
            "line": 137,
            "column": 9
          },
          "value": " { GIT_REBASE_OPTIONS_VERSION, 0, 0, NULL, GIT_MERGE_OPTIONS_INIT, GIT_CHECKOUT_OPTIONS_INIT, NULL, NULL }",
          "comment": "",
          "group": "rebase"
        },
        "GIT_REBASE_NO_OPERATION": {
          "kind": "macro",
          "name": "GIT_REBASE_NO_OPERATION",
          "location": {
            "file": "rebase.h",
            "line": 140,
            "column": 9
          },
          "value": "SIZE_MAX",
          "comment": "Indicates that a rebase operation is not (yet) in progress.",
          "group": "rebase"
        },
        "git_rebase_operation": {
          "kind": "struct",
          "name": "git_rebase_operation",
          "referenceName": "git_rebase_operation",
          "comment": [
            "A rebase operation",
            "Describes a single instruction/operation to be performed during the\n rebase."
          ],
          "members": [
            {
              "name": "type",
              "type": "git_rebase_operation_t",
              "comment": [
                "The type of rebase operation."
              ],
              "referenceType": "enum git_rebase_operation_t"
            },
            {
              "name": "id",
              "type": "const git_oid",
              "comment": [
                "The commit ID being cherry-picked.  This will be populated for\n all operations except those of type `GIT_REBASE_OPERATION_EXEC`."
              ]
            },
            {
              "name": "exec",
              "type": "const char *",
              "comment": [
                "The executable the user has requested be run.  This will only\n be populated for operations of type `GIT_REBASE_OPERATION_EXEC`."
              ]
            }
          ],
          "location": {
            "file": "rebase.h",
            "line": 148,
            "column": 9
          },
          "group": "rebase",
          "returnedBy": [
            "git_rebase_operation_byindex"
          ],
          "parameterTo": [
            "git_rebase_next"
          ]
        },
        "git_rebase_options_init": {
          "kind": "function",
          "name": "git_rebase_options_init",
          "location": {
            "file": "rebase.h",
            "line": 175,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_rebase_options *",
              "direction": "in",
              "comment": "The `git_rebase_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_REBASE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_rebase_options structure",
            "Initializes a `git_rebase_options` with default values. Equivalent to\n creating an instance with `GIT_REBASE_OPTIONS_INIT`."
          ],
          "group": "rebase"
        },
        "git_rebase_init": {
          "kind": "function",
          "name": "git_rebase_init",
          "location": {
            "file": "rebase.h",
            "line": 196,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rebase **",
              "direction": "in",
              "comment": "Pointer to store the rebase object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository to perform the rebase"
            },
            {
              "name": "branch",
              "type": "const git_annotated_commit *",
              "direction": "in",
              "comment": "The terminal commit to rebase, or NULL to rebase the\n               current branch"
            },
            {
              "name": "upstream",
              "type": "const git_annotated_commit *",
              "direction": "in",
              "comment": "The commit to begin rebasing from, or NULL to rebase all\n                 reachable commits"
            },
            {
              "name": "onto",
              "type": "const git_annotated_commit *",
              "direction": "in",
              "comment": "The branch to rebase onto, or NULL to rebase onto the given\n             upstream"
            },
            {
              "name": "opts",
              "type": "const git_rebase_options *",
              "direction": "in",
              "comment": "Options to specify how rebase is performed, or NULL"
            }
          ],
          "comment": [
            "Initializes a rebase operation to rebase the changes in `branch`\n relative to `upstream` onto another branch.  To begin the rebase\n process, call `git_rebase_next`.  When you have finished with this\n object, call `git_rebase_free`."
          ],
          "group": "rebase"
        },
        "git_rebase_open": {
          "kind": "function",
          "name": "git_rebase_open",
          "location": {
            "file": "rebase.h",
            "line": 213,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_rebase **",
              "direction": "in",
              "comment": "Pointer to store the rebase object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository that has a rebase in-progress"
            },
            {
              "name": "opts",
              "type": "const git_rebase_options *",
              "direction": "in",
              "comment": "Options to specify how rebase is performed"
            }
          ],
          "comment": [
            "Opens an existing rebase that was previously started by either an\n invocation of `git_rebase_init` or by another client."
          ],
          "group": "rebase"
        },
        "git_rebase_orig_head_name": {
          "kind": "function",
          "name": "git_rebase_orig_head_name",
          "location": {
            "file": "rebase.h",
            "line": 223,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "The original `HEAD` ref name"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *"
            }
          ],
          "comment": [
            "Gets the original `HEAD` ref name for merge rebases."
          ],
          "group": "rebase"
        },
        "git_rebase_orig_head_id": {
          "kind": "function",
          "name": "git_rebase_orig_head_id",
          "location": {
            "file": "rebase.h",
            "line": 230,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "The original `HEAD` id"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *"
            }
          ],
          "comment": [
            "Gets the original `HEAD` id for merge rebases."
          ],
          "group": "rebase"
        },
        "git_rebase_onto_name": {
          "kind": "function",
          "name": "git_rebase_onto_name",
          "location": {
            "file": "rebase.h",
            "line": 237,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "The `onto` ref name"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *"
            }
          ],
          "comment": [
            "Gets the `onto` ref name for merge rebases."
          ],
          "group": "rebase"
        },
        "git_rebase_onto_id": {
          "kind": "function",
          "name": "git_rebase_onto_id",
          "location": {
            "file": "rebase.h",
            "line": 244,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "The `onto` id"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *"
            }
          ],
          "comment": [
            "Gets the `onto` id for merge rebases."
          ],
          "group": "rebase"
        },
        "git_rebase_operation_entrycount": {
          "kind": "function",
          "name": "git_rebase_operation_entrycount",
          "location": {
            "file": "rebase.h",
            "line": 252,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "The number of rebase operations in total"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The in-progress rebase"
            }
          ],
          "comment": [
            "Gets the count of rebase operations that are to be applied."
          ],
          "group": "rebase"
        },
        "git_rebase_operation_current": {
          "kind": "function",
          "name": "git_rebase_operation_current",
          "location": {
            "file": "rebase.h",
            "line": 263,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "The index of the rebase operation currently being applied."
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The in-progress rebase"
            }
          ],
          "comment": [
            "Gets the index of the rebase operation that is currently being applied.\n If the first operation has not yet been applied (because you have\n called `init` but not yet `next`) then this returns\n `GIT_REBASE_NO_OPERATION`."
          ],
          "group": "rebase"
        },
        "git_rebase_operation_byindex": {
          "kind": "function",
          "name": "git_rebase_operation_byindex",
          "location": {
            "file": "rebase.h",
            "line": 272,
            "column": 36
          },
          "returns": {
            "type": "git_rebase_operation *",
            "comment": "The rebase operation or NULL if `idx` was out of bounds"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The in-progress rebase"
            },
            {
              "name": "idx",
              "type": "size_t",
              "direction": "in",
              "comment": "The index of the rebase operation to retrieve"
            }
          ],
          "comment": [
            "Gets the rebase operation specified by the given index."
          ],
          "group": "rebase"
        },
        "git_rebase_next": {
          "kind": "function",
          "name": "git_rebase_next",
          "location": {
            "file": "rebase.h",
            "line": 287,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "operation",
              "type": "git_rebase_operation **",
              "direction": "in",
              "comment": "Pointer to store the rebase operation that is to be performed next"
            },
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The rebase in progress"
            }
          ],
          "comment": [
            "Performs the next rebase operation and returns the information about it.\n If the operation is one that applies a patch (which is any operation except\n GIT_REBASE_OPERATION_EXEC) then the patch will be applied and the index and\n working directory will be updated with the changes.  If there are conflicts,\n you will need to address those before committing the changes."
          ],
          "group": "rebase"
        },
        "git_rebase_inmemory_index": {
          "kind": "function",
          "name": "git_rebase_inmemory_index",
          "location": {
            "file": "rebase.h",
            "line": 302,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "index",
              "type": "git_index **"
            },
            {
              "name": "rebase",
              "type": "git_rebase *"
            }
          ],
          "comment": [
            "Gets the index produced by the last operation, which is the result\n of `git_rebase_next` and which will be committed by the next\n invocation of `git_rebase_commit`.  This is useful for resolving\n conflicts in an in-memory rebase before committing them.  You must\n call `git_index_free` when you are finished with this.",
            "This is only applicable for in-memory rebases; for rebases within\n a working directory, the changes were applied to the repository's\n index."
          ],
          "group": "rebase"
        },
        "git_rebase_commit": {
          "kind": "function",
          "name": "git_rebase_commit",
          "location": {
            "file": "rebase.h",
            "line": 328,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success, GIT_EUNMERGED if there are unmerged changes in\n        the index, GIT_EAPPLIED if the current commit has already\n        been applied to the upstream and there is nothing to commit,\n        -1 on failure."
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer in which to store the OID of the newly created commit"
            },
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The rebase that is in-progress"
            },
            {
              "name": "author",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "The author of the updated commit, or NULL to keep the\n        author from the original commit"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "The committer of the rebase"
            },
            {
              "name": "message_encoding",
              "type": "const char *",
              "direction": "in",
              "comment": "The encoding for the message in the commit,\n        represented with a standard encoding name.  If message is NULL,\n        this should also be NULL, and the encoding from the original\n        commit will be maintained.  If message is specified, this may be\n        NULL to indicate that \"UTF-8\" is to be used."
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "The message for this commit, or NULL to use the message\n        from the original commit."
            }
          ],
          "comment": [
            "Commits the current patch.  You must have resolved any conflicts that\n were introduced during the patch application from the `git_rebase_next`\n invocation."
          ],
          "group": "rebase"
        },
        "git_rebase_abort": {
          "kind": "function",
          "name": "git_rebase_abort",
          "location": {
            "file": "rebase.h",
            "line": 344,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; GIT_ENOTFOUND if a rebase is not in progress,\n         -1 on other errors."
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The rebase that is in-progress"
            }
          ],
          "comment": [
            "Aborts a rebase that is currently in progress, resetting the repository\n and working directory to their state before rebase began."
          ],
          "group": "rebase"
        },
        "git_rebase_finish": {
          "kind": "function",
          "name": "git_rebase_finish",
          "location": {
            "file": "rebase.h",
            "line": 354,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on error"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The rebase that is in-progress"
            },
            {
              "name": "signature",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "The identity that is finishing the rebase (optional)"
            }
          ],
          "comment": [
            "Finishes a rebase that is currently in progress once all patches have\n been applied."
          ],
          "group": "rebase"
        },
        "git_rebase_free": {
          "kind": "function",
          "name": "git_rebase_free",
          "location": {
            "file": "rebase.h",
            "line": 363,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "rebase",
              "type": "git_rebase *",
              "direction": "in",
              "comment": "The rebase object"
            }
          ],
          "comment": [
            "Frees the `git_rebase` object."
          ],
          "group": "rebase"
        },
        "git_rebase": {
          "kind": "struct",
          "name": "git_rebase",
          "referenceName": "struct git_rebase",
          "opaque": true,
          "comment": [
            "Representation of a rebase"
          ],
          "location": {
            "file": "types.h",
            "line": 195,
            "column": 27
          },
          "group": "rebase",
          "parameterTo": [
            "git_rebase_init",
            "git_rebase_open",
            "git_rebase_orig_head_name",
            "git_rebase_orig_head_id",
            "git_rebase_onto_name",
            "git_rebase_onto_id",
            "git_rebase_operation_entrycount",
            "git_rebase_operation_current",
            "git_rebase_operation_byindex",
            "git_rebase_next",
            "git_rebase_inmemory_index",
            "git_rebase_commit",
            "git_rebase_abort",
            "git_rebase_finish",
            "git_rebase_free"
          ]
        }
      },
      "info": {
        "summary": "Git rebase routines"
      }
    },
    "refdb": {
      "apis": {
        "git_refdb_new": {
          "kind": "function",
          "name": "git_refdb_new",
          "location": {
            "file": "refdb.h",
            "line": 35,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_refdb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            }
          ],
          "comment": [
            "Create a new reference database with no backends.",
            "Before the Ref DB can be used for read/writing, a custom database\n backend must be manually set using `git_refdb_set_backend()`"
          ],
          "group": "refdb"
        },
        "git_refdb_open": {
          "kind": "function",
          "name": "git_refdb_open",
          "location": {
            "file": "refdb.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_refdb **",
              "direction": "in",
              "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            }
          ],
          "comment": [
            "Create a new reference database and automatically add\n the default backends:",
            "- git_refdb_dir: read and write loose and packed refs\n      from disk, assuming the repository dir as the folder"
          ],
          "group": "refdb"
        },
        "git_refdb_compress": {
          "kind": "function",
          "name": "git_refdb_compress",
          "location": {
            "file": "refdb.h",
            "line": 56,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "refdb",
              "type": "git_refdb *"
            }
          ],
          "comment": [
            "Suggests that the given refdb compress or optimize its references.\n This mechanism is implementation specific.  For on-disk reference\n databases, for example, this may pack all loose references."
          ],
          "group": "refdb"
        },
        "git_refdb_free": {
          "kind": "function",
          "name": "git_refdb_free",
          "location": {
            "file": "refdb.h",
            "line": 63,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "refdb",
              "type": "git_refdb *",
              "direction": "in",
              "comment": "reference database pointer or NULL"
            }
          ],
          "comment": [
            "Close an open reference database."
          ],
          "group": "refdb"
        },
        "git_refdb": {
          "kind": "struct",
          "name": "git_refdb",
          "referenceName": "struct git_refdb",
          "opaque": true,
          "comment": [
            "An open refs database handle."
          ],
          "location": {
            "file": "types.h",
            "line": 100,
            "column": 26
          },
          "group": "refdb",
          "parameterTo": [
            "git_refdb_new",
            "git_refdb_open",
            "git_refdb_compress",
            "git_refdb_free",
            "git_repository_refdb",
            "git_refdb_set_backend",
            "git_repository_set_refdb"
          ]
        }
      },
      "info": {
        "summary": "Git custom refs backend functions"
      }
    },
    "sys/refdb_backend": {
      "apis": {
        "git_reference_iterator": {
          "kind": "struct",
          "name": "git_reference_iterator",
          "referenceName": "struct git_reference_iterator",
          "comment": [
            "Every backend's iterator must have a pointer to itself as the first\n element, so the API can talk to it. You'd define your iterator as",
            "struct my_iterator {\n             git_reference_iterator parent;\n             ...\n     }",
            "and assign `iter->parent.backend` to your `git_refdb_backend`."
          ],
          "members": [
            {
              "name": "db",
              "type": "git_refdb *"
            },
            {
              "name": "next",
              "type": "int (*)(git_reference **, git_reference_iterator *)",
              "comment": [
                "Return the current reference and advance the iterator."
              ]
            },
            {
              "name": "next_name",
              "type": "int (*)(const char **, git_reference_iterator *)",
              "comment": [
                "Return the name of the current reference and advance the iterator"
              ]
            },
            {
              "name": "free",
              "type": "void (*)(git_reference_iterator *)",
              "comment": [
                "Free the iterator"
              ]
            }
          ],
          "location": {
            "file": "sys/refdb_backend.h",
            "line": 35,
            "column": 8
          },
          "group": "sys/refdb_backend",
          "parameterTo": [
            "git_reference_iterator_new",
            "git_reference_iterator_glob_new",
            "git_reference_next",
            "git_reference_next_name",
            "git_reference_iterator_free"
          ]
        },
        "git_refdb_backend": {
          "kind": "struct",
          "name": "git_refdb_backend",
          "referenceName": "struct git_refdb_backend",
          "comment": [
            "An instance for a custom backend"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The backend API version"
              ]
            },
            {
              "name": "exists",
              "type": "int (*)(int *, git_refdb_backend *, const char *)",
              "comment": [
                "Queries the refdb backend for the existence of a reference.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, a negative error value code."
              }
            },
            {
              "name": "lookup",
              "type": "int (*)(git_reference **, git_refdb_backend *, const char *)",
              "comment": [
                "Queries the refdb backend for a given reference.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, `GIT_ENOTFOUND` if the reference does\n         exist, otherwise a negative error code."
              }
            },
            {
              "name": "iterator",
              "type": "int (*)(git_reference_iterator **, struct git_refdb_backend *, const char *)",
              "comment": [
                "Allocate an iterator object for the backend.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, otherwise a negative error code."
              }
            },
            {
              "name": "write",
              "type": "int (*)(git_refdb_backend *, const git_reference *, int, const git_signature *, const char *, const git_oid *, const char *)",
              "comment": [
                "Writes the given reference to the refdb.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, otherwise a negative error code."
              }
            },
            {
              "name": "rename",
              "type": "int (*)(git_reference **, git_refdb_backend *, const char *, const char *, int, const git_signature *, const char *)",
              "comment": [
                "Rename a reference in the refdb.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, otherwise a negative error code."
              }
            },
            {
              "name": "del",
              "type": "int (*)(git_refdb_backend *, const char *, const git_oid *, const char *)",
              "comment": [
                "Deletes the given reference from the refdb.",
                "If it exists, its reflog should be deleted as well.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, otherwise a negative error code."
              }
            },
            {
              "name": "compress",
              "type": "int (*)(git_refdb_backend *)",
              "comment": [
                "Suggests that the given refdb compress or optimize its references.",
                "This mechanism is implementation specific. For on-disk reference\n databases, this may pack all loose references.",
                "A refdb implementation may provide this function; if it is not\n provided, nothing will be done."
              ],
              "returns": {
                "comment": "`0` on success a negative error code otherwise"
              }
            },
            {
              "name": "has_log",
              "type": "int (*)(git_refdb_backend *, const char *)",
              "comment": [
                "Query whether a particular reference has a log (may be empty)",
                "Shall return 1 if it has a reflog, 0 it it doesn't and negative in\n case an error occurred.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, `1` if the reflog for the given reference\n         exists, a negative error code otherwise"
              }
            },
            {
              "name": "ensure_log",
              "type": "int (*)(git_refdb_backend *, const char *)",
              "comment": [
                "Make sure a particular reference will have a reflog which\n will be appended to on writes.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, a negative error code otherwise"
              }
            },
            {
              "name": "free",
              "type": "void (*)(git_refdb_backend *)",
              "comment": [
                "Frees any resources held by the refdb (including the `git_refdb_backend`\n itself).",
                "A refdb backend implementation must provide this function."
              ]
            },
            {
              "name": "reflog_read",
              "type": "int (*)(git_reflog **, git_refdb_backend *, const char *)",
              "comment": [
                "Read the reflog for the given reference name.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, a negative error code otherwise"
              }
            },
            {
              "name": "reflog_write",
              "type": "int (*)(git_refdb_backend *, git_reflog *)",
              "comment": [
                "Write a reflog to disk.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, a negative error code otherwise"
              }
            },
            {
              "name": "reflog_rename",
              "type": "int (*)(git_refdb_backend *, const char *, const char *)",
              "comment": [
                "Rename a reflog.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, a negative error code otherwise"
              }
            },
            {
              "name": "reflog_delete",
              "type": "int (*)(git_refdb_backend *, const char *)",
              "comment": [
                "Remove a reflog.",
                "A refdb implementation must provide this function."
              ],
              "returns": {
                "comment": "`0` on success, a negative error code otherwise"
              }
            },
            {
              "name": "lock",
              "type": "int (*)(void **, git_refdb_backend *, const char *)",
              "comment": [
                "Lock a reference.",
                "A refdb implementation may provide this function; if it is not\n provided, the transaction API will fail to work."
              ],
              "returns": {
                "comment": "`0` on success, a negative error code otherwise"
              }
            },
            {
              "name": "unlock",
              "type": "int (*)(git_refdb_backend *, void *, int, int, const git_reference *, const git_signature *, const char *)",
              "comment": [
                "Unlock a reference.",
                "Only one of target or symbolic_target will be set.\n `success` will be true if the reference should be update, false if\n the lock must be discarded.",
                "A refdb implementation must provide this function if a `lock`\n implementation is provided."
              ],
              "returns": {
                "comment": "`0` on success, a negative error code otherwise"
              }
            }
          ],
          "location": {
            "file": "sys/refdb_backend.h",
            "line": 60,
            "column": 8
          },
          "group": "sys/refdb_backend",
          "parameterTo": [
            "git_refdb_init_backend",
            "git_refdb_backend_fs",
            "git_refdb_set_backend"
          ]
        },
        "GIT_REFDB_BACKEND_VERSION": {
          "kind": "macro",
          "name": "GIT_REFDB_BACKEND_VERSION",
          "location": {
            "file": "sys/refdb_backend.h",
            "line": 315,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/refdb_backend"
        },
        "GIT_REFDB_BACKEND_INIT": {
          "kind": "macro",
          "name": "GIT_REFDB_BACKEND_INIT",
          "location": {
            "file": "sys/refdb_backend.h",
            "line": 316,
            "column": 9
          },
          "value": "{GIT_REFDB_BACKEND_VERSION}",
          "comment": "",
          "group": "sys/refdb_backend"
        },
        "git_refdb_init_backend": {
          "kind": "function",
          "name": "git_refdb_init_backend",
          "location": {
            "file": "sys/refdb_backend.h",
            "line": 326,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "backend",
              "type": "git_refdb_backend *",
              "direction": "in",
              "comment": "the `git_refdb_backend` struct to initialize"
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Version of struct; pass `GIT_REFDB_BACKEND_VERSION`"
            }
          ],
          "comment": [
            "Initializes a `git_refdb_backend` with default values. Equivalent to\n creating an instance with GIT_REFDB_BACKEND_INIT."
          ],
          "group": "sys/refdb_backend"
        },
        "git_refdb_backend_fs": {
          "kind": "function",
          "name": "git_refdb_backend_fs",
          "location": {
            "file": "sys/refdb_backend.h",
            "line": 341,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 error code on failure"
          },
          "params": [
            {
              "name": "backend_out",
              "type": "git_refdb_backend **",
              "direction": "in",
              "comment": "Output pointer to the git_refdb_backend object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Git repository to access"
            }
          ],
          "comment": [
            "Constructors for default filesystem-based refdb backend",
            "Under normal usage, this is called for you when the repository is\n opened / created, but you can use this to explicitly construct a\n filesystem refdb backend for a repository."
          ],
          "group": "sys/refdb_backend"
        },
        "git_refdb_set_backend": {
          "kind": "function",
          "name": "git_refdb_set_backend",
          "location": {
            "file": "sys/refdb_backend.h",
            "line": 355,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "refdb",
              "type": "git_refdb *",
              "direction": "in",
              "comment": "database to add the backend to"
            },
            {
              "name": "backend",
              "type": "git_refdb_backend *",
              "direction": "in",
              "comment": "pointer to a git_refdb_backend instance"
            }
          ],
          "comment": [
            "Sets the custom backend to an existing reference DB",
            "The `git_refdb` will take ownership of the `git_refdb_backend` so you\n should NOT free it after calling this function."
          ],
          "group": "sys/refdb_backend"
        }
      },
      "info": {
        "summary": "Git custom refs backend functions"
      }
    },
    "reflog": {
      "apis": {
        "git_reflog_read": {
          "kind": "function",
          "name": "git_reflog_read",
          "location": {
            "file": "reflog.h",
            "line": 38,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reflog **",
              "direction": "in",
              "comment": "pointer to reflog"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repostiory"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "reference to look up"
            }
          ],
          "comment": [
            "Read the reflog for the given reference",
            "If there is no reflog file for the given\n reference yet, an empty reflog object will\n be returned.",
            "The reflog must be freed manually by using\n git_reflog_free()."
          ],
          "group": "reflog"
        },
        "git_reflog_write": {
          "kind": "function",
          "name": "git_reflog_write",
          "location": {
            "file": "reflog.h",
            "line": 47,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "an existing reflog object"
            }
          ],
          "comment": [
            "Write an existing in-memory reflog object back to disk\n using an atomic file lock."
          ],
          "group": "reflog"
        },
        "git_reflog_append": {
          "kind": "function",
          "name": "git_reflog_append",
          "location": {
            "file": "reflog.h",
            "line": 60,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "an existing reflog object"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the OID the reference is now pointing to"
            },
            {
              "name": "committer",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "the signature of the committer"
            },
            {
              "name": "msg",
              "type": "const char *",
              "direction": "in",
              "comment": "the reflog message"
            }
          ],
          "comment": [
            "Add a new entry to the in-memory reflog.",
            "`msg` is optional and can be NULL."
          ],
          "group": "reflog"
        },
        "git_reflog_rename": {
          "kind": "function",
          "name": "git_reflog_rename",
          "location": {
            "file": "reflog.h",
            "line": 75,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            },
            {
              "name": "old_name",
              "type": "const char *",
              "direction": "in",
              "comment": "the old name of the reference"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the new name of the reference"
            }
          ],
          "comment": [
            "Rename a reflog",
            "The reflog to be renamed is expected to already exist",
            "The new name will be checked for validity.\n See `git_reference_create_symbolic()` for rules about valid names."
          ],
          "group": "reflog"
        },
        "git_reflog_delete": {
          "kind": "function",
          "name": "git_reflog_delete",
          "location": {
            "file": "reflog.h",
            "line": 84,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the reflog to delete"
            }
          ],
          "comment": [
            "Delete the reflog for the given reference"
          ],
          "group": "reflog"
        },
        "git_reflog_entrycount": {
          "kind": "function",
          "name": "git_reflog_entrycount",
          "location": {
            "file": "reflog.h",
            "line": 92,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the number of log entries"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "the previously loaded reflog"
            }
          ],
          "comment": [
            "Get the number of log entries in a reflog"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_byindex": {
          "kind": "function",
          "name": "git_reflog_entry_byindex",
          "location": {
            "file": "reflog.h",
            "line": 105,
            "column": 38
          },
          "returns": {
            "type": "const git_reflog_entry *",
            "comment": "the entry; NULL if not found"
          },
          "params": [
            {
              "name": "reflog",
              "type": "const git_reflog *",
              "direction": "in",
              "comment": "a previously loaded reflog"
            },
            {
              "name": "idx",
              "type": "size_t",
              "direction": "in",
              "comment": "the position of the entry to lookup. Should be greater than or\n equal to 0 (zero) and less than `git_reflog_entrycount()`."
            }
          ],
          "comment": [
            "Lookup an entry by its index",
            "Requesting the reflog entry with an index of 0 (zero) will\n return the most recently created entry."
          ],
          "group": "reflog"
        },
        "git_reflog_drop": {
          "kind": "function",
          "name": "git_reflog_drop",
          "location": {
            "file": "reflog.h",
            "line": 124,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if the entry doesn't exist\n or an error code."
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "a previously loaded reflog."
            },
            {
              "name": "idx",
              "type": "size_t",
              "direction": "in",
              "comment": "the position of the entry to remove. Should be greater than or\n equal to 0 (zero) and less than `git_reflog_entrycount()`."
            },
            {
              "name": "rewrite_previous_entry",
              "type": "int",
              "direction": "in",
              "comment": "1 to rewrite the history; 0 otherwise."
            }
          ],
          "comment": [
            "Remove an entry from the reflog by its index",
            "To ensure there's no gap in the log history, set `rewrite_previous_entry`\n param value to 1. When deleting entry `n`, member old_oid of entry `n-1`\n (if any) will be updated with the value of member new_oid of entry `n+1`."
          ],
          "group": "reflog"
        },
        "git_reflog_entry_id_old": {
          "kind": "function",
          "name": "git_reflog_entry_id_old",
          "location": {
            "file": "reflog.h",
            "line": 135,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the old oid"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the old oid"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_id_new": {
          "kind": "function",
          "name": "git_reflog_entry_id_new",
          "location": {
            "file": "reflog.h",
            "line": 143,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the new oid at this time"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the new oid"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_committer": {
          "kind": "function",
          "name": "git_reflog_entry_committer",
          "location": {
            "file": "reflog.h",
            "line": 151,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "the committer"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the committer of this entry"
          ],
          "group": "reflog"
        },
        "git_reflog_entry_message": {
          "kind": "function",
          "name": "git_reflog_entry_message",
          "location": {
            "file": "reflog.h",
            "line": 159,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the log msg"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_reflog_entry *",
              "direction": "in",
              "comment": "a reflog entry"
            }
          ],
          "comment": [
            "Get the log message"
          ],
          "group": "reflog"
        },
        "git_reflog_free": {
          "kind": "function",
          "name": "git_reflog_free",
          "location": {
            "file": "reflog.h",
            "line": 166,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "reflog",
              "type": "git_reflog *",
              "direction": "in",
              "comment": "reflog to free"
            }
          ],
          "comment": [
            "Free the reflog"
          ],
          "group": "reflog"
        },
        "git_reflog_entry": {
          "kind": "struct",
          "name": "git_reflog_entry",
          "referenceName": "struct git_reflog_entry",
          "opaque": true,
          "comment": [
            "Representation of a reference log entry"
          ],
          "location": {
            "file": "types.h",
            "line": 154,
            "column": 33
          },
          "group": "reflog",
          "returnedBy": [
            "git_reflog_entry_byindex",
            "git_reflog_entry__alloc"
          ],
          "parameterTo": [
            "git_reflog_entry_id_old",
            "git_reflog_entry_id_new",
            "git_reflog_entry_committer",
            "git_reflog_entry_message",
            "git_reflog_entry__free"
          ]
        },
        "git_reflog": {
          "kind": "struct",
          "name": "git_reflog",
          "referenceName": "struct git_reflog",
          "opaque": true,
          "comment": [
            "Representation of a reference log"
          ],
          "location": {
            "file": "types.h",
            "line": 157,
            "column": 27
          },
          "group": "reflog",
          "parameterTo": [
            "git_reflog_read",
            "git_reflog_write",
            "git_reflog_append",
            "git_reflog_entrycount",
            "git_reflog_entry_byindex",
            "git_reflog_drop",
            "git_reflog_free",
            "git_transaction_set_reflog"
          ]
        }
      },
      "info": {
        "summary": "Git reflog management routines"
      }
    },
    "sys/reflog": {
      "apis": {
        "git_reflog_entry__alloc": {
          "kind": "function",
          "name": "git_reflog_entry__alloc",
          "location": {
            "file": "sys/reflog.h",
            "line": 16,
            "column": 32
          },
          "returns": {
            "type": "git_reflog_entry *"
          },
          "group": "sys/reflog"
        },
        "git_reflog_entry__free": {
          "kind": "function",
          "name": "git_reflog_entry__free",
          "location": {
            "file": "sys/reflog.h",
            "line": 17,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_reflog_entry *"
            }
          ],
          "group": "sys/reflog"
        }
      },
      "info": {}
    },
    "refs": {
      "apis": {
        "git_reference_lookup": {
          "kind": "function",
          "name": "git_reference_lookup",
          "location": {
            "file": "refs.h",
            "line": 37,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND, GIT_EINVALIDSPEC or an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to the looked-up reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to look up the reference"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)"
            }
          ],
          "comment": [
            "Lookup a reference by name in a repository.",
            "The returned reference must be freed by the user.",
            "The name will be checked for validity.\n See `git_reference_symbolic_create()` for rules about valid names."
          ],
          "group": "refs"
        },
        "git_reference_name_to_id": {
          "kind": "function",
          "name": "git_reference_name_to_id",
          "location": {
            "file": "refs.h",
            "line": 54,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND, GIT_EINVALIDSPEC or an error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer to oid to be filled in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository in which to look up the reference"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)"
            }
          ],
          "comment": [
            "Lookup a reference by name and resolve immediately to OID.",
            "This function provides a quick way to resolve a reference name straight\n through to the object id that it refers to.  This avoids having to\n allocate or free any `git_reference` objects for simple situations.",
            "The name will be checked for validity.\n See `git_reference_symbolic_create()` for rules about valid names."
          ],
          "group": "refs"
        },
        "git_reference_dwim": {
          "kind": "function",
          "name": "git_reference_dwim",
          "location": {
            "file": "refs.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer in which to store the reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to look"
            },
            {
              "name": "shorthand",
              "type": "const char *",
              "direction": "in",
              "comment": "the short name for the reference"
            }
          ],
          "comment": [
            "Lookup a reference by DWIMing its short name",
            "Apply the git precendence rules to the given shorthand to determine\n which reference the user is referring to."
          ],
          "group": "refs"
        },
        "git_reference_symbolic_create_matching": {
          "kind": "function",
          "name": "git_reference_symbolic_create_matching",
          "location": {
            "file": "refs.h",
            "line": 109,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EEXISTS, GIT_EINVALIDSPEC, GIT_EMODIFIED or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "The target of the reference"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            },
            {
              "name": "current_value",
              "type": "const char *",
              "direction": "in",
              "comment": "The expected value of the reference when updating"
            },
            {
              "name": "log_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The one line long message to be appended to the reflog"
            }
          ],
          "comment": [
            "Conditionally create a new symbolic reference.",
            "A symbolic reference is a reference name that refers to another\n reference name.  If the other name moves, the symbolic name will move,\n too.  As a simple example, the \"HEAD\" reference might refer to\n \"refs/heads/master\" while on the \"master\" branch of a repository.",
            "The symbolic reference will be created in the repository and written to\n the disk.  The generated reference object must be freed by the user.",
            "Valid reference names must follow one of two patterns:",
            "1. Top-level names must contain only capital letters and underscores,\n    and must begin and end with a letter. (e.g. \"HEAD\", \"ORIG_HEAD\").\n 2. Names prefixed with \"refs/\" can be almost anything.  You must avoid\n    the characters '~', '^', ':', '\n\\\n', '?', '[', and '*', and the\n    sequences \"..\" and \"@{\" which have special meaning to revparse.",
            "This function will return an error if a reference already exists with the\n given name unless `force` is true, in which case it will be overwritten.",
            "The message for the reflog will be ignored if the reference does\n not belong in the standard set (HEAD, branches and remote-tracking\n branches) and it does not have a reflog.",
            "It will return GIT_EMODIFIED if the reference's value at the time\n of updating does not match the one passed through `current_value`\n (i.e. if the ref has changed since the user read it)."
          ],
          "group": "refs"
        },
        "git_reference_symbolic_create": {
          "kind": "function",
          "name": "git_reference_symbolic_create",
          "location": {
            "file": "refs.h",
            "line": 145,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EEXISTS, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "The target of the reference"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            },
            {
              "name": "log_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The one line long message to be appended to the reflog"
            }
          ],
          "comment": [
            "Create a new symbolic reference.",
            "A symbolic reference is a reference name that refers to another\n reference name.  If the other name moves, the symbolic name will move,\n too.  As a simple example, the \"HEAD\" reference might refer to\n \"refs/heads/master\" while on the \"master\" branch of a repository.",
            "The symbolic reference will be created in the repository and written to\n the disk.  The generated reference object must be freed by the user.",
            "Valid reference names must follow one of two patterns:",
            "1. Top-level names must contain only capital letters and underscores,\n    and must begin and end with a letter. (e.g. \"HEAD\", \"ORIG_HEAD\").\n 2. Names prefixed with \"refs/\" can be almost anything.  You must avoid\n    the characters '~', '^', ':', '\n\\\n', '?', '[', and '*', and the\n    sequences \"..\" and \"@{\" which have special meaning to revparse.",
            "This function will return an error if a reference already exists with the\n given name unless `force` is true, in which case it will be overwritten.",
            "The message for the reflog will be ignored if the reference does\n not belong in the standard set (HEAD, branches and remote-tracking\n branches) and it does not have a reflog."
          ],
          "group": "refs"
        },
        "git_reference_create": {
          "kind": "function",
          "name": "git_reference_create",
          "location": {
            "file": "refs.h",
            "line": 182,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EEXISTS, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The object id pointed to by the reference."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            },
            {
              "name": "log_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The one line long message to be appended to the reflog"
            }
          ],
          "comment": [
            "Create a new direct reference.",
            "A direct reference (also called an object id reference) refers directly\n to a specific object id (a.k.a. OID or SHA) in the repository.  The id\n permanently refers to the object (although the reference itself can be\n moved).  For example, in libgit2 the direct ref \"refs/tags/v0.17.0\"\n refers to OID 5b9fac39d8a76b9139667c26a63e6b3f204b3977.",
            "The direct reference will be created in the repository and written to\n the disk.  The generated reference object must be freed by the user.",
            "Valid reference names must follow one of two patterns:",
            "1. Top-level names must contain only capital letters and underscores,\n    and must begin and end with a letter. (e.g. \"HEAD\", \"ORIG_HEAD\").\n 2. Names prefixed with \"refs/\" can be almost anything.  You must avoid\n    the characters '~', '^', ':', '\n\\\n', '?', '[', and '*', and the\n    sequences \"..\" and \"@{\" which have special meaning to revparse.",
            "This function will return an error if a reference already exists with the\n given name unless `force` is true, in which case it will be overwritten.",
            "The message for the reflog will be ignored if the reference does\n not belong in the standard set (HEAD, branches and remote-tracking\n branches) and and it does not have a reflog."
          ],
          "group": "refs"
        },
        "git_reference_create_matching": {
          "kind": "function",
          "name": "git_reference_create_matching",
          "location": {
            "file": "refs.h",
            "line": 225,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EMODIFIED if the value of the reference\n has changed, GIT_EEXISTS, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where that reference will live"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of the reference"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The object id pointed to by the reference."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            },
            {
              "name": "current_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The expected value of the reference at the time of update"
            },
            {
              "name": "log_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The one line long message to be appended to the reflog"
            }
          ],
          "comment": [
            "Conditionally create new direct reference",
            "A direct reference (also called an object id reference) refers directly\n to a specific object id (a.k.a. OID or SHA) in the repository.  The id\n permanently refers to the object (although the reference itself can be\n moved).  For example, in libgit2 the direct ref \"refs/tags/v0.17.0\"\n refers to OID 5b9fac39d8a76b9139667c26a63e6b3f204b3977.",
            "The direct reference will be created in the repository and written to\n the disk.  The generated reference object must be freed by the user.",
            "Valid reference names must follow one of two patterns:",
            "1. Top-level names must contain only capital letters and underscores,\n    and must begin and end with a letter. (e.g. \"HEAD\", \"ORIG_HEAD\").\n 2. Names prefixed with \"refs/\" can be almost anything.  You must avoid\n    the characters '~', '^', ':', '\n\\\n', '?', '[', and '*', and the\n    sequences \"..\" and \"@{\" which have special meaning to revparse.",
            "This function will return an error if a reference already exists with the\n given name unless `force` is true, in which case it will be overwritten.",
            "The message for the reflog will be ignored if the reference does\n not belong in the standard set (HEAD, branches and remote-tracking\n branches) and and it does not have a reflog.",
            "It will return GIT_EMODIFIED if the reference's value at the time\n of updating does not match the one passed through `current_id`\n (i.e. if the ref has changed since the user read it)."
          ],
          "group": "refs"
        },
        "git_reference_target": {
          "kind": "function",
          "name": "git_reference_target",
          "location": {
            "file": "refs.h",
            "line": 240,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "a pointer to the oid if available, NULL otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the OID pointed to by a direct reference.",
            "Only available if the reference is direct (i.e. an object id reference,\n not a symbolic one).",
            "To find the OID of a symbolic ref, call `git_reference_resolve()` and\n then this function (or maybe use `git_reference_name_to_id()` to\n directly resolve a reference name all the way through to an OID)."
          ],
          "group": "refs"
        },
        "git_reference_target_peel": {
          "kind": "function",
          "name": "git_reference_target_peel",
          "location": {
            "file": "refs.h",
            "line": 251,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "a pointer to the oid if available, NULL otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Return the peeled OID target of this reference.",
            "This peeled OID only applies to direct references that point to\n a hard Tag object: it is the result of peeling such Tag."
          ],
          "group": "refs"
        },
        "git_reference_symbolic_target": {
          "kind": "function",
          "name": "git_reference_symbolic_target",
          "location": {
            "file": "refs.h",
            "line": 261,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the name if available, NULL otherwise"
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get full name to the reference pointed to by a symbolic reference.",
            "Only available if the reference is symbolic."
          ],
          "group": "refs"
        },
        "git_reference_type": {
          "kind": "function",
          "name": "git_reference_type",
          "location": {
            "file": "refs.h",
            "line": 271,
            "column": 29
          },
          "returns": {
            "type": "git_reference_t",
            "comment": "the type"
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the type of a reference.",
            "Either direct (GIT_REFERENCE_DIRECT) or symbolic (GIT_REFERENCE_SYMBOLIC)"
          ],
          "group": "refs"
        },
        "git_reference_name": {
          "kind": "function",
          "name": "git_reference_name",
          "location": {
            "file": "refs.h",
            "line": 281,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the full name for the ref"
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the full name of a reference.",
            "See `git_reference_symbolic_create()` for rules about valid names."
          ],
          "group": "refs"
        },
        "git_reference_resolve": {
          "kind": "function",
          "name": "git_reference_resolve",
          "location": {
            "file": "refs.h",
            "line": 299,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the peeled reference"
            },
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Resolve a symbolic reference to a direct reference.",
            "This method iteratively peels a symbolic reference until it resolves to\n a direct reference to an OID.",
            "The peeled reference is returned in the `resolved_ref` argument, and\n must be freed manually once it's no longer needed.",
            "If a direct reference is passed as an argument, a copy of that\n reference is returned. This copy must be manually freed too."
          ],
          "group": "refs"
        },
        "git_reference_owner": {
          "kind": "function",
          "name": "git_reference_owner",
          "location": {
            "file": "refs.h",
            "line": 307,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "a pointer to the repo"
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference"
            }
          ],
          "comment": [
            "Get the repository where a reference resides."
          ],
          "group": "refs"
        },
        "git_reference_symbolic_set_target": {
          "kind": "function",
          "name": "git_reference_symbolic_set_target",
          "location": {
            "file": "refs.h",
            "line": 329,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "The new target for the reference"
            },
            {
              "name": "log_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The one line long message to be appended to the reflog"
            }
          ],
          "comment": [
            "Create a new reference with the same name as the given reference but a\n different symbolic target. The reference must be a symbolic reference,\n otherwise this will fail.",
            "The new reference will be written to disk, overwriting the given reference.",
            "The target name will be checked for validity.\n See `git_reference_symbolic_create()` for rules about valid names.",
            "The message for the reflog will be ignored if the reference does\n not belong in the standard set (HEAD, branches and remote-tracking\n branches) and and it does not have a reflog."
          ],
          "group": "refs"
        },
        "git_reference_set_target": {
          "kind": "function",
          "name": "git_reference_set_target",
          "location": {
            "file": "refs.h",
            "line": 349,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EMODIFIED if the value of the reference\n has changed since it was read, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "Pointer to the newly created reference"
            },
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "The new target OID for the reference"
            },
            {
              "name": "log_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The one line long message to be appended to the reflog"
            }
          ],
          "comment": [
            "Conditionally create a new reference with the same name as the given reference but a\n different OID target. The reference must be a direct reference, otherwise\n this will fail.",
            "The new reference will be written to disk, overwriting the given reference."
          ],
          "group": "refs"
        },
        "git_reference_rename": {
          "kind": "function",
          "name": "git_reference_rename",
          "location": {
            "file": "refs.h",
            "line": 378,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code"
          },
          "params": [
            {
              "name": "new_ref",
              "type": "git_reference **"
            },
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference to rename"
            },
            {
              "name": "new_name",
              "type": "const char *",
              "direction": "in",
              "comment": "The new name for the reference"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite an existing reference"
            },
            {
              "name": "log_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The one line long message to be appended to the reflog"
            }
          ],
          "comment": [
            "Rename an existing reference.",
            "This method works for both direct and symbolic references.",
            "The new name will be checked for validity.\n See `git_reference_symbolic_create()` for rules about valid names.",
            "If the `force` flag is not enabled, and there's already\n a reference with the given name, the renaming will fail.",
            "IMPORTANT:\n The user needs to write a proper reflog entry if the\n reflog is enabled for the repository. We only rename\n the reflog if it exists."
          ],
          "group": "refs"
        },
        "git_reference_delete": {
          "kind": "function",
          "name": "git_reference_delete",
          "location": {
            "file": "refs.h",
            "line": 398,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EMODIFIED or an error code"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "The reference to remove"
            }
          ],
          "comment": [
            "Delete an existing reference.",
            "This method works for both direct and symbolic references.  The reference\n will be immediately removed on disk but the memory will not be freed.\n Callers must call `git_reference_free`.",
            "This function will return an error if the reference has changed\n from the time it was looked up."
          ],
          "group": "refs"
        },
        "git_reference_remove": {
          "kind": "function",
          "name": "git_reference_remove",
          "location": {
            "file": "refs.h",
            "line": 409,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The reference to remove"
            }
          ],
          "comment": [
            "Delete an existing reference by name",
            "This method removes the named reference from the repository without\n looking at its old value."
          ],
          "group": "refs"
        },
        "git_reference_list": {
          "kind": "function",
          "name": "git_reference_list",
          "location": {
            "file": "refs.h",
            "line": 423,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "array",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "Pointer to a git_strarray structure where\n\t\tthe reference names will be stored"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the refs"
            }
          ],
          "comment": [
            "Fill a list with all the references that can be found in a repository.",
            "The string array will be filled with the names of all references; these\n values are owned by the user and should be free'd manually when no\n longer needed, using `git_strarray_free()`."
          ],
          "group": "refs"
        },
        "git_reference_foreach_cb": {
          "kind": "callback",
          "name": "git_reference_foreach_cb",
          "type": "int (*)(git_reference *, void *)",
          "comment": [
            "Callback used to iterate over references"
          ],
          "location": {
            "file": "refs.h",
            "line": 434,
            "column": 26
          },
          "see": [
            "git_reference_foreach"
          ],
          "params": [
            {
              "name": "reference",
              "direction": "in",
              "comment": "The reference object",
              "type": "git_reference *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload passed to git_reference_foreach",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "non-zero to terminate the iteration",
            "type": "int"
          },
          "group": "refs",
          "parameterTo": [
            "git_reference_foreach"
          ],
          "typedef": true
        },
        "git_reference_foreach_name_cb": {
          "kind": "callback",
          "name": "git_reference_foreach_name_cb",
          "type": "int (*)(const char *, void *)",
          "comment": [
            "Callback used to iterate over reference names"
          ],
          "location": {
            "file": "refs.h",
            "line": 445,
            "column": 26
          },
          "see": [
            "git_reference_foreach_name"
          ],
          "params": [
            {
              "name": "name",
              "direction": "in",
              "comment": "The reference name",
              "type": "const char *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload passed to git_reference_foreach_name",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "non-zero to terminate the iteration",
            "type": "int"
          },
          "group": "refs",
          "parameterTo": [
            "git_reference_foreach_name",
            "git_reference_foreach_glob"
          ],
          "typedef": true
        },
        "git_reference_foreach": {
          "kind": "function",
          "name": "git_reference_foreach",
          "location": {
            "file": "refs.h",
            "line": 463,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the refs"
            },
            {
              "name": "callback",
              "type": "git_reference_foreach_cb",
              "direction": "in",
              "comment": "Function which will be called for every listed ref",
              "referenceType": "int (*)(git_reference *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Additional data to pass to the callback"
            }
          ],
          "comment": [
            "Perform a callback on each reference in the repository.",
            "The `callback` function will be called for each reference in the\n repository, receiving the reference object and the `payload` value\n passed to this method.  Returning a non-zero value from the callback\n will terminate the iteration.",
            "Note that the callback function is responsible to call `git_reference_free`\n on each reference passed to it."
          ],
          "group": "refs"
        },
        "git_reference_foreach_name": {
          "kind": "function",
          "name": "git_reference_foreach_name",
          "location": {
            "file": "refs.h",
            "line": 481,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the refs"
            },
            {
              "name": "callback",
              "type": "git_reference_foreach_name_cb",
              "direction": "in",
              "comment": "Function which will be called for every listed ref name",
              "referenceType": "int (*)(const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Additional data to pass to the callback"
            }
          ],
          "comment": [
            "Perform a callback on the fully-qualified name of each reference.",
            "The `callback` function will be called for each reference in the\n repository, receiving the name of the reference and the `payload` value\n passed to this method.  Returning a non-zero value from the callback\n will terminate the iteration."
          ],
          "group": "refs"
        },
        "git_reference_dup": {
          "kind": "function",
          "name": "git_reference_dup",
          "location": {
            "file": "refs.h",
            "line": 495,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "dest",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer where to store the copy"
            },
            {
              "name": "source",
              "type": "git_reference *",
              "direction": "in",
              "comment": "object to copy"
            }
          ],
          "comment": [
            "Create a copy of an existing reference.",
            "Call `git_reference_free` to free the data."
          ],
          "group": "refs"
        },
        "git_reference_free": {
          "kind": "function",
          "name": "git_reference_free",
          "location": {
            "file": "refs.h",
            "line": 502,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "ref",
              "type": "git_reference *",
              "direction": "in",
              "comment": "git_reference"
            }
          ],
          "comment": [
            "Free the given reference."
          ],
          "group": "refs"
        },
        "git_reference_cmp": {
          "kind": "function",
          "name": "git_reference_cmp",
          "location": {
            "file": "refs.h",
            "line": 511,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the same, else a stable but meaningless ordering."
          },
          "params": [
            {
              "name": "ref1",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The first git_reference"
            },
            {
              "name": "ref2",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The second git_reference"
            }
          ],
          "comment": [
            "Compare two references."
          ],
          "group": "refs"
        },
        "git_reference_iterator_new": {
          "kind": "function",
          "name": "git_reference_iterator_new",
          "location": {
            "file": "refs.h",
            "line": 522,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference_iterator **",
              "direction": "in",
              "comment": "pointer in which to store the iterator"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            }
          ],
          "comment": [
            "Create an iterator for the repo's references"
          ],
          "group": "refs"
        },
        "git_reference_iterator_glob_new": {
          "kind": "function",
          "name": "git_reference_iterator_glob_new",
          "location": {
            "file": "refs.h",
            "line": 535,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference_iterator **",
              "direction": "in",
              "comment": "pointer in which to store the iterator"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            },
            {
              "name": "glob",
              "type": "const char *",
              "direction": "in",
              "comment": "the glob to match against the reference names"
            }
          ],
          "comment": [
            "Create an iterator for the repo's references that match the\n specified glob"
          ],
          "group": "refs"
        },
        "git_reference_next": {
          "kind": "function",
          "name": "git_reference_next",
          "location": {
            "file": "refs.h",
            "line": 547,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ITEROVER if there are no more; or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer in which to store the reference"
            },
            {
              "name": "iter",
              "type": "git_reference_iterator *",
              "direction": "in",
              "comment": "the iterator"
            }
          ],
          "comment": [
            "Get the next reference"
          ],
          "group": "refs"
        },
        "git_reference_next_name": {
          "kind": "function",
          "name": "git_reference_next_name",
          "location": {
            "file": "refs.h",
            "line": 560,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ITEROVER if there are no more; or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "const char **",
              "direction": "in",
              "comment": "pointer in which to store the string"
            },
            {
              "name": "iter",
              "type": "git_reference_iterator *",
              "direction": "in",
              "comment": "the iterator"
            }
          ],
          "comment": [
            "Get the next reference's name",
            "This function is provided for convenience in case only the names\n are interesting as it avoids the allocation of the `git_reference`\n object which `git_reference_next()` needs."
          ],
          "group": "refs"
        },
        "git_reference_iterator_free": {
          "kind": "function",
          "name": "git_reference_iterator_free",
          "location": {
            "file": "refs.h",
            "line": 567,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "iter",
              "type": "git_reference_iterator *",
              "direction": "in",
              "comment": "the iterator to free"
            }
          ],
          "comment": [
            "Free the iterator and its associated resources"
          ],
          "group": "refs"
        },
        "git_reference_foreach_glob": {
          "kind": "function",
          "name": "git_reference_foreach_glob",
          "location": {
            "file": "refs.h",
            "line": 587,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EUSER on non-zero callback, or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the refs"
            },
            {
              "name": "glob",
              "type": "const char *",
              "direction": "in",
              "comment": "Pattern to match (fnmatch-style) against reference name."
            },
            {
              "name": "callback",
              "type": "git_reference_foreach_name_cb",
              "direction": "in",
              "comment": "Function which will be called for every listed ref",
              "referenceType": "int (*)(const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Additional data to pass to the callback"
            }
          ],
          "comment": [
            "Perform a callback on each reference in the repository whose name\n matches the given pattern.",
            "This function acts like `git_reference_foreach()` with an additional\n pattern match being applied to the reference name before issuing the\n callback function.  See that function for more information.",
            "The pattern is matched using fnmatch or \"glob\" style where a '*' matches\n any sequence of letters, a '?' matches any letter, and square brackets\n can be used to define character ranges (such as \"[0-9]\" for digits)."
          ],
          "group": "refs"
        },
        "git_reference_has_log": {
          "kind": "function",
          "name": "git_reference_has_log",
          "location": {
            "file": "refs.h",
            "line": 601,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 when no reflog can be found, 1 when it exists;\n otherwise an error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference's name"
            }
          ],
          "comment": [
            "Check if a reflog exists for the specified reference."
          ],
          "group": "refs"
        },
        "git_reference_ensure_log": {
          "kind": "function",
          "name": "git_reference_ensure_log",
          "location": {
            "file": "refs.h",
            "line": 613,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference's name"
            }
          ],
          "comment": [
            "Ensure there is a reflog for a particular reference.",
            "Make sure that successive updates to the reference will append to\n its log."
          ],
          "group": "refs"
        },
        "git_reference_is_branch": {
          "kind": "function",
          "name": "git_reference_is_branch",
          "location": {
            "file": "refs.h",
            "line": 623,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 when the reference lives in the refs/heads\n namespace; 0 otherwise."
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "A git reference"
            }
          ],
          "comment": [
            "Check if a reference is a local branch."
          ],
          "group": "refs"
        },
        "git_reference_is_remote": {
          "kind": "function",
          "name": "git_reference_is_remote",
          "location": {
            "file": "refs.h",
            "line": 633,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 when the reference lives in the refs/remotes\n namespace; 0 otherwise."
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "A git reference"
            }
          ],
          "comment": [
            "Check if a reference is a remote tracking branch"
          ],
          "group": "refs"
        },
        "git_reference_is_tag": {
          "kind": "function",
          "name": "git_reference_is_tag",
          "location": {
            "file": "refs.h",
            "line": 643,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 when the reference lives in the refs/tags\n namespace; 0 otherwise."
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "A git reference"
            }
          ],
          "comment": [
            "Check if a reference is a tag"
          ],
          "group": "refs"
        },
        "git_reference_is_note": {
          "kind": "function",
          "name": "git_reference_is_note",
          "location": {
            "file": "refs.h",
            "line": 653,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 when the reference lives in the refs/notes\n namespace; 0 otherwise."
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "A git reference"
            }
          ],
          "comment": [
            "Check if a reference is a note"
          ],
          "group": "refs"
        },
        "git_reference_format_t": {
          "kind": "enum",
          "name": "git_reference_format_t",
          "referenceName": "git_reference_format_t",
          "members": [
            {
              "name": "GIT_REFERENCE_FORMAT_NORMAL",
              "comment": [
                "No particular normalization."
              ]
            },
            {
              "name": "GIT_REFERENCE_FORMAT_ALLOW_ONELEVEL",
              "comment": [
                "Control whether one-level refnames are accepted\n (i.e., refnames that do not contain multiple /-separated\n components). Those are expected to be written only using\n uppercase letters and underscore (FETCH_HEAD, ...)"
              ]
            },
            {
              "name": "GIT_REFERENCE_FORMAT_REFSPEC_PATTERN",
              "comment": [
                "Interpret the provided name as a reference pattern for a\n refspec (as used with remote repositories). If this option\n is enabled, the name is allowed to contain a single * (\n<star>)\n in place of a one full pathname component\n (e.g., foo/\n<star>/bar but not foo/bar\n<star>)."
              ]
            },
            {
              "name": "GIT_REFERENCE_FORMAT_REFSPEC_SHORTHAND",
              "comment": [
                "Interpret the name as part of a refspec in shorthand form\n so the `ONELEVEL` naming rules aren't enforced and 'master'\n becomes a valid name."
              ]
            }
          ],
          "comment": [
            "Normalization options for reference lookup"
          ],
          "location": {
            "file": "refs.h",
            "line": 658,
            "column": 9
          },
          "group": "refs"
        },
        "git_reference_normalize_name": {
          "kind": "function",
          "name": "git_reference_normalize_name",
          "location": {
            "file": "refs.h",
            "line": 709,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EBUFS if buffer is too small, GIT_EINVALIDSPEC\n or an error code."
          },
          "params": [
            {
              "name": "buffer_out",
              "type": "char *",
              "direction": "in",
              "comment": "User allocated buffer to store normalized name"
            },
            {
              "name": "buffer_size",
              "type": "size_t",
              "direction": "in",
              "comment": "Size of buffer_out"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "Reference name to be checked."
            },
            {
              "name": "flags",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Flags to constrain name validation rules - see the\n              GIT_REFERENCE_FORMAT constants above."
            }
          ],
          "comment": [
            "Normalize reference name and check validity.",
            "This will normalize the reference name by removing any leading slash\n '/' characters and collapsing runs of adjacent slashes between name\n components into a single slash.",
            "Once normalized, if the reference name is valid, it will be returned in\n the user allocated buffer.",
            "See `git_reference_symbolic_create()` for rules about valid names."
          ],
          "group": "refs"
        },
        "git_reference_peel": {
          "kind": "function",
          "name": "git_reference_peel",
          "location": {
            "file": "refs.h",
            "line": 730,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EAMBIGUOUS, GIT_ENOTFOUND or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_object **",
              "direction": "in",
              "comment": "Pointer to the peeled git_object"
            },
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "The reference to be processed"
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "The type of the requested object (GIT_OBJECT_COMMIT,\n GIT_OBJECT_TAG, GIT_OBJECT_TREE, GIT_OBJECT_BLOB or GIT_OBJECT_ANY).",
              "referenceType": "enum git_object_t"
            }
          ],
          "comment": [
            "Recursively peel reference until object of the specified type is found.",
            "The retrieved `peeled` object is owned by the repository\n and should be closed with the `git_object_free` method.",
            "If you pass `GIT_OBJECT_ANY` as the target type, then the object\n will be peeled until a non-tag object is met."
          ],
          "group": "refs"
        },
        "git_reference_is_valid_name": {
          "kind": "function",
          "name": "git_reference_is_valid_name",
          "location": {
            "file": "refs.h",
            "line": 749,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the reference name is acceptable; 0 if it isn't"
          },
          "params": [
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "name to be checked."
            }
          ],
          "comment": [
            "Ensure the reference name is well-formed.",
            "Valid reference names must follow one of two patterns:",
            "1. Top-level names must contain only capital letters and underscores,\n    and must begin and end with a letter. (e.g. \"HEAD\", \"ORIG_HEAD\").\n 2. Names prefixed with \"refs/\" can be almost anything.  You must avoid\n    the characters '~', '^', ':', '\n\\\n', '?', '[', and '*', and the\n    sequences \"..\" and \"@{\" which have special meaning to revparse."
          ],
          "group": "refs"
        },
        "git_reference_shorthand": {
          "kind": "function",
          "name": "git_reference_shorthand",
          "location": {
            "file": "refs.h",
            "line": 763,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the human-readable version of the name"
          },
          "params": [
            {
              "name": "ref",
              "type": "const git_reference *",
              "direction": "in",
              "comment": "a reference"
            }
          ],
          "comment": [
            "Get the reference's short name",
            "This will transform the reference name into a name \"human-readable\"\n version. If no shortname is appropriate, it will return the full\n name.",
            "The memory is owned by the reference and must not be freed."
          ],
          "group": "refs"
        },
        "git_reference": {
          "kind": "struct",
          "name": "git_reference",
          "referenceName": "struct git_reference",
          "opaque": true,
          "comment": [
            "In-memory representation of a reference."
          ],
          "location": {
            "file": "types.h",
            "line": 180,
            "column": 30
          },
          "group": "refs",
          "returnedBy": [
            "git_reference__alloc",
            "git_reference__alloc_symbolic"
          ],
          "parameterTo": [
            "git_annotated_commit_from_ref",
            "git_branch_create",
            "git_branch_create_from_annotated",
            "git_branch_delete",
            "git_branch_next",
            "git_branch_move",
            "git_branch_lookup",
            "git_branch_name",
            "git_branch_upstream",
            "git_branch_set_upstream",
            "git_branch_is_head",
            "git_branch_is_checked_out",
            "git_merge_analysis_for_ref",
            "git_reference_lookup",
            "git_reference_dwim",
            "git_reference_symbolic_create_matching",
            "git_reference_symbolic_create",
            "git_reference_create",
            "git_reference_create_matching",
            "git_reference_target",
            "git_reference_target_peel",
            "git_reference_symbolic_target",
            "git_reference_type",
            "git_reference_name",
            "git_reference_resolve",
            "git_reference_owner",
            "git_reference_symbolic_set_target",
            "git_reference_set_target",
            "git_reference_rename",
            "git_reference_delete",
            "git_reference_foreach_cb",
            "git_reference_dup",
            "git_reference_free",
            "git_reference_cmp",
            "git_reference_next",
            "git_reference_is_branch",
            "git_reference_is_remote",
            "git_reference_is_tag",
            "git_reference_is_note",
            "git_reference_peel",
            "git_reference_shorthand",
            "git_repository_head",
            "git_repository_head_for_worktree",
            "git_revparse_ext"
          ]
        },
        "git_reference_t": {
          "kind": "enum",
          "name": "git_reference_t",
          "referenceName": "git_reference_t",
          "members": [
            {
              "name": "GIT_REFERENCE_INVALID",
              "value": "0",
              "comment": [
                "Invalid reference"
              ]
            },
            {
              "name": "GIT_REFERENCE_DIRECT",
              "value": "1",
              "comment": [
                "A reference that points at an object id"
              ]
            },
            {
              "name": "GIT_REFERENCE_SYMBOLIC",
              "value": "2",
              "comment": [
                "A reference that points at another reference"
              ]
            },
            {
              "name": "GIT_REFERENCE_ALL",
              "value": "3"
            }
          ],
          "comment": [
            "Basic type of any Git reference."
          ],
          "location": {
            "file": "types.h",
            "line": 198,
            "column": 9
          },
          "group": "refs",
          "returnedBy": [
            "git_reference_type"
          ]
        }
      },
      "info": {
        "summary": "Git reference management routines"
      }
    },
    "sys/refs": {
      "apis": {
        "git_reference__alloc": {
          "kind": "function",
          "name": "git_reference__alloc",
          "location": {
            "file": "sys/refs.h",
            "line": 31,
            "column": 29
          },
          "returns": {
            "type": "git_reference *",
            "comment": "the created git_reference or NULL on error"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference name"
            },
            {
              "name": "oid",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the object id for a direct reference"
            },
            {
              "name": "peel",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the first non-tag object's OID, or NULL"
            }
          ],
          "comment": [
            "Create a new direct reference from an OID."
          ],
          "group": "sys/refs"
        },
        "git_reference__alloc_symbolic": {
          "kind": "function",
          "name": "git_reference__alloc_symbolic",
          "location": {
            "file": "sys/refs.h",
            "line": 43,
            "column": 29
          },
          "returns": {
            "type": "git_reference *",
            "comment": "the created git_reference or NULL on error"
          },
          "params": [
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference name"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "the target for a symbolic reference"
            }
          ],
          "comment": [
            "Create a new symbolic reference."
          ],
          "group": "sys/refs"
        }
      },
      "info": {
        "summary": "Low-level Git ref creation"
      }
    },
    "refspec": {
      "apis": {
        "git_refspec_parse": {
          "kind": "function",
          "name": "git_refspec_parse",
          "location": {
            "file": "refspec.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the refspec string could be parsed, -1 otherwise"
          },
          "params": [
            {
              "name": "refspec",
              "type": "git_refspec **",
              "direction": "in",
              "comment": "a pointer to hold the refspec handle"
            },
            {
              "name": "input",
              "type": "const char *",
              "direction": "in",
              "comment": "the refspec string"
            },
            {
              "name": "is_fetch",
              "type": "int",
              "direction": "in",
              "comment": "is this a refspec for a fetch"
            }
          ],
          "comment": [
            "Parse a given refspec string"
          ],
          "group": "refspec"
        },
        "git_refspec_free": {
          "kind": "function",
          "name": "git_refspec_free",
          "location": {
            "file": "refspec.h",
            "line": 39,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "refspec",
              "type": "git_refspec *",
              "direction": "in",
              "comment": "the refspec object"
            }
          ],
          "comment": [
            "Free a refspec object which has been created by git_refspec_parse"
          ],
          "group": "refspec"
        },
        "git_refspec_src": {
          "kind": "function",
          "name": "git_refspec_src",
          "location": {
            "file": "refspec.h",
            "line": 47,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the refspec's source specifier"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            }
          ],
          "comment": [
            "Get the source specifier"
          ],
          "group": "refspec"
        },
        "git_refspec_dst": {
          "kind": "function",
          "name": "git_refspec_dst",
          "location": {
            "file": "refspec.h",
            "line": 55,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the refspec's destination specifier"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            }
          ],
          "comment": [
            "Get the destination specifier"
          ],
          "group": "refspec"
        },
        "git_refspec_string": {
          "kind": "function",
          "name": "git_refspec_string",
          "location": {
            "file": "refspec.h",
            "line": 63,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the refspec's original string"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            }
          ],
          "comment": [
            "Get the refspec's string"
          ],
          "group": "refspec"
        },
        "git_refspec_force": {
          "kind": "function",
          "name": "git_refspec_force",
          "location": {
            "file": "refspec.h",
            "line": 71,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if force update has been set, 0 otherwise"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            }
          ],
          "comment": [
            "Get the force update setting"
          ],
          "group": "refspec"
        },
        "git_refspec_direction": {
          "kind": "function",
          "name": "git_refspec_direction",
          "location": {
            "file": "refspec.h",
            "line": 79,
            "column": 27
          },
          "returns": {
            "type": "git_direction",
            "comment": "GIT_DIRECTION_FETCH or GIT_DIRECTION_PUSH"
          },
          "params": [
            {
              "name": "spec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "refspec"
            }
          ],
          "comment": [
            "Get the refspec's direction."
          ],
          "group": "refspec"
        },
        "git_refspec_src_matches": {
          "kind": "function",
          "name": "git_refspec_src_matches",
          "location": {
            "file": "refspec.h",
            "line": 88,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the refspec matches, 0 otherwise"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the reference to check"
            }
          ],
          "comment": [
            "Check if a refspec's source descriptor matches a reference"
          ],
          "group": "refspec"
        },
        "git_refspec_dst_matches": {
          "kind": "function",
          "name": "git_refspec_dst_matches",
          "location": {
            "file": "refspec.h",
            "line": 97,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the refspec matches, 0 otherwise"
          },
          "params": [
            {
              "name": "refspec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the reference to check"
            }
          ],
          "comment": [
            "Check if a refspec's destination descriptor matches a reference"
          ],
          "group": "refspec"
        },
        "git_refspec_transform": {
          "kind": "function",
          "name": "git_refspec_transform",
          "location": {
            "file": "refspec.h",
            "line": 107,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EBUFS or another error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "where to store the target name"
            },
            {
              "name": "spec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the reference to transform"
            }
          ],
          "comment": [
            "Transform a reference to its target following the refspec's rules"
          ],
          "group": "refspec"
        },
        "git_refspec_rtransform": {
          "kind": "function",
          "name": "git_refspec_rtransform",
          "location": {
            "file": "refspec.h",
            "line": 117,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EBUFS or another error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "where to store the source reference name"
            },
            {
              "name": "spec",
              "type": "const git_refspec *",
              "direction": "in",
              "comment": "the refspec"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the reference to transform"
            }
          ],
          "comment": [
            "Transform a target reference to its source reference following the refspec's rules"
          ],
          "group": "refspec"
        },
        "git_refspec": {
          "kind": "struct",
          "name": "git_refspec",
          "referenceName": "struct git_refspec",
          "opaque": true,
          "comment": [
            "A refspec specifies the mapping between remote and local reference\n names when fetch or pushing."
          ],
          "location": {
            "file": "types.h",
            "line": 226,
            "column": 28
          },
          "group": "refspec",
          "returnedBy": [
            "git_remote_get_refspec"
          ],
          "parameterTo": [
            "git_refspec_parse",
            "git_refspec_free",
            "git_refspec_src",
            "git_refspec_dst",
            "git_refspec_string",
            "git_refspec_force",
            "git_refspec_direction",
            "git_refspec_src_matches",
            "git_refspec_dst_matches",
            "git_refspec_transform",
            "git_refspec_rtransform"
          ]
        }
      },
      "info": {
        "summary": "Git refspec attributes"
      }
    },
    "remote": {
      "apis": {
        "git_remote_create": {
          "kind": "function",
          "name": "git_remote_create",
          "location": {
            "file": "remote.h",
            "line": 38,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "the resulting remote"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to create the remote"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's url"
            }
          ],
          "comment": [
            "Add a remote with the default fetch refspec to the repository's configuration."
          ],
          "group": "remote"
        },
        "git_remote_create_flags": {
          "kind": "enum",
          "name": "git_remote_create_flags",
          "referenceName": "git_remote_create_flags",
          "members": [
            {
              "name": "GIT_REMOTE_CREATE_SKIP_INSTEADOF",
              "value": "1",
              "comment": [
                "Ignore the repository apply.insteadOf configuration"
              ]
            },
            {
              "name": "GIT_REMOTE_CREATE_SKIP_DEFAULT_FETCHSPEC",
              "value": "2",
              "comment": [
                "Don't build a fetchspec from the name if none is set"
              ]
            }
          ],
          "comment": [
            "Remote creation options flags"
          ],
          "location": {
            "file": "remote.h",
            "line": 47,
            "column": 9
          },
          "group": "remote"
        },
        "git_remote_create_options": {
          "kind": "struct",
          "name": "git_remote_create_options",
          "referenceName": "git_remote_create_options",
          "comment": [
            "Remote creation options structure",
            "Initialize with `GIT_REMOTE_CREATE_OPTIONS_INIT`. Alternatively, you can\n use `git_remote_create_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "repository",
              "type": "git_repository *",
              "comment": [
                "The repository that should own the remote.\n Setting this to NULL results in a detached remote."
              ]
            },
            {
              "name": "name",
              "type": "const char *",
              "comment": [
                "The remote's name.\n Setting this to NULL results in an in-memory/anonymous remote."
              ]
            },
            {
              "name": "fetchspec",
              "type": "const char *",
              "comment": [
                "The fetchspec the remote should use."
              ]
            },
            {
              "name": "flags",
              "type": "unsigned int",
              "comment": [
                "Additional flags for the remote. See git_remote_create_flags."
              ]
            }
          ],
          "location": {
            "file": "remote.h",
            "line": 62,
            "column": 16
          },
          "group": "remote",
          "parameterTo": [
            "git_remote_create_init_options",
            "git_remote_create_options_init",
            "git_remote_create_with_opts"
          ]
        },
        "GIT_REMOTE_CREATE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_REMOTE_CREATE_OPTIONS_VERSION",
          "location": {
            "file": "remote.h",
            "line": 84,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "remote"
        },
        "GIT_REMOTE_CREATE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_REMOTE_CREATE_OPTIONS_INIT",
          "location": {
            "file": "remote.h",
            "line": 85,
            "column": 9
          },
          "value": "{GIT_REMOTE_CREATE_OPTIONS_VERSION}",
          "comment": "",
          "group": "remote"
        },
        "git_remote_create_options_init": {
          "kind": "function",
          "name": "git_remote_create_options_init",
          "location": {
            "file": "remote.h",
            "line": 97,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_remote_create_options *",
              "direction": "in",
              "comment": "The `git_remote_create_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_REMOTE_CREATE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_remote_create_options structure",
            "Initializes a `git_remote_create_options` with default values. Equivalent to\n creating an instance with `GIT_REMOTE_CREATE_OPTIONS_INIT`."
          ],
          "group": "remote"
        },
        "git_remote_create_with_opts": {
          "kind": "function",
          "name": "git_remote_create_with_opts",
          "location": {
            "file": "remote.h",
            "line": 113,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "the resulting remote"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's url"
            },
            {
              "name": "opts",
              "type": "const git_remote_create_options *",
              "direction": "in",
              "comment": "the remote creation options"
            }
          ],
          "comment": [
            "Create a remote, with options.",
            "This function allows more fine-grained control over the remote creation.",
            "Passing NULL as the opts argument will result in a detached remote."
          ],
          "group": "remote"
        },
        "git_remote_create_with_fetchspec": {
          "kind": "function",
          "name": "git_remote_create_with_fetchspec",
          "location": {
            "file": "remote.h",
            "line": 129,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "the resulting remote"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to create the remote"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's url"
            },
            {
              "name": "fetch",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote fetch value"
            }
          ],
          "comment": [
            "Add a remote with the provided fetch refspec (or default if NULL) to the repository's\n configuration."
          ],
          "group": "remote"
        },
        "git_remote_create_anonymous": {
          "kind": "function",
          "name": "git_remote_create_anonymous",
          "location": {
            "file": "remote.h",
            "line": 147,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "pointer to the new remote objects"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the associated repository"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote repository's URL"
            }
          ],
          "comment": [
            "Create an anonymous remote",
            "Create a remote with the given url in-memory. You can use this when\n you have a URL instead of a remote's name."
          ],
          "group": "remote"
        },
        "git_remote_create_detached": {
          "kind": "function",
          "name": "git_remote_create_detached",
          "location": {
            "file": "remote.h",
            "line": 166,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "pointer to the new remote objects"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote repository's URL"
            }
          ],
          "comment": [
            "Create a remote without a connected local repo",
            "Create a remote with the given url in-memory. You can use this when\n you have a URL instead of a remote's name.",
            "Contrasted with git_remote_create_anonymous, a detached remote\n will not consider any repo configuration values (such as insteadof url\n substitutions)."
          ],
          "group": "remote"
        },
        "git_remote_lookup": {
          "kind": "function",
          "name": "git_remote_lookup",
          "location": {
            "file": "remote.h",
            "line": 181,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_remote **",
              "direction": "in",
              "comment": "pointer to the new remote object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the associated repository"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            }
          ],
          "comment": [
            "Get the information for a particular remote",
            "The name will be checked for validity.\n See `git_tag_create()` for rules about valid names."
          ],
          "group": "remote"
        },
        "git_remote_dup": {
          "kind": "function",
          "name": "git_remote_dup",
          "location": {
            "file": "remote.h",
            "line": 193,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "dest",
              "type": "git_remote **",
              "direction": "in",
              "comment": "pointer where to store the copy"
            },
            {
              "name": "source",
              "type": "git_remote *",
              "direction": "in",
              "comment": "object to copy"
            }
          ],
          "comment": [
            "Create a copy of an existing remote.  All internal strings are also\n duplicated. Callbacks are not duplicated.",
            "Call `git_remote_free` to free the data."
          ],
          "group": "remote"
        },
        "git_remote_owner": {
          "kind": "function",
          "name": "git_remote_owner",
          "location": {
            "file": "remote.h",
            "line": 201,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "a pointer to the repository"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the remote's repository"
          ],
          "group": "remote"
        },
        "git_remote_name": {
          "kind": "function",
          "name": "git_remote_name",
          "location": {
            "file": "remote.h",
            "line": 209,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the name or NULL for in-memory remotes"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the remote's name"
          ],
          "group": "remote"
        },
        "git_remote_url": {
          "kind": "function",
          "name": "git_remote_url",
          "location": {
            "file": "remote.h",
            "line": 220,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the url"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the remote's url",
            "If url.*.insteadOf has been configured for this URL, it will\n return the modified URL."
          ],
          "group": "remote"
        },
        "git_remote_pushurl": {
          "kind": "function",
          "name": "git_remote_pushurl",
          "location": {
            "file": "remote.h",
            "line": 231,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "a pointer to the url or NULL if no special url for pushing is set"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the remote's url for pushing",
            "If url.*.pushInsteadOf has been configured for this URL, it\n will return the modified URL."
          ],
          "group": "remote"
        },
        "git_remote_set_url": {
          "kind": "function",
          "name": "git_remote_set_url",
          "location": {
            "file": "remote.h",
            "line": 244,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error value"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to perform the change"
            },
            {
              "name": "remote",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the url to set"
            }
          ],
          "comment": [
            "Set the remote's url in the configuration",
            "Remote objects already in memory will not be affected. This assumes\n the common case of a single-url remote and will otherwise return an error."
          ],
          "group": "remote"
        },
        "git_remote_set_pushurl": {
          "kind": "function",
          "name": "git_remote_set_pushurl",
          "location": {
            "file": "remote.h",
            "line": 257,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to perform the change"
            },
            {
              "name": "remote",
              "type": "const char *",
              "direction": "in",
              "comment": "the remote's name"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "the url to set"
            }
          ],
          "comment": [
            "Set the remote's url for pushing in the configuration.",
            "Remote objects already in memory will not be affected. This assumes\n the common case of a single-url remote and will otherwise return an error."
          ],
          "group": "remote"
        },
        "git_remote_add_fetch": {
          "kind": "function",
          "name": "git_remote_add_fetch",
          "location": {
            "file": "remote.h",
            "line": 270,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EINVALIDSPEC if refspec is invalid or an error value"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to change the configuration"
            },
            {
              "name": "remote",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the remote to change"
            },
            {
              "name": "refspec",
              "type": "const char *",
              "direction": "in",
              "comment": "the new fetch refspec"
            }
          ],
          "comment": [
            "Add a fetch refspec to the remote's configuration",
            "Add the given refspec to the fetch list in the configuration. No\n loaded remote instances will be affected."
          ],
          "group": "remote"
        },
        "git_remote_get_fetch_refspecs": {
          "kind": "function",
          "name": "git_remote_get_fetch_refspecs",
          "location": {
            "file": "remote.h",
            "line": 281,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "array",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "pointer to the array in which to store the strings"
            },
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote to query"
            }
          ],
          "comment": [
            "Get the remote's list of fetch refspecs",
            "The memory is owned by the user and should be freed with\n `git_strarray_free`."
          ],
          "group": "remote"
        },
        "git_remote_add_push": {
          "kind": "function",
          "name": "git_remote_add_push",
          "location": {
            "file": "remote.h",
            "line": 294,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EINVALIDSPEC if refspec is invalid or an error value"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to change the configuration"
            },
            {
              "name": "remote",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the remote to change"
            },
            {
              "name": "refspec",
              "type": "const char *",
              "direction": "in",
              "comment": "the new push refspec"
            }
          ],
          "comment": [
            "Add a push refspec to the remote's configuration",
            "Add the given refspec to the push list in the configuration. No\n loaded remote instances will be affected."
          ],
          "group": "remote"
        },
        "git_remote_get_push_refspecs": {
          "kind": "function",
          "name": "git_remote_get_push_refspecs",
          "location": {
            "file": "remote.h",
            "line": 305,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "array",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "pointer to the array in which to store the strings"
            },
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote to query"
            }
          ],
          "comment": [
            "Get the remote's list of push refspecs",
            "The memory is owned by the user and should be freed with\n `git_strarray_free`."
          ],
          "group": "remote"
        },
        "git_remote_refspec_count": {
          "kind": "function",
          "name": "git_remote_refspec_count",
          "location": {
            "file": "remote.h",
            "line": 313,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the amount of refspecs configured in this remote"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the number of refspecs for a remote"
          ],
          "group": "remote"
        },
        "git_remote_get_refspec": {
          "kind": "function",
          "name": "git_remote_get_refspec",
          "location": {
            "file": "remote.h",
            "line": 322,
            "column": 32
          },
          "returns": {
            "type": "const git_refspec *",
            "comment": "the nth refspec"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote to query"
            },
            {
              "name": "n",
              "type": "size_t",
              "direction": "in",
              "comment": "the refspec to get"
            }
          ],
          "comment": [
            "Get a refspec from the remote"
          ],
          "group": "remote"
        },
        "git_remote_connect": {
          "kind": "function",
          "name": "git_remote_connect",
          "location": {
            "file": "remote.h",
            "line": 339,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to connect to"
            },
            {
              "name": "direction",
              "type": "git_direction",
              "direction": "in",
              "comment": "GIT_DIRECTION_FETCH if you want to fetch or\n GIT_DIRECTION_PUSH if you want to push",
              "referenceType": "enum git_direction"
            },
            {
              "name": "callbacks",
              "type": "const git_remote_callbacks *",
              "direction": "in",
              "comment": "the callbacks to use for this connection"
            },
            {
              "name": "proxy_opts",
              "type": "const git_proxy_options *",
              "direction": "in",
              "comment": "proxy settings"
            },
            {
              "name": "custom_headers",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "extra HTTP headers to use in this connection"
            }
          ],
          "comment": [
            "Open a connection to a remote",
            "The transport is selected based on the URL. The direction argument\n is due to a limitation of the git protocol (over TCP or SSH) which\n starts up a specific binary which can only do the one or the other."
          ],
          "group": "remote"
        },
        "git_remote_ls": {
          "kind": "function",
          "name": "git_remote_ls",
          "location": {
            "file": "remote.h",
            "line": 361,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "const git_remote_head ***",
              "direction": "in",
              "comment": "pointer to the array"
            },
            {
              "name": "size",
              "type": "size_t *",
              "direction": "in",
              "comment": "the number of remote heads"
            },
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Get the remote repository's reference advertisement list",
            "Get the list of references with which the server responds to a new\n connection.",
            "The remote (or more exactly its transport) must have connected to\n the remote repository. This list is available as soon as the\n connection to the remote is initiated and it remains available\n after disconnecting.",
            "The memory belongs to the remote. The pointer will be valid as long\n as a new connection is not initiated, but it is recommended that\n you make a copy in order to make use of the data."
          ],
          "group": "remote"
        },
        "git_remote_connected": {
          "kind": "function",
          "name": "git_remote_connected",
          "location": {
            "file": "remote.h",
            "line": 372,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if it's connected, 0 otherwise."
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Check whether the remote is connected",
            "Check whether the remote's underlying transport is connected to the\n remote host."
          ],
          "group": "remote"
        },
        "git_remote_stop": {
          "kind": "function",
          "name": "git_remote_stop",
          "location": {
            "file": "remote.h",
            "line": 383,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Cancel the operation",
            "At certain points in its operation, the network code checks whether\n the operation has been cancelled and if so stops the operation."
          ],
          "group": "remote"
        },
        "git_remote_disconnect": {
          "kind": "function",
          "name": "git_remote_disconnect",
          "location": {
            "file": "remote.h",
            "line": 393,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to disconnect from"
            }
          ],
          "comment": [
            "Disconnect from the remote",
            "Close the connection to the remote."
          ],
          "group": "remote"
        },
        "git_remote_free": {
          "kind": "function",
          "name": "git_remote_free",
          "location": {
            "file": "remote.h",
            "line": 403,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to free"
            }
          ],
          "comment": [
            "Free the memory associated with a remote",
            "This also disconnects from the remote, if the connection\n has not been closed yet (using git_remote_disconnect)."
          ],
          "group": "remote"
        },
        "git_remote_list": {
          "kind": "function",
          "name": "git_remote_list",
          "location": {
            "file": "remote.h",
            "line": 414,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "a string array which receives the names of the remotes"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to query"
            }
          ],
          "comment": [
            "Get a list of the configured remotes for a repo",
            "The string array must be freed by the user."
          ],
          "group": "remote"
        },
        "git_remote_completion_t": {
          "kind": "enum",
          "name": "git_remote_completion_t",
          "referenceName": "git_remote_completion_t",
          "members": [
            {
              "name": "GIT_REMOTE_COMPLETION_DOWNLOAD"
            },
            {
              "name": "GIT_REMOTE_COMPLETION_INDEXING"
            },
            {
              "name": "GIT_REMOTE_COMPLETION_ERROR"
            }
          ],
          "comment": [
            "Argument to the completion callback which tells it which operation\n finished."
          ],
          "location": {
            "file": "remote.h",
            "line": 420,
            "column": 14
          },
          "group": "remote"
        },
        "git_push_transfer_progress_cb": {
          "kind": "callback",
          "name": "git_push_transfer_progress_cb",
          "type": "int (*)(unsigned int, unsigned int, size_t, void *)",
          "comment": [
            "Push network progress notification function"
          ],
          "location": {
            "file": "remote.h",
            "line": 427,
            "column": 26
          },
          "params": [
            {
              "type": "unsigned int"
            },
            {
              "type": "unsigned int"
            },
            {
              "type": "size_t"
            },
            {
              "type": "void *"
            }
          ],
          "group": "remote",
          "typedef": true
        },
        "git_push_update": {
          "kind": "struct",
          "name": "git_push_update",
          "referenceName": "git_push_update",
          "comment": [
            "Represents an update which will be performed on the remote during push"
          ],
          "members": [
            {
              "name": "src_refname",
              "type": "char *",
              "comment": [
                "The source name of the reference"
              ]
            },
            {
              "name": "dst_refname",
              "type": "char *",
              "comment": [
                "The name of the reference to update on the server"
              ]
            },
            {
              "name": "src",
              "type": "git_oid",
              "comment": [
                "The current target of the reference"
              ],
              "referenceType": "struct git_oid"
            },
            {
              "name": "dst",
              "type": "git_oid",
              "comment": [
                "The new target for the reference"
              ],
              "referenceType": "struct git_oid"
            }
          ],
          "location": {
            "file": "remote.h",
            "line": 436,
            "column": 9
          },
          "group": "remote",
          "parameterTo": [
            "git_push_negotiation"
          ]
        },
        "git_push_negotiation": {
          "kind": "callback",
          "name": "git_push_negotiation",
          "type": "int (*)(const git_push_update **, size_t, void *)",
          "comment": [
            "Callback used to inform of upcoming updates."
          ],
          "location": {
            "file": "remote.h",
            "line": 463,
            "column": 26
          },
          "params": [
            {
              "name": "updates",
              "direction": "in",
              "comment": "an array containing the updates which will be sent\n as commands to the destination.",
              "type": "const git_push_update **"
            },
            {
              "name": "len",
              "direction": "in",
              "comment": "number of elements in `updates`",
              "type": "size_t"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload provided by the caller",
              "type": "void *"
            }
          ],
          "group": "remote",
          "typedef": true
        },
        "git_push_update_reference_cb": {
          "kind": "callback",
          "name": "git_push_update_reference_cb",
          "type": "int (*)(const char *, const char *, void *)",
          "comment": [
            "Callback used to inform of the update status from the remote.",
            "Called for each updated reference on push. If `status` is\n not `NULL`, the update was rejected by the remote server\n and `status` contains the reason given."
          ],
          "location": {
            "file": "remote.h",
            "line": 477,
            "column": 26
          },
          "params": [
            {
              "name": "refname",
              "direction": "in",
              "comment": "refname specifying to the remote ref",
              "type": "const char *"
            },
            {
              "name": "status",
              "direction": "in",
              "comment": "status message sent from the remote",
              "type": "const char *"
            },
            {
              "name": "data",
              "direction": "in",
              "comment": "data provided by the caller",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0 on success, otherwise an error",
            "type": "int"
          },
          "group": "remote",
          "typedef": true
        },
        "git_url_resolve_cb": {
          "kind": "callback",
          "name": "git_url_resolve_cb",
          "type": "int (*)(git_buf *, const char *, int, void *)",
          "comment": [
            "Callback to resolve URLs before connecting to remote",
            "If you return GIT_PASSTHROUGH, you don't need to write anything to\n url_resolved."
          ],
          "location": {
            "file": "remote.h",
            "line": 491,
            "column": 26
          },
          "params": [
            {
              "name": "url_resolved",
              "direction": "in",
              "comment": "The buffer to write the resolved URL to",
              "type": "git_buf *"
            },
            {
              "name": "url",
              "direction": "in",
              "comment": "The URL to resolve",
              "type": "const char *"
            },
            {
              "name": "direction",
              "direction": "in",
              "comment": "GIT_DIRECTION_FETCH or GIT_DIRECTION_PUSH",
              "type": "int"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload provided by the caller",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0 on success, GIT_PASSTHROUGH or an error",
            "type": "int"
          },
          "group": "remote",
          "typedef": true
        },
        "git_remote_callbacks": {
          "kind": "struct",
          "name": "git_remote_callbacks",
          "referenceName": "struct git_remote_callbacks",
          "comment": [
            "The callback settings structure",
            "Set the callbacks to be called by the remote when informing the user\n about the progress of the network operations."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The version"
              ]
            },
            {
              "name": "sideband_progress",
              "type": "git_transport_message_cb",
              "comment": [
                "Textual progress from the remote. Text send over the\n progress side-band will be passed to this function (this is\n the 'counting objects' output)."
              ],
              "referenceType": "int (*)(const char *, int, void *)"
            },
            {
              "name": "completion",
              "type": "int (*)(git_remote_completion_t, void *)",
              "comment": [
                "Completion is called when different parts of the download\n process are done (currently unused)."
              ]
            },
            {
              "name": "credentials",
              "type": "git_credential_acquire_cb",
              "comment": [
                "This will be called if the remote host requires\n authentication in order to connect to it.",
                "Returning GIT_PASSTHROUGH will make libgit2 behave as\n though this field isn't set."
              ],
              "referenceType": "int (*)(git_credential **, const char *, const char *, unsigned int, void *)"
            },
            {
              "name": "certificate_check",
              "type": "git_transport_certificate_check_cb",
              "comment": [
                "If cert verification fails, this will be called to let the\n user make the final decision of whether to allow the\n connection to proceed. Returns 0 to allow the connection\n or a negative value to indicate an error."
              ],
              "referenceType": "int (*)(git_cert *, int, const char *, void *)"
            },
            {
              "name": "transfer_progress",
              "type": "git_indexer_progress_cb",
              "comment": [
                "During the download of new data, this will be regularly\n called with the current count of progress done by the\n indexer."
              ],
              "referenceType": "int (*)(const git_indexer_progress *, void *)"
            },
            {
              "name": "update_tips",
              "type": "int (*)(const char *, const git_oid *, const git_oid *, void *)",
              "comment": [
                "Each time a reference is updated locally, this function\n will be called with information about it."
              ]
            },
            {
              "name": "pack_progress",
              "type": "git_packbuilder_progress",
              "comment": [
                "Function to call with progress information during pack\n building. Be aware that this is called inline with pack\n building operations, so performance may be affected."
              ],
              "referenceType": "int (*)(int, uint32_t, uint32_t, void *)"
            },
            {
              "name": "push_transfer_progress",
              "type": "git_push_transfer_progress_cb",
              "comment": [
                "Function to call with progress information during the\n upload portion of a push. Be aware that this is called\n inline with pack building operations, so performance may be\n affected."
              ],
              "referenceType": "int (*)(unsigned int, unsigned int, size_t, void *)"
            },
            {
              "name": "push_update_reference",
              "type": "git_push_update_reference_cb",
              "comment": [
                "See documentation of git_push_update_reference_cb"
              ],
              "referenceType": "int (*)(const char *, const char *, void *)"
            },
            {
              "name": "push_negotiation",
              "type": "git_push_negotiation",
              "comment": [
                "Called once between the negotiation step and the upload. It\n provides information about what updates will be performed."
              ],
              "referenceType": "int (*)(const git_push_update **, size_t, void *)"
            },
            {
              "name": "transport",
              "type": "git_transport_cb",
              "comment": [
                "Create the transport to use for this operation. Leave NULL\n to auto-detect."
              ],
              "referenceType": "int (*)(git_transport **, git_remote *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "comment": [
                "This will be passed to each of the callbacks in this struct\n as the last parameter."
              ]
            },
            {
              "name": "resolve_url",
              "type": "git_url_resolve_cb",
              "comment": [
                "Resolve URL before connecting to remote.\n The returned URL will be used to connect to the remote instead."
              ],
              "referenceType": "int (*)(git_buf *, const char *, int, void *)"
            }
          ],
          "location": {
            "file": "remote.h",
            "line": 499,
            "column": 8
          },
          "group": "remote",
          "parameterTo": [
            "git_remote_connect",
            "git_remote_init_callbacks",
            "git_remote_update_tips",
            "git_remote_prune"
          ]
        },
        "GIT_REMOTE_CALLBACKS_VERSION": {
          "kind": "macro",
          "name": "GIT_REMOTE_CALLBACKS_VERSION",
          "location": {
            "file": "remote.h",
            "line": 590,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "remote"
        },
        "GIT_REMOTE_CALLBACKS_INIT": {
          "kind": "macro",
          "name": "GIT_REMOTE_CALLBACKS_INIT",
          "location": {
            "file": "remote.h",
            "line": 591,
            "column": 9
          },
          "value": "{GIT_REMOTE_CALLBACKS_VERSION}",
          "comment": "",
          "group": "remote"
        },
        "git_remote_init_callbacks": {
          "kind": "function",
          "name": "git_remote_init_callbacks",
          "location": {
            "file": "remote.h",
            "line": 601,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_remote_callbacks *",
              "direction": "in",
              "comment": "the `git_remote_callbacks` struct to initialize"
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Version of struct; pass `GIT_REMOTE_CALLBACKS_VERSION`"
            }
          ],
          "comment": [
            "Initializes a `git_remote_callbacks` with default values. Equivalent to\n creating an instance with GIT_REMOTE_CALLBACKS_INIT."
          ],
          "group": "remote"
        },
        "git_fetch_prune_t": {
          "kind": "enum",
          "name": "git_fetch_prune_t",
          "referenceName": "git_fetch_prune_t",
          "members": [
            {
              "name": "GIT_FETCH_PRUNE_UNSPECIFIED",
              "comment": [
                "Use the setting from the configuration"
              ]
            },
            {
              "name": "GIT_FETCH_PRUNE",
              "comment": [
                "Force pruning on"
              ]
            },
            {
              "name": "GIT_FETCH_NO_PRUNE",
              "comment": [
                "Force pruning off"
              ]
            }
          ],
          "comment": [
            "Acceptable prune settings when fetching"
          ],
          "location": {
            "file": "remote.h",
            "line": 606,
            "column": 9
          },
          "group": "remote"
        },
        "git_remote_autotag_option_t": {
          "kind": "enum",
          "name": "git_remote_autotag_option_t",
          "referenceName": "git_remote_autotag_option_t",
          "members": [
            {
              "name": "GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED",
              "value": "0",
              "comment": [
                "Use the setting from the configuration."
              ]
            },
            {
              "name": "GIT_REMOTE_DOWNLOAD_TAGS_AUTO",
              "comment": [
                "Ask the server for tags pointing to objects we're already\n downloading."
              ]
            },
            {
              "name": "GIT_REMOTE_DOWNLOAD_TAGS_NONE",
              "comment": [
                "Don't ask for any tags beyond the refspecs."
              ]
            },
            {
              "name": "GIT_REMOTE_DOWNLOAD_TAGS_ALL",
              "comment": [
                "Ask for the all the tags."
              ]
            }
          ],
          "comment": [
            "Automatic tag following option",
            "Lets us select the --tags option to use."
          ],
          "location": {
            "file": "remote.h",
            "line": 626,
            "column": 9
          },
          "group": "remote",
          "returnedBy": [
            "git_remote_autotag"
          ],
          "parameterTo": [
            "git_remote_update_tips",
            "git_remote_set_autotag"
          ]
        },
        "git_fetch_options": {
          "kind": "struct",
          "name": "git_fetch_options",
          "referenceName": "git_fetch_options",
          "comment": [
            "Fetch options structure.",
            "Zero out for defaults.  Initialize with `GIT_FETCH_OPTIONS_INIT` macro to\n correctly set the `version` field.  E.g.",
            "git_fetch_options opts = GIT_FETCH_OPTIONS_INIT;"
          ],
          "members": [
            {
              "name": "version",
              "type": "int"
            },
            {
              "name": "callbacks",
              "type": "git_remote_callbacks",
              "comment": [
                "Callbacks to use for this fetch operation"
              ],
              "referenceType": "struct git_remote_callbacks"
            },
            {
              "name": "prune",
              "type": "git_fetch_prune_t",
              "comment": [
                "Whether to perform a prune after the fetch"
              ],
              "referenceType": "enum git_fetch_prune_t"
            },
            {
              "name": "update_fetchhead",
              "type": "int",
              "comment": [
                "Whether to write the results to FETCH_HEAD. Defaults to\n on. Leave this default in order to behave like git."
              ]
            },
            {
              "name": "download_tags",
              "type": "git_remote_autotag_option_t",
              "comment": [
                "Determines how to behave regarding tags on the remote, such\n as auto-downloading tags for objects we're downloading or\n downloading all of them.",
                "The default is to auto-follow tags."
              ],
              "referenceType": "enum git_remote_autotag_option_t"
            },
            {
              "name": "proxy_opts",
              "type": "git_proxy_options",
              "comment": [
                "Proxy options to use, by default no proxy is used."
              ],
              "referenceType": "struct git_proxy_options"
            },
            {
              "name": "custom_headers",
              "type": "git_strarray",
              "comment": [
                "Extra headers for this fetch operation"
              ],
              "referenceType": "struct git_strarray"
            }
          ],
          "location": {
            "file": "remote.h",
            "line": 654,
            "column": 9
          },
          "group": "remote",
          "parameterTo": [
            "git_fetch_init_options",
            "git_fetch_options_init",
            "git_remote_download",
            "git_remote_fetch"
          ]
        },
        "GIT_FETCH_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_FETCH_OPTIONS_VERSION",
          "location": {
            "file": "remote.h",
            "line": 693,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "remote"
        },
        "GIT_FETCH_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_FETCH_OPTIONS_INIT",
          "location": {
            "file": "remote.h",
            "line": 695,
            "column": 9
          },
          "value": "{ GIT_FETCH_OPTIONS_VERSION, GIT_REMOTE_CALLBACKS_INIT, GIT_FETCH_PRUNE_UNSPECIFIED, 1, GIT_REMOTE_DOWNLOAD_TAGS_UNSPECIFIED, GIT_PROXY_OPTIONS_INIT }",
          "comment": "",
          "group": "remote"
        },
        "git_fetch_options_init": {
          "kind": "function",
          "name": "git_fetch_options_init",
          "location": {
            "file": "remote.h",
            "line": 707,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_fetch_options *",
              "direction": "in",
              "comment": "The `git_fetch_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_FETCH_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_fetch_options structure",
            "Initializes a `git_fetch_options` with default values. Equivalent to\n creating an instance with `GIT_FETCH_OPTIONS_INIT`."
          ],
          "group": "remote"
        },
        "git_push_options": {
          "kind": "struct",
          "name": "git_push_options",
          "referenceName": "git_push_options",
          "comment": [
            "Controls the behavior of a git_push object."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "pb_parallelism",
              "type": "unsigned int",
              "comment": [
                "If the transport being used to push to the remote requires the creation\n of a pack file, this controls the number of worker threads used by\n the packbuilder when creating that pack file to be sent to the remote.",
                "If set to 0, the packbuilder will auto-detect the number of threads\n to create. The default value is 1."
              ]
            },
            {
              "name": "callbacks",
              "type": "git_remote_callbacks",
              "comment": [
                "Callbacks to use for this push operation"
              ],
              "referenceType": "struct git_remote_callbacks"
            },
            {
              "name": "proxy_opts",
              "type": "git_proxy_options",
              "comment": [
                "Proxy options to use, by default no proxy is used."
              ],
              "referenceType": "struct git_proxy_options"
            },
            {
              "name": "custom_headers",
              "type": "git_strarray",
              "comment": [
                "Extra headers for this push operation"
              ],
              "referenceType": "struct git_strarray"
            }
          ],
          "location": {
            "file": "remote.h",
            "line": 715,
            "column": 9
          },
          "group": "remote",
          "parameterTo": [
            "git_push_init_options",
            "git_push_options_init",
            "git_remote_upload",
            "git_remote_push"
          ]
        },
        "GIT_PUSH_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_PUSH_OPTIONS_VERSION",
          "location": {
            "file": "remote.h",
            "line": 744,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "remote"
        },
        "GIT_PUSH_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_PUSH_OPTIONS_INIT",
          "location": {
            "file": "remote.h",
            "line": 745,
            "column": 9
          },
          "value": "{ GIT_PUSH_OPTIONS_VERSION, 1, GIT_REMOTE_CALLBACKS_INIT, GIT_PROXY_OPTIONS_INIT }",
          "comment": "",
          "group": "remote"
        },
        "git_push_options_init": {
          "kind": "function",
          "name": "git_push_options_init",
          "location": {
            "file": "remote.h",
            "line": 757,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_push_options *",
              "direction": "in",
              "comment": "The `git_push_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_PUSH_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_push_options structure",
            "Initializes a `git_push_options` with default values. Equivalent to\n creating an instance with `GIT_PUSH_OPTIONS_INIT`."
          ],
          "group": "remote"
        },
        "git_remote_download": {
          "kind": "function",
          "name": "git_remote_download",
          "location": {
            "file": "remote.h",
            "line": 777,
            "column": 18
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            },
            {
              "name": "refspecs",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "the refspecs to use for this negotiation and\n download. Use NULL or an empty array to use the base refspecs"
            },
            {
              "name": "opts",
              "type": "const git_fetch_options *",
              "direction": "in",
              "comment": "the options to use for this fetch"
            }
          ],
          "comment": [
            "Download and index the packfile",
            "Connect to the remote if it hasn't been done yet, negotiate with\n the remote git which objects are missing, download and index the\n packfile.",
            "The .idx file will be created and both it and the packfile with be\n renamed to their final name."
          ],
          "group": "remote"
        },
        "git_remote_upload": {
          "kind": "function",
          "name": "git_remote_upload",
          "location": {
            "file": "remote.h",
            "line": 791,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            },
            {
              "name": "refspecs",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "the refspecs to use for this negotiation and\n upload. Use NULL or an empty array to use the base refspecs"
            },
            {
              "name": "opts",
              "type": "const git_push_options *",
              "direction": "in",
              "comment": "the options to use for this push"
            }
          ],
          "comment": [
            "Create a packfile and send it to the server",
            "Connect to the remote if it hasn't been done yet, negotiate with\n the remote git which objects are missing, create a packfile with the missing objects and send it."
          ],
          "group": "remote"
        },
        "git_remote_update_tips": {
          "kind": "function",
          "name": "git_remote_update_tips",
          "location": {
            "file": "remote.h",
            "line": 807,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to update"
            },
            {
              "name": "callbacks",
              "type": "const git_remote_callbacks *",
              "direction": "in",
              "comment": "pointer to the callback structure to use"
            },
            {
              "name": "update_fetchhead",
              "type": "int",
              "direction": "in",
              "comment": "whether to write to FETCH_HEAD. Pass 1 to behave like git."
            },
            {
              "name": "download_tags",
              "type": "git_remote_autotag_option_t",
              "direction": "in",
              "comment": "what the behaviour for downloading tags is for this fetch. This is\n ignored for push. This must be the same value passed to `git_remote_download()`.",
              "referenceType": "enum git_remote_autotag_option_t"
            },
            {
              "name": "reflog_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The message to insert into the reflogs. If\n NULL and fetching, the default is \"fetch <name>\", where \n<name> is\n the name of the remote (or its url, for in-memory remotes). This\n parameter is ignored when pushing."
            }
          ],
          "comment": [
            "Update the tips to the new state"
          ],
          "group": "remote"
        },
        "git_remote_fetch": {
          "kind": "function",
          "name": "git_remote_fetch",
          "location": {
            "file": "remote.h",
            "line": 828,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to fetch from"
            },
            {
              "name": "refspecs",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "the refspecs to use for this fetch. Pass NULL or an\n                 empty array to use the base refspecs."
            },
            {
              "name": "opts",
              "type": "const git_fetch_options *",
              "direction": "in",
              "comment": "options to use for this fetch"
            },
            {
              "name": "reflog_message",
              "type": "const char *",
              "direction": "in",
              "comment": "The message to insert into the reflogs. If NULL, the\n\t\t\t\t\t\t\t\t default is \"fetch\""
            }
          ],
          "comment": [
            "Download new data and update tips",
            "Convenience function to connect to a remote, download the data,\n disconnect and update the remote-tracking branches."
          ],
          "group": "remote"
        },
        "git_remote_prune": {
          "kind": "function",
          "name": "git_remote_prune",
          "location": {
            "file": "remote.h",
            "line": 841,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to prune"
            },
            {
              "name": "callbacks",
              "type": "const git_remote_callbacks *",
              "direction": "in",
              "comment": "callbacks to use for this prune"
            }
          ],
          "comment": [
            "Prune tracking refs that are no longer present on remote"
          ],
          "group": "remote"
        },
        "git_remote_push": {
          "kind": "function",
          "name": "git_remote_push",
          "location": {
            "file": "remote.h",
            "line": 853,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote to push to"
            },
            {
              "name": "refspecs",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "the refspecs to use for pushing. If NULL or an empty\n                 array, the configured refspecs will be used"
            },
            {
              "name": "opts",
              "type": "const git_push_options *",
              "direction": "in",
              "comment": "options to use for this push"
            }
          ],
          "comment": [
            "Perform a push",
            "Peform all the steps from a push."
          ],
          "group": "remote"
        },
        "git_remote_stats": {
          "kind": "function",
          "name": "git_remote_stats",
          "location": {
            "file": "remote.h",
            "line": 860,
            "column": 42
          },
          "returns": {
            "type": "const git_indexer_progress *"
          },
          "params": [
            {
              "name": "remote",
              "type": "git_remote *"
            }
          ],
          "comment": [
            "Get the statistics structure that is filled in by the fetch operation."
          ],
          "group": "remote"
        },
        "git_remote_autotag": {
          "kind": "function",
          "name": "git_remote_autotag",
          "location": {
            "file": "remote.h",
            "line": 868,
            "column": 41
          },
          "returns": {
            "type": "git_remote_autotag_option_t",
            "comment": "the auto-follow setting"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote to query"
            }
          ],
          "comment": [
            "Retrieve the tag auto-follow setting"
          ],
          "group": "remote"
        },
        "git_remote_set_autotag": {
          "kind": "function",
          "name": "git_remote_set_autotag",
          "location": {
            "file": "remote.h",
            "line": 880,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to make the change"
            },
            {
              "name": "remote",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the remote"
            },
            {
              "name": "value",
              "type": "git_remote_autotag_option_t",
              "direction": "in",
              "comment": "the new value to take.",
              "referenceType": "enum git_remote_autotag_option_t"
            }
          ],
          "comment": [
            "Set the remote's tag following setting.",
            "The change will be made in the configuration. No loaded remotes\n will be affected."
          ],
          "group": "remote"
        },
        "git_remote_prune_refs": {
          "kind": "function",
          "name": "git_remote_prune_refs",
          "location": {
            "file": "remote.h",
            "line": 887,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the ref-prune setting"
          },
          "params": [
            {
              "name": "remote",
              "type": "const git_remote *",
              "direction": "in",
              "comment": "the remote to query"
            }
          ],
          "comment": [
            "Retrieve the ref-prune setting"
          ],
          "group": "remote"
        },
        "git_remote_rename": {
          "kind": "function",
          "name": "git_remote_rename",
          "location": {
            "file": "remote.h",
            "line": 909,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code"
          },
          "params": [
            {
              "name": "problems",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "non-default refspecs cannot be renamed and will be\n stored here for further processing by the caller. Always free this\n strarray on successful return."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to rename"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the current name of the remote"
            },
            {
              "name": "new_name",
              "type": "const char *",
              "direction": "in",
              "comment": "the new name the remote should bear"
            }
          ],
          "comment": [
            "Give the remote a new name",
            "All remote-tracking branches and configuration settings\n for the remote are updated.",
            "The new name will be checked for validity.\n See `git_tag_create()` for rules about valid names.",
            "No loaded instances of a the remote with the old name will change\n their name or their list of refspecs."
          ],
          "group": "remote"
        },
        "git_remote_is_valid_name": {
          "kind": "function",
          "name": "git_remote_is_valid_name",
          "location": {
            "file": "remote.h",
            "line": 921,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the reference name is acceptable; 0 if it isn't"
          },
          "params": [
            {
              "name": "remote_name",
              "type": "const char *",
              "direction": "in",
              "comment": "name to be checked."
            }
          ],
          "comment": [
            "Ensure the remote name is well-formed."
          ],
          "group": "remote"
        },
        "git_remote_delete": {
          "kind": "function",
          "name": "git_remote_delete",
          "location": {
            "file": "remote.h",
            "line": 933,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to act"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the remote to delete"
            }
          ],
          "comment": [
            "Delete an existing persisted remote.",
            "All remote-tracking branches and configuration settings\n for the remote will be removed."
          ],
          "group": "remote"
        },
        "git_remote_default_branch": {
          "kind": "function",
          "name": "git_remote_default_branch",
          "location": {
            "file": "remote.h",
            "line": 951,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if the remote does not have any references\n or none of them point to HEAD's commit, or an error message."
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "the buffern in which to store the reference name"
            },
            {
              "name": "remote",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the remote"
            }
          ],
          "comment": [
            "Retrieve the name of the remote's default branch",
            "The default branch of a repository is the branch which HEAD points\n to. If the remote does not support reporting this information\n directly, it performs the guess as git does; that is, if there are\n multiple branches which point to the same commit, the first one is\n chosen. If the master branch is a candidate, it wins.",
            "This function must only be called after connecting."
          ],
          "group": "remote"
        },
        "git_remote": {
          "kind": "struct",
          "name": "git_remote",
          "referenceName": "struct git_remote",
          "opaque": true,
          "comment": [
            "Git's idea of a remote repository. A remote can be anonymous (in\n which case it does not have backing configuration entires)."
          ],
          "location": {
            "file": "types.h",
            "line": 232,
            "column": 27
          },
          "group": "remote",
          "parameterTo": [
            "git_remote_create_cb",
            "git_remote_create",
            "git_remote_create_with_opts",
            "git_remote_create_with_fetchspec",
            "git_remote_create_anonymous",
            "git_remote_create_detached",
            "git_remote_lookup",
            "git_remote_dup",
            "git_remote_owner",
            "git_remote_name",
            "git_remote_url",
            "git_remote_pushurl",
            "git_remote_get_fetch_refspecs",
            "git_remote_get_push_refspecs",
            "git_remote_refspec_count",
            "git_remote_get_refspec",
            "git_remote_connect",
            "git_remote_ls",
            "git_remote_connected",
            "git_remote_stop",
            "git_remote_disconnect",
            "git_remote_free",
            "git_remote_download",
            "git_remote_upload",
            "git_remote_update_tips",
            "git_remote_fetch",
            "git_remote_prune",
            "git_remote_push",
            "git_remote_stats",
            "git_remote_autotag",
            "git_remote_prune_refs",
            "git_remote_default_branch",
            "git_transport_cb",
            "git_transport_new",
            "git_transport_ssh_with_paths",
            "git_transport_dummy",
            "git_transport_local",
            "git_transport_smart"
          ]
        },
        "git_push": {
          "kind": "struct",
          "name": "git_push",
          "referenceName": "struct git_push",
          "opaque": true,
          "comment": [
            "Preparation for a push operation. Can be used to configure what to\n push and the level of parallelism of the packfile builder."
          ],
          "location": {
            "file": "types.h",
            "line": 244,
            "column": 25
          },
          "group": "remote"
        }
      },
      "info": {
        "summary": "Git remote management functions"
      }
    },
    "repository": {
      "apis": {
        "git_repository_open": {
          "kind": "function",
          "name": "git_repository_open",
          "location": {
            "file": "repository.h",
            "line": 37,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be opened"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the repository"
            }
          ],
          "comment": [
            "Open a git repository.",
            "The 'path' argument must point to either a git repository\n folder, or an existing work dir.",
            "The method will automatically detect if 'path' is a normal\n or bare repository or fail is 'path' is neither."
          ],
          "group": "repository"
        },
        "git_repository_open_from_worktree": {
          "kind": "function",
          "name": "git_repository_open_from_worktree",
          "location": {
            "file": "repository.h",
            "line": 48,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "Output pointer containing opened repository"
            },
            {
              "name": "wt",
              "type": "git_worktree *",
              "direction": "in",
              "comment": "Working tree to open"
            }
          ],
          "comment": [
            "Open working tree as a repository",
            "Open the working directory of the working tree as a normal\n repository that can then be worked on."
          ],
          "group": "repository"
        },
        "git_repository_wrap_odb": {
          "kind": "function",
          "name": "git_repository_wrap_odb",
          "location": {
            "file": "repository.h",
            "line": 61,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo"
            },
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "the object database to wrap"
            }
          ],
          "comment": [
            "Create a \"fake\" repository to wrap an object database",
            "Create a repository object to wrap an object database to be used\n with the API when all you have is an object database. This doesn't\n have any paths associated with it, so use with care."
          ],
          "group": "repository"
        },
        "git_repository_discover": {
          "kind": "function",
          "name": "git_repository_discover",
          "location": {
            "file": "repository.h",
            "line": 89,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "A pointer to a user-allocated git_buf which will contain\n the found path."
            },
            {
              "name": "start_path",
              "type": "const char *",
              "direction": "in",
              "comment": "The base path where the lookup starts."
            },
            {
              "name": "across_fs",
              "type": "int",
              "direction": "in",
              "comment": "If true, then the lookup will not stop when a\n filesystem device change is detected while exploring parent directories."
            },
            {
              "name": "ceiling_dirs",
              "type": "const char *",
              "direction": "in",
              "comment": "A GIT_PATH_LIST_SEPARATOR separated list of\n absolute symbolic link free paths. The lookup will stop when any\n of this paths is reached. Note that the lookup always performs on\n start_path no matter start_path appears in ceiling_dirs ceiling_dirs\n might be NULL (which is equivalent to an empty string)"
            }
          ],
          "comment": [
            "Look for a git repository and copy its path in the given buffer.\n The lookup start from base_path and walk across parent directories\n if nothing has been found. The lookup ends when the first repository\n is found, or when reaching a directory referenced in ceiling_dirs\n or when the filesystem changes (in case across_fs is true).",
            "The method will automatically detect if the repository is bare\n (if there is a repository)."
          ],
          "group": "repository"
        },
        "git_repository_open_flag_t": {
          "kind": "enum",
          "name": "git_repository_open_flag_t",
          "referenceName": "git_repository_open_flag_t",
          "members": [
            {
              "name": "GIT_REPOSITORY_OPEN_NO_SEARCH",
              "value": "1",
              "comment": [
                "Only open the repository if it can be immediately found in the\n start_path. Do not walk up from the start_path looking at parent\n directories."
              ]
            },
            {
              "name": "GIT_REPOSITORY_OPEN_CROSS_FS",
              "value": "2",
              "comment": [
                "Unless this flag is set, open will not continue searching across\n filesystem boundaries (i.e. when `st_dev` changes from the `stat`\n system call).  For example, searching in a user's home directory at\n \"/home/user/source/\" will not return \"/.git/\" as the found repo if\n \"/\" is a different filesystem than \"/home\"."
              ]
            },
            {
              "name": "GIT_REPOSITORY_OPEN_BARE",
              "value": "4",
              "comment": [
                "Open repository as a bare repo regardless of core.bare config, and\n defer loading config file for faster setup.\n Unlike `git_repository_open_bare`, this can follow gitlinks."
              ]
            },
            {
              "name": "GIT_REPOSITORY_OPEN_NO_DOTGIT",
              "value": "8",
              "comment": [
                "Do not check for a repository by appending /.git to the start_path;\n only open the repository if start_path itself points to the git\n directory."
              ]
            },
            {
              "name": "GIT_REPOSITORY_OPEN_FROM_ENV",
              "value": "16",
              "comment": [
                "Find and open a git repository, respecting the environment variables\n used by the git command-line tools.\n If set, `git_repository_open_ext` will ignore the other flags and\n the `ceiling_dirs` argument, and will allow a NULL `path` to use\n `GIT_DIR` or search from the current directory.\n The search for a repository will respect $GIT_CEILING_DIRECTORIES and\n $GIT_DISCOVERY_ACROSS_FILESYSTEM.  The opened repository will\n respect $GIT_INDEX_FILE, $GIT_NAMESPACE, $GIT_OBJECT_DIRECTORY, and\n $GIT_ALTERNATE_OBJECT_DIRECTORIES.\n In the future, this flag will also cause `git_repository_open_ext`\n to respect $GIT_WORK_TREE and $GIT_COMMON_DIR; currently,\n `git_repository_open_ext` with this flag will error out if either\n $GIT_WORK_TREE or $GIT_COMMON_DIR is set."
              ]
            }
          ],
          "comment": [
            "Option flags for `git_repository_open_ext`."
          ],
          "location": {
            "file": "repository.h",
            "line": 98,
            "column": 9
          },
          "group": "repository"
        },
        "git_repository_open_ext": {
          "kind": "function",
          "name": "git_repository_open_ext",
          "location": {
            "file": "repository.h",
            "line": 165,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if no repository could be found,\n        or -1 if there was a repository but open failed for some reason\n        (such as repo corruption or system errors)."
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "Pointer to the repo which will be opened.  This can\n        actually be NULL if you only want to use the error code to\n        see if a repo at this path could be opened."
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to open as git repository.  If the flags\n        permit \"searching\", then this can be a path to a subdirectory\n        inside the working directory of the repository. May be NULL if\n        flags is GIT_REPOSITORY_OPEN_FROM_ENV."
            },
            {
              "name": "flags",
              "type": "unsigned int",
              "direction": "in",
              "comment": "A combination of the GIT_REPOSITORY_OPEN flags above."
            },
            {
              "name": "ceiling_dirs",
              "type": "const char *",
              "direction": "in",
              "comment": "A GIT_PATH_LIST_SEPARATOR delimited list of path\n        prefixes at which the search for a containing repository should\n        terminate."
            }
          ],
          "comment": [
            "Find and open a repository with extended controls."
          ],
          "group": "repository"
        },
        "git_repository_open_bare": {
          "kind": "function",
          "name": "git_repository_open_bare",
          "location": {
            "file": "repository.h",
            "line": 182,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "Pointer to the repo which will be opened."
            },
            {
              "name": "bare_path",
              "type": "const char *",
              "direction": "in",
              "comment": "Direct path to the bare repository"
            }
          ],
          "comment": [
            "Open a bare repository on the serverside.",
            "This is a fast open for bare repositories that will come in handy\n if you're e.g. hosting git repositories and need to access them\n efficiently"
          ],
          "group": "repository"
        },
        "git_repository_free": {
          "kind": "function",
          "name": "git_repository_free",
          "location": {
            "file": "repository.h",
            "line": 195,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository handle to close. If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a previously allocated repository",
            "Note that after a repository is free'd, all the objects it has spawned\n will still exist until they are manually closed by the user\n with `git_object_free`, but accessing any of the attributes of\n an object without a backing repository will result in undefined\n behavior"
          ],
          "group": "repository"
        },
        "git_repository_init": {
          "kind": "function",
          "name": "git_repository_init",
          "location": {
            "file": "repository.h",
            "line": 212,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "pointer to the repo which will be created or reinitialized"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "the path to the repository"
            },
            {
              "name": "is_bare",
              "type": "unsigned int",
              "direction": "in",
              "comment": "if true, a Git repository without a working directory is\n\t\tcreated at the pointed path. If false, provided path will be\n\t\tconsidered as the working directory into which the .git directory\n\t\twill be created."
            }
          ],
          "comment": [
            "Creates a new Git repository in the given folder.",
            "TODO:\n\t- Reinit the repository"
          ],
          "group": "repository"
        },
        "git_repository_init_flag_t": {
          "kind": "enum",
          "name": "git_repository_init_flag_t",
          "referenceName": "git_repository_init_flag_t",
          "members": [
            {
              "name": "GIT_REPOSITORY_INIT_BARE"
            },
            {
              "name": "GIT_REPOSITORY_INIT_NO_REINIT"
            },
            {
              "name": "GIT_REPOSITORY_INIT_NO_DOTGIT_DIR"
            },
            {
              "name": "GIT_REPOSITORY_INIT_MKDIR"
            },
            {
              "name": "GIT_REPOSITORY_INIT_MKPATH"
            },
            {
              "name": "GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE"
            },
            {
              "name": "GIT_REPOSITORY_INIT_RELATIVE_GITLINK"
            }
          ],
          "comment": [
            "Option flags for `git_repository_init_ext`.",
            "These flags configure extra behaviors to `git_repository_init_ext`.\n In every case, the default behavior is the zero value (i.e. flag is\n not set).  Just OR the flag values together for the `flags` parameter\n when initializing a new repo.  Details of individual values are:",
            "* BARE   - Create a bare repository with no working directory.\n * NO_REINIT - Return an GIT_EEXISTS error if the repo_path appears to\n        already be an git repository.\n * NO_DOTGIT_DIR - Normally a \"/.git/\" will be appended to the repo\n        path for non-bare repos (if it is not already there), but\n        passing this flag prevents that behavior.\n * MKDIR  - Make the repo_path (and workdir_path) as needed.  Init is\n        always willing to create the \".git\" directory even without this\n        flag.  This flag tells init to create the trailing component of\n        the repo and workdir paths as needed.\n * MKPATH - Recursively make all components of the repo and workdir\n        paths as necessary.\n * EXTERNAL_TEMPLATE - libgit2 normally uses internal templates to\n        initialize a new repo.  This flags enables external templates,\n        looking the \"template_path\" from the options if set, or the\n        `init.templatedir` global config if not, or falling back on\n        \"/usr/share/git-core/templates\" if it exists.\n * GIT_REPOSITORY_INIT_RELATIVE_GITLINK - If an alternate workdir is\n        specified, use relative paths for the gitdir and core.worktree."
          ],
          "location": {
            "file": "repository.h",
            "line": 245,
            "column": 9
          },
          "group": "repository"
        },
        "git_repository_init_mode_t": {
          "kind": "enum",
          "name": "git_repository_init_mode_t",
          "referenceName": "git_repository_init_mode_t",
          "members": [
            {
              "name": "GIT_REPOSITORY_INIT_SHARED_UMASK",
              "value": "0"
            },
            {
              "name": "GIT_REPOSITORY_INIT_SHARED_GROUP",
              "value": "1533"
            },
            {
              "name": "GIT_REPOSITORY_INIT_SHARED_ALL",
              "value": "1535"
            }
          ],
          "comment": [
            "Mode options for `git_repository_init_ext`.",
            "Set the mode field of the `git_repository_init_options` structure\n either to the custom mode that you would like, or to one of the\n following modes:",
            "* SHARED_UMASK - Use permissions configured by umask - the default.\n * SHARED_GROUP - Use \"--shared=group\" behavior, chmod'ing the new repo\n        to be group writable and \"g+sx\" for sticky group assignment.\n * SHARED_ALL - Use \"--shared=all\" behavior, adding world readability.\n * Anything else - Set to custom value."
          ],
          "location": {
            "file": "repository.h",
            "line": 268,
            "column": 9
          },
          "group": "repository"
        },
        "git_repository_init_options": {
          "kind": "struct",
          "name": "git_repository_init_options",
          "referenceName": "git_repository_init_options",
          "comment": [
            "Extended options structure for `git_repository_init_ext`.",
            "This contains extra options for `git_repository_init_ext` that enable\n additional initialization features.  The fields are:",
            "* flags - Combination of GIT_REPOSITORY_INIT flags above.\n * mode  - Set to one of the standard GIT_REPOSITORY_INIT_SHARED_...\n        constants above, or to a custom value that you would like.\n * workdir_path - The path to the working dir or NULL for default (i.e.\n        repo_path parent on non-bare repos).  IF THIS IS RELATIVE PATH,\n        IT WILL BE EVALUATED RELATIVE TO THE REPO_PATH.  If this is not\n        the \"natural\" working directory, a .git gitlink file will be\n        created here linking to the repo_path.\n * description - If set, this will be used to initialize the \"description\"\n        file in the repository, instead of using the template content.\n * template_path - When GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE is set,\n        this contains the path to use for the template directory.  If\n        this is NULL, the config or default directory options will be\n        used instead.\n * initial_head - The name of the head to point HEAD at.  If NULL, then\n        this will be treated as \"master\" and the HEAD ref will be set\n        to \"refs/heads/master\".  If this begins with \"refs/\" it will be\n        used verbatim; otherwise \"refs/heads/\" will be prefixed.\n * origin_url - If this is non-NULL, then after the rest of the\n        repository initialization is completed, an \"origin\" remote\n        will be added pointing to this URL."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "flags",
              "type": "uint32_t"
            },
            {
              "name": "mode",
              "type": "uint32_t"
            },
            {
              "name": "workdir_path",
              "type": "const char *"
            },
            {
              "name": "description",
              "type": "const char *"
            },
            {
              "name": "template_path",
              "type": "const char *"
            },
            {
              "name": "initial_head",
              "type": "const char *"
            },
            {
              "name": "origin_url",
              "type": "const char *"
            }
          ],
          "location": {
            "file": "repository.h",
            "line": 302,
            "column": 9
          },
          "group": "repository",
          "parameterTo": [
            "git_repository_init_init_options",
            "git_repository_init_options_init",
            "git_repository_init_ext"
          ]
        },
        "GIT_REPOSITORY_INIT_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_REPOSITORY_INIT_OPTIONS_VERSION",
          "location": {
            "file": "repository.h",
            "line": 313,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "repository"
        },
        "GIT_REPOSITORY_INIT_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_REPOSITORY_INIT_OPTIONS_INIT",
          "location": {
            "file": "repository.h",
            "line": 314,
            "column": 9
          },
          "value": "{GIT_REPOSITORY_INIT_OPTIONS_VERSION}",
          "comment": "",
          "group": "repository"
        },
        "git_repository_init_options_init": {
          "kind": "function",
          "name": "git_repository_init_options_init",
          "location": {
            "file": "repository.h",
            "line": 326,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_repository_init_options *",
              "direction": "in",
              "comment": "The `git_repository_init_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_REPOSITORY_INIT_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_repository_init_options structure",
            "Initializes a `git_repository_init_options` with default values. Equivalent to\n creating an instance with `GIT_REPOSITORY_INIT_OPTIONS_INIT`."
          ],
          "group": "repository"
        },
        "git_repository_init_ext": {
          "kind": "function",
          "name": "git_repository_init_ext",
          "location": {
            "file": "repository.h",
            "line": 343,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "Pointer to the repo which will be created or reinitialized."
            },
            {
              "name": "repo_path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to the repository."
            },
            {
              "name": "opts",
              "type": "git_repository_init_options *",
              "direction": "in",
              "comment": "Pointer to git_repository_init_options struct."
            }
          ],
          "comment": [
            "Create a new Git repository in the given folder with extended controls.",
            "This will initialize a new git repository (creating the repo_path\n if requested by flags) and working directory as needed.  It will\n auto-detect the case sensitivity of the file system and if the\n file system supports file mode bits correctly."
          ],
          "group": "repository"
        },
        "git_repository_head": {
          "kind": "function",
          "name": "git_repository_head",
          "location": {
            "file": "repository.h",
            "line": 361,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EUNBORNBRANCH when HEAD points to a non existing\n branch, GIT_ENOTFOUND when HEAD is missing; an error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to the reference which will be retrieved"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            }
          ],
          "comment": [
            "Retrieve and resolve the reference pointed at by HEAD.",
            "The returned `git_reference` will be owned by caller and\n `git_reference_free()` must be called when done with it to release the\n allocated memory and prevent a leak."
          ],
          "group": "repository"
        },
        "git_repository_head_for_worktree": {
          "kind": "function",
          "name": "git_repository_head_for_worktree",
          "location": {
            "file": "repository.h",
            "line": 371,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 when successful, error-code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to the reference which will be retrieved"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the worktree to retrieve HEAD for"
            }
          ],
          "comment": [
            "Retrieve the referenced HEAD for the worktree"
          ],
          "group": "repository"
        },
        "git_repository_head_detached": {
          "kind": "function",
          "name": "git_repository_head_detached",
          "location": {
            "file": "repository.h",
            "line": 384,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if HEAD is detached, 0 if it's not; error code if there\n was an error."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if a repository's HEAD is detached",
            "A repository's HEAD is detached when it points directly to a commit\n instead of a branch."
          ],
          "group": "repository"
        },
        "git_repository_head_detached_for_worktree": {
          "kind": "function",
          "name": "git_repository_head_detached_for_worktree",
          "location": {
            "file": "repository.h",
            "line": 397,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if HEAD is detached, 0 if its not; error code if\n  there was an error"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "a repository object"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the worktree to retrieve HEAD for"
            }
          ],
          "comment": [
            "Check if a worktree's HEAD is detached",
            "A worktree's HEAD is detached when it points directly to a\n commit instead of a branch."
          ],
          "group": "repository"
        },
        "git_repository_head_unborn": {
          "kind": "function",
          "name": "git_repository_head_unborn",
          "location": {
            "file": "repository.h",
            "line": 410,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the current branch is unborn, 0 if it's not; error\n code if there was an error"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if the current branch is unborn",
            "An unborn branch is one named from HEAD but which doesn't exist in\n the refs namespace, because it doesn't have any commit to point to."
          ],
          "group": "repository"
        },
        "git_repository_is_empty": {
          "kind": "function",
          "name": "git_repository_is_empty",
          "location": {
            "file": "repository.h",
            "line": 422,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the repository is empty, 0 if it isn't, error code\n if the repository is corrupted"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if a repository is empty",
            "An empty repository has just been initialized and contains no references\n apart from HEAD, which must be pointing to the unborn master branch."
          ],
          "group": "repository"
        },
        "git_repository_item_t": {
          "kind": "enum",
          "name": "git_repository_item_t",
          "referenceName": "git_repository_item_t",
          "members": [
            {
              "name": "GIT_REPOSITORY_ITEM_GITDIR"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_WORKDIR"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_COMMONDIR"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_INDEX"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_OBJECTS"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_REFS"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_PACKED_REFS"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_REMOTES"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_CONFIG"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_INFO"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_HOOKS"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_LOGS"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_MODULES"
            },
            {
              "name": "GIT_REPOSITORY_ITEM_WORKTREES"
            },
            {
              "name": "GIT_REPOSITORY_ITEM__LAST"
            }
          ],
          "comment": [
            "List of items which belong to the git repository layout"
          ],
          "location": {
            "file": "repository.h",
            "line": 427,
            "column": 9
          },
          "group": "repository",
          "parameterTo": [
            "git_repository_item_path"
          ]
        },
        "git_repository_item_path": {
          "kind": "function",
          "name": "git_repository_item_path",
          "location": {
            "file": "repository.h",
            "line": 459,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if the path cannot exist or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Buffer to store the path at"
            },
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "Repository to get path for"
            },
            {
              "name": "item",
              "type": "git_repository_item_t",
              "direction": "in",
              "comment": "The repository item for which to retrieve the path",
              "referenceType": "enum git_repository_item_t"
            }
          ],
          "comment": [
            "Get the location of a specific repository file or directory",
            "This function will retrieve the path of a specific repository\n item. It will thereby honor things like the repository's\n common directory, gitdir, etc. In case a file path cannot\n exist for a given item (e.g. the working directory of a bare\n repository), GIT_ENOTFOUND is returned."
          ],
          "group": "repository"
        },
        "git_repository_path": {
          "kind": "function",
          "name": "git_repository_path",
          "location": {
            "file": "repository.h",
            "line": 470,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the path to the repository"
          },
          "params": [
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the path of this repository",
            "This is the path of the `.git` folder for normal repositories,\n or of the repository itself for bare repositories."
          ],
          "group": "repository"
        },
        "git_repository_workdir": {
          "kind": "function",
          "name": "git_repository_workdir",
          "location": {
            "file": "repository.h",
            "line": 481,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the path to the working dir, if it exists"
          },
          "params": [
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the path of the working directory for this repository",
            "If the repository is bare, this function will always return\n NULL."
          ],
          "group": "repository"
        },
        "git_repository_commondir": {
          "kind": "function",
          "name": "git_repository_commondir",
          "location": {
            "file": "repository.h",
            "line": 493,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the path to the common dir"
          },
          "params": [
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the path of the shared common directory for this repository.",
            "If the repository is bare, it is the root directory for the repository.\n If the repository is a worktree, it is the parent repo's gitdir.\n Otherwise, it is the gitdir."
          ],
          "group": "repository"
        },
        "git_repository_set_workdir": {
          "kind": "function",
          "name": "git_repository_set_workdir",
          "location": {
            "file": "repository.h",
            "line": 512,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "workdir",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to a working directory"
            },
            {
              "name": "update_gitlink",
              "type": "int",
              "direction": "in",
              "comment": "Create/update gitlink in workdir and set config\n        \"core.worktree\" (if workdir is not the parent of the .git directory)"
            }
          ],
          "comment": [
            "Set the path to the working directory for this repository",
            "The working directory doesn't need to be the same one\n that contains the `.git` folder for this repository.",
            "If this repository is bare, setting its working directory\n will turn it into a normal repository, capable of performing\n all the common workdir operations (checkout, status, index\n manipulation, etc)."
          ],
          "group": "repository"
        },
        "git_repository_is_bare": {
          "kind": "function",
          "name": "git_repository_is_bare",
          "location": {
            "file": "repository.h",
            "line": 521,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the repository is bare, 0 otherwise."
          },
          "params": [
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if a repository is bare"
          ],
          "group": "repository"
        },
        "git_repository_is_worktree": {
          "kind": "function",
          "name": "git_repository_is_worktree",
          "location": {
            "file": "repository.h",
            "line": 529,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if the repository is a linked work tree, 0 otherwise."
          },
          "params": [
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "Repo to test"
            }
          ],
          "comment": [
            "Check if a repository is a linked work tree"
          ],
          "group": "repository"
        },
        "git_repository_config": {
          "kind": "function",
          "name": "git_repository_config",
          "location": {
            "file": "repository.h",
            "line": 545,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "Pointer to store the loaded configuration"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the configuration file for this repository.",
            "If a configuration file has not been set, the default\n config set for the repository will be returned, including\n global and system configurations (if they are available).",
            "The configuration file must be freed once it's no longer\n being used by the user."
          ],
          "group": "repository"
        },
        "git_repository_config_snapshot": {
          "kind": "function",
          "name": "git_repository_config_snapshot",
          "location": {
            "file": "repository.h",
            "line": 561,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_config **",
              "direction": "in",
              "comment": "Pointer to store the loaded configuration"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository"
            }
          ],
          "comment": [
            "Get a snapshot of the repository's configuration",
            "Convenience function to take a snapshot from the repository's\n configuration.  The contents of this snapshot will not change,\n even if the underlying config files are modified.",
            "The configuration file must be freed once it's no longer\n being used by the user."
          ],
          "group": "repository"
        },
        "git_repository_odb": {
          "kind": "function",
          "name": "git_repository_odb",
          "location": {
            "file": "repository.h",
            "line": 577,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_odb **",
              "direction": "in",
              "comment": "Pointer to store the loaded ODB"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the Object Database for this repository.",
            "If a custom ODB has not been set, the default\n database for the repository will be returned (the one\n located in `.git/objects`).",
            "The ODB must be freed once it's no longer being used by\n the user."
          ],
          "group": "repository"
        },
        "git_repository_refdb": {
          "kind": "function",
          "name": "git_repository_refdb",
          "location": {
            "file": "repository.h",
            "line": 593,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_refdb **",
              "direction": "in",
              "comment": "Pointer to store the loaded refdb"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the Reference Database Backend for this repository.",
            "If a custom refsdb has not been set, the default database for\n the repository will be returned (the one that manipulates loose\n and packed references in the `.git` directory).",
            "The refdb must be freed once it's no longer being used by\n the user."
          ],
          "group": "repository"
        },
        "git_repository_index": {
          "kind": "function",
          "name": "git_repository_index",
          "location": {
            "file": "repository.h",
            "line": 609,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "Pointer to store the loaded index"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Get the Index file for this repository.",
            "If a custom index has not been set, the default\n index for the repository will be returned (the one\n located in `.git/index`).",
            "The index must be freed once it's no longer being used by\n the user."
          ],
          "group": "repository"
        },
        "git_repository_message": {
          "kind": "function",
          "name": "git_repository_message",
          "location": {
            "file": "repository.h",
            "line": 627,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if no message exists or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "git_buf to write data into"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository to read prepared message from"
            }
          ],
          "comment": [
            "Retrieve git's prepared message",
            "Operations such as git revert/cherry-pick/merge with the -n option\n stop just short of creating a commit with the changes and save\n their prepared message in .git/MERGE_MSG so the next git-commit\n execution can present it to the user for them to amend if they\n wish.",
            "Use this function to get the contents of this file. Don't forget to\n remove the file after you create the commit."
          ],
          "group": "repository"
        },
        "git_repository_message_remove": {
          "kind": "function",
          "name": "git_repository_message_remove",
          "location": {
            "file": "repository.h",
            "line": 634,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            }
          ],
          "comment": [
            "Remove git's prepared message.",
            "Remove the message that `git_repository_message` retrieves."
          ],
          "group": "repository"
        },
        "git_repository_state_cleanup": {
          "kind": "function",
          "name": "git_repository_state_cleanup",
          "location": {
            "file": "repository.h",
            "line": 643,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or error"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            }
          ],
          "comment": [
            "Remove all the metadata associated with an ongoing command like merge,\n revert, cherry-pick, etc.  For example: MERGE_HEAD, MERGE_MSG, etc."
          ],
          "group": "repository"
        },
        "git_repository_fetchhead_foreach_cb": {
          "kind": "callback",
          "name": "git_repository_fetchhead_foreach_cb",
          "type": "int (*)(const char *, const char *, const git_oid *, unsigned int, void *)",
          "comment": [
            "Callback used to iterate over each FETCH_HEAD entry"
          ],
          "location": {
            "file": "repository.h",
            "line": 657,
            "column": 26
          },
          "see": [
            "git_repository_fetchhead_foreach"
          ],
          "params": [
            {
              "name": "ref_name",
              "direction": "in",
              "comment": "The reference name",
              "type": "const char *"
            },
            {
              "name": "remote_url",
              "direction": "in",
              "comment": "The remote URL",
              "type": "const char *"
            },
            {
              "name": "oid",
              "direction": "in",
              "comment": "The reference target OID",
              "type": "const git_oid *"
            },
            {
              "name": "is_merge",
              "direction": "in",
              "comment": "Was the reference the result of a merge",
              "type": "unsigned int"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload passed to git_repository_fetchhead_foreach",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "non-zero to terminate the iteration",
            "type": "int"
          },
          "group": "repository",
          "parameterTo": [
            "git_repository_fetchhead_foreach"
          ],
          "typedef": true
        },
        "git_repository_fetchhead_foreach": {
          "kind": "function",
          "name": "git_repository_fetchhead_foreach",
          "location": {
            "file": "repository.h",
            "line": 674,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, GIT_ENOTFOUND if\n         there is no FETCH_HEAD file, or other error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "callback",
              "type": "git_repository_fetchhead_foreach_cb",
              "direction": "in",
              "comment": "Callback function",
              "referenceType": "int (*)(const char *, const char *, const git_oid *, unsigned int, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Pointer to callback data (optional)"
            }
          ],
          "comment": [
            "Invoke 'callback' for each entry in the given FETCH_HEAD file.",
            "Return a non-zero value from the callback to stop the loop."
          ],
          "group": "repository"
        },
        "git_repository_mergehead_foreach_cb": {
          "kind": "callback",
          "name": "git_repository_mergehead_foreach_cb",
          "type": "int (*)(const git_oid *, void *)",
          "comment": [
            "Callback used to iterate over each MERGE_HEAD entry"
          ],
          "location": {
            "file": "repository.h",
            "line": 688,
            "column": 26
          },
          "see": [
            "git_repository_mergehead_foreach"
          ],
          "params": [
            {
              "name": "oid",
              "direction": "in",
              "comment": "The merge OID",
              "type": "const git_oid *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload passed to git_repository_mergehead_foreach",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "non-zero to terminate the iteration",
            "type": "int"
          },
          "group": "repository",
          "parameterTo": [
            "git_repository_mergehead_foreach"
          ],
          "typedef": true
        },
        "git_repository_mergehead_foreach": {
          "kind": "function",
          "name": "git_repository_mergehead_foreach",
          "location": {
            "file": "repository.h",
            "line": 703,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, GIT_ENOTFOUND if\n         there is no MERGE_HEAD file, or other error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "callback",
              "type": "git_repository_mergehead_foreach_cb",
              "direction": "in",
              "comment": "Callback function",
              "referenceType": "int (*)(const git_oid *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Pointer to callback data (optional)"
            }
          ],
          "comment": [
            "If a merge is in progress, invoke 'callback' for each commit ID in the\n MERGE_HEAD file.",
            "Return a non-zero value from the callback to stop the loop."
          ],
          "group": "repository"
        },
        "git_repository_hashfile": {
          "kind": "function",
          "name": "git_repository_hashfile",
          "location": {
            "file": "repository.h",
            "line": 731,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Output value of calculated SHA"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository pointer"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to file on disk whose contents should be hashed. If the\n             repository is not NULL, this can be a relative path."
            },
            {
              "name": "type",
              "type": "git_object_t",
              "direction": "in",
              "comment": "The object type to hash as (e.g. GIT_OBJECT_BLOB)",
              "referenceType": "enum git_object_t"
            },
            {
              "name": "as_path",
              "type": "const char *",
              "direction": "in",
              "comment": "The path to use to look up filtering rules. If this is\n             NULL, then the `path` parameter will be used instead. If\n             this is passed as the empty string, then no filters will be\n             applied when calculating the hash."
            }
          ],
          "comment": [
            "Calculate hash of file using repository filtering rules.",
            "If you simply want to calculate the hash of a file on disk with no filters,\n you can just use the `git_odb_hashfile()` API.  However, if you want to\n hash a file in the repository and you want to apply filtering rules (e.g.\n crlf filters) before generating the SHA, then use this function.",
            "Note: if the repository has `core.safecrlf` set to fail and the\n filtering triggers that failure, then this function will return an\n error and not calculate the hash of the file."
          ],
          "group": "repository"
        },
        "git_repository_set_head": {
          "kind": "function",
          "name": "git_repository_set_head",
          "location": {
            "file": "repository.h",
            "line": 756,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository pointer"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "Canonical name of the reference the HEAD should point at"
            }
          ],
          "comment": [
            "Make the repository HEAD point to the specified reference.",
            "If the provided reference points to a Tree or a Blob, the HEAD is\n unaltered and -1 is returned.",
            "If the provided reference points to a branch, the HEAD will point\n to that branch, staying attached, or become attached if it isn't yet.\n If the branch doesn't exist yet, no error will be return. The HEAD\n will then be attached to an unborn branch.",
            "Otherwise, the HEAD will be detached and will directly point to\n the Commit."
          ],
          "group": "repository"
        },
        "git_repository_set_head_detached": {
          "kind": "function",
          "name": "git_repository_set_head_detached",
          "location": {
            "file": "repository.h",
            "line": 776,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository pointer"
            },
            {
              "name": "commitish",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "Object id of the Commit the HEAD should point to"
            }
          ],
          "comment": [
            "Make the repository HEAD directly point to the Commit.",
            "If the provided committish cannot be found in the repository, the HEAD\n is unaltered and GIT_ENOTFOUND is returned.",
            "If the provided commitish cannot be peeled into a commit, the HEAD\n is unaltered and -1 is returned.",
            "Otherwise, the HEAD will eventually be detached and will directly point to\n the peeled Commit."
          ],
          "group": "repository"
        },
        "git_repository_set_head_detached_from_annotated": {
          "kind": "function",
          "name": "git_repository_set_head_detached_from_annotated",
          "location": {
            "file": "repository.h",
            "line": 792,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "commitish",
              "type": "const git_annotated_commit *"
            }
          ],
          "comment": [
            "Make the repository HEAD directly point to the Commit.",
            "This behaves like `git_repository_set_head_detached()` but takes an\n annotated commit, which lets you specify which extended sha syntax\n string was specified by a user, allowing for more exact reflog\n messages.",
            "See the documentation for `git_repository_set_head_detached()`."
          ],
          "see": [
            "git_repository_set_head_detached"
          ],
          "group": "repository"
        },
        "git_repository_detach_head": {
          "kind": "function",
          "name": "git_repository_detach_head",
          "location": {
            "file": "repository.h",
            "line": 813,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EUNBORNBRANCH when HEAD points to a non existing\n branch or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository pointer"
            }
          ],
          "comment": [
            "Detach the HEAD.",
            "If the HEAD is already detached and points to a Commit, 0 is returned.",
            "If the HEAD is already detached and points to a Tag, the HEAD is\n updated into making it point to the peeled Commit, and 0 is returned.",
            "If the HEAD is already detached and points to a non commitish, the HEAD is\n unaltered, and -1 is returned.",
            "Otherwise, the HEAD will be detached and point to the peeled Commit."
          ],
          "group": "repository"
        },
        "git_repository_state_t": {
          "kind": "enum",
          "name": "git_repository_state_t",
          "referenceName": "git_repository_state_t",
          "members": [
            {
              "name": "GIT_REPOSITORY_STATE_NONE"
            },
            {
              "name": "GIT_REPOSITORY_STATE_MERGE"
            },
            {
              "name": "GIT_REPOSITORY_STATE_REVERT"
            },
            {
              "name": "GIT_REPOSITORY_STATE_REVERT_SEQUENCE"
            },
            {
              "name": "GIT_REPOSITORY_STATE_CHERRYPICK"
            },
            {
              "name": "GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE"
            },
            {
              "name": "GIT_REPOSITORY_STATE_BISECT"
            },
            {
              "name": "GIT_REPOSITORY_STATE_REBASE"
            },
            {
              "name": "GIT_REPOSITORY_STATE_REBASE_INTERACTIVE"
            },
            {
              "name": "GIT_REPOSITORY_STATE_REBASE_MERGE"
            },
            {
              "name": "GIT_REPOSITORY_STATE_APPLY_MAILBOX"
            },
            {
              "name": "GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE"
            }
          ],
          "comment": [
            "Repository state",
            "These values represent possible states for the repository to be in,\n based on the current operation which is ongoing."
          ],
          "location": {
            "file": "repository.h",
            "line": 822,
            "column": 9
          },
          "group": "repository"
        },
        "git_repository_state": {
          "kind": "function",
          "name": "git_repository_state",
          "location": {
            "file": "repository.h",
            "line": 844,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "The state of the repository"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository pointer"
            }
          ],
          "comment": [
            "Determines the status of a git repository - ie, whether an operation\n (merge, cherry-pick, etc) is in progress."
          ],
          "group": "repository"
        },
        "git_repository_set_namespace": {
          "kind": "function",
          "name": "git_repository_set_namespace",
          "location": {
            "file": "repository.h",
            "line": 858,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on error"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repo"
            },
            {
              "name": "nmspace",
              "type": "const char *",
              "direction": "in",
              "comment": "The namespace. This should not include the refs\n\tfolder, e.g. to namespace all references under `refs/namespaces/foo/`,\n\tuse `foo` as the namespace."
            }
          ],
          "comment": [
            "Sets the active namespace for this Git Repository",
            "This namespace affects all reference operations for the repo.\n See `man gitnamespaces`"
          ],
          "group": "repository"
        },
        "git_repository_get_namespace": {
          "kind": "function",
          "name": "git_repository_get_namespace",
          "location": {
            "file": "repository.h",
            "line": 866,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the active namespace, or NULL if there isn't one"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repo"
            }
          ],
          "comment": [
            "Get the currently active namespace for this repository"
          ],
          "group": "repository"
        },
        "git_repository_is_shallow": {
          "kind": "function",
          "name": "git_repository_is_shallow",
          "location": {
            "file": "repository.h",
            "line": 875,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "1 if shallow, zero if not"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository"
            }
          ],
          "comment": [
            "Determine if the repository was a shallow clone"
          ],
          "group": "repository"
        },
        "git_repository_ident": {
          "kind": "function",
          "name": "git_repository_ident",
          "location": {
            "file": "repository.h",
            "line": 887,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "name",
              "type": "const char **",
              "direction": "in",
              "comment": "where to store the pointer to the name"
            },
            {
              "name": "email",
              "type": "const char **",
              "direction": "in",
              "comment": "where to store the pointer to the email"
            },
            {
              "name": "repo",
              "type": "const git_repository *",
              "direction": "in",
              "comment": "the repository"
            }
          ],
          "comment": [
            "Retrieve the configured identity to use for reflogs",
            "The memory is owned by the repository and must not be freed by the\n user."
          ],
          "group": "repository"
        },
        "git_repository_set_ident": {
          "kind": "function",
          "name": "git_repository_set_ident",
          "location": {
            "file": "repository.h",
            "line": 900,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to configure"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name to use for the reflog entries"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "the email to use for the reflog entries"
            }
          ],
          "comment": [
            "Set the identity to be used for writing reflogs",
            "If both are set, this name and email will be used to write to the\n reflog. Pass NULL to unset. When unset, the identity will be taken\n from the repository's configuration."
          ],
          "group": "repository"
        },
        "git_repository": {
          "kind": "struct",
          "name": "git_repository",
          "referenceName": "struct git_repository",
          "opaque": true,
          "comment": [
            "Representation of an existing git repository,\n including all its object contents"
          ],
          "location": {
            "file": "types.h",
            "line": 109,
            "column": 31
          },
          "group": "repository",
          "returnedBy": [
            "git_blob_owner",
            "git_commit_owner",
            "git_index_owner",
            "git_object_owner",
            "git_reference_owner",
            "git_remote_owner",
            "git_revwalk_repository",
            "git_submodule_owner",
            "git_tag_owner",
            "git_tree_owner",
            "git_filter_source_repo",
            "git_merge_driver_source_repo"
          ],
          "parameterTo": [
            "git_annotated_commit_from_ref",
            "git_annotated_commit_from_fetchhead",
            "git_annotated_commit_lookup",
            "git_annotated_commit_from_revspec",
            "git_apply_to_tree",
            "git_apply",
            "git_attr_get",
            "git_attr_get_many",
            "git_attr_foreach",
            "git_attr_cache_flush",
            "git_attr_add_macro",
            "git_blame_file",
            "git_blob_lookup",
            "git_blob_lookup_prefix",
            "git_blob_create_from_workdir",
            "git_blob_create_from_disk",
            "git_blob_create_from_stream",
            "git_blob_create_from_buffer",
            "git_branch_create",
            "git_branch_create_from_annotated",
            "git_branch_iterator_new",
            "git_branch_lookup",
            "git_branch_upstream_name",
            "git_branch_remote_name",
            "git_branch_upstream_remote",
            "git_checkout_head",
            "git_checkout_index",
            "git_checkout_tree",
            "git_cherrypick_commit",
            "git_cherrypick",
            "git_remote_create_cb",
            "git_repository_create_cb",
            "git_clone",
            "git_commit_lookup",
            "git_commit_lookup_prefix",
            "git_commit_extract_signature",
            "git_commit_create",
            "git_commit_create_v",
            "git_commit_create_buffer",
            "git_commit_create_with_signature",
            "git_config_add_file_ondisk",
            "git_blob_create_fromworkdir",
            "git_blob_create_fromdisk",
            "git_blob_create_fromstream",
            "git_blob_create_frombuffer",
            "git_tag_create_frombuffer",
            "git_describe_workdir",
            "git_diff_tree_to_tree",
            "git_diff_tree_to_index",
            "git_diff_index_to_workdir",
            "git_diff_tree_to_workdir",
            "git_diff_tree_to_workdir_with_index",
            "git_diff_index_to_index",
            "git_diff_commit_as_email",
            "git_filter_list_load",
            "git_filter_list_apply_to_file",
            "git_filter_list_stream_file",
            "git_graph_ahead_behind",
            "git_graph_descendant_of",
            "git_ignore_add_rule",
            "git_ignore_clear_internal_rules",
            "git_ignore_path_is_ignored",
            "git_index_write_tree_to",
            "git_mailmap_from_repository",
            "git_merge_analysis",
            "git_merge_analysis_for_ref",
            "git_merge_base",
            "git_merge_bases",
            "git_merge_base_many",
            "git_merge_bases_many",
            "git_merge_base_octopus",
            "git_merge_file_from_index",
            "git_merge_trees",
            "git_merge_commits",
            "git_merge",
            "git_note_iterator_new",
            "git_note_read",
            "git_note_commit_read",
            "git_note_create",
            "git_note_commit_create",
            "git_note_remove",
            "git_note_commit_remove",
            "git_note_default_ref",
            "git_note_foreach",
            "git_object_lookup",
            "git_object_lookup_prefix",
            "git_packbuilder_new",
            "git_pathspec_match_workdir",
            "git_rebase_init",
            "git_rebase_open",
            "git_refdb_new",
            "git_refdb_open",
            "git_reflog_read",
            "git_reflog_rename",
            "git_reflog_delete",
            "git_reference_lookup",
            "git_reference_name_to_id",
            "git_reference_dwim",
            "git_reference_symbolic_create_matching",
            "git_reference_symbolic_create",
            "git_reference_create",
            "git_reference_create_matching",
            "git_reference_remove",
            "git_reference_list",
            "git_reference_foreach",
            "git_reference_foreach_name",
            "git_reference_iterator_new",
            "git_reference_iterator_glob_new",
            "git_reference_foreach_glob",
            "git_reference_has_log",
            "git_reference_ensure_log",
            "git_remote_create",
            "git_remote_create_with_fetchspec",
            "git_remote_create_anonymous",
            "git_remote_lookup",
            "git_remote_set_url",
            "git_remote_set_pushurl",
            "git_remote_add_fetch",
            "git_remote_add_push",
            "git_remote_list",
            "git_remote_set_autotag",
            "git_remote_rename",
            "git_remote_delete",
            "git_repository_open",
            "git_repository_open_from_worktree",
            "git_repository_wrap_odb",
            "git_repository_open_ext",
            "git_repository_open_bare",
            "git_repository_free",
            "git_repository_init",
            "git_repository_init_ext",
            "git_repository_head",
            "git_repository_head_for_worktree",
            "git_repository_head_detached",
            "git_repository_head_detached_for_worktree",
            "git_repository_head_unborn",
            "git_repository_is_empty",
            "git_repository_item_path",
            "git_repository_path",
            "git_repository_workdir",
            "git_repository_commondir",
            "git_repository_set_workdir",
            "git_repository_is_bare",
            "git_repository_is_worktree",
            "git_repository_config",
            "git_repository_config_snapshot",
            "git_repository_odb",
            "git_repository_refdb",
            "git_repository_index",
            "git_repository_message",
            "git_repository_message_remove",
            "git_repository_state_cleanup",
            "git_repository_fetchhead_foreach",
            "git_repository_mergehead_foreach",
            "git_repository_hashfile",
            "git_repository_set_head",
            "git_repository_set_head_detached",
            "git_repository_set_head_detached_from_annotated",
            "git_repository_detach_head",
            "git_repository_state",
            "git_repository_set_namespace",
            "git_repository_get_namespace",
            "git_repository_is_shallow",
            "git_repository_ident",
            "git_repository_set_ident",
            "git_reset",
            "git_reset_from_annotated",
            "git_reset_default",
            "git_revert_commit",
            "git_revert",
            "git_revparse_single",
            "git_revparse_ext",
            "git_revparse",
            "git_revwalk_new",
            "git_signature_default",
            "git_stash_save",
            "git_stash_apply",
            "git_stash_foreach",
            "git_stash_drop",
            "git_stash_pop",
            "git_status_foreach",
            "git_status_foreach_ext",
            "git_status_file",
            "git_status_list_new",
            "git_status_should_ignore",
            "git_submodule_lookup",
            "git_submodule_foreach",
            "git_submodule_add_setup",
            "git_submodule_clone",
            "git_submodule_resolve_url",
            "git_submodule_set_branch",
            "git_submodule_set_url",
            "git_submodule_set_ignore",
            "git_submodule_set_update",
            "git_submodule_set_fetch_recurse_submodules",
            "git_submodule_repo_init",
            "git_submodule_open",
            "git_submodule_status",
            "git_tag_lookup",
            "git_tag_lookup_prefix",
            "git_tag_create",
            "git_tag_annotation_create",
            "git_tag_create_from_buffer",
            "git_tag_create_lightweight",
            "git_tag_delete",
            "git_tag_list",
            "git_tag_list_match",
            "git_tag_foreach",
            "git_transaction_new",
            "git_tree_lookup",
            "git_tree_lookup_prefix",
            "git_tree_entry_to_object",
            "git_treebuilder_new",
            "git_tree_create_updated",
            "git_worktree_list",
            "git_worktree_lookup",
            "git_worktree_open_from_repository",
            "git_worktree_add",
            "git_commit_create_from_ids",
            "git_commit_create_from_callback",
            "git_config_add_backend",
            "git_filter_list_new",
            "git_mempack_dump",
            "git_refdb_backend_fs",
            "git_repository_new",
            "git_repository__cleanup",
            "git_repository_reinit_filesystem",
            "git_repository_set_config",
            "git_repository_set_odb",
            "git_repository_set_refdb",
            "git_repository_set_index",
            "git_repository_set_bare",
            "git_repository_submodule_cache_all",
            "git_repository_submodule_cache_clear"
          ]
        }
      },
      "info": {
        "summary": "Git repository management routines"
      }
    },
    "sys/repository": {
      "apis": {
        "git_repository_new": {
          "kind": "function",
          "name": "git_repository_new",
          "location": {
            "file": "sys/repository.h",
            "line": 35,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "The blank repository"
            }
          ],
          "comment": [
            "Create a new repository with neither backends nor config object",
            "Note that this is only useful if you wish to associate the repository\n with a non-filesystem-backed object database and config store.",
            "Caveats: since this repository has no physical location, some systems\n can fail to function properly: locations under $GIT_DIR, $GIT_COMMON_DIR,\n or $GIT_INFO_DIR are impacted."
          ],
          "group": "sys/repository"
        },
        "git_repository__cleanup": {
          "kind": "function",
          "name": "git_repository__cleanup",
          "location": {
            "file": "sys/repository.h",
            "line": 51,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository to clean up"
            }
          ],
          "comment": [
            "Reset all the internal state in a repository.",
            "This will free all the mapped memory and internal objects\n of the repository and leave it in a \"blank\" state.",
            "There's no need to call this function directly unless you're\n trying to aggressively cleanup the repo before its\n deallocation. `git_repository_free` already performs this operation\n before deallocating the repo."
          ],
          "group": "sys/repository"
        },
        "git_repository_reinit_filesystem": {
          "kind": "function",
          "name": "git_repository_reinit_filesystem",
          "location": {
            "file": "sys/repository.h",
            "line": 68,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n 0 on error"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "recurse_submodules",
              "type": "int",
              "direction": "in",
              "comment": "Should submodules be updated recursively"
            }
          ],
          "comment": [
            "Update the filesystem config settings for an open repository",
            "When a repository is initialized, config values are set based on the\n properties of the filesystem that the repository is on, such as\n \"core.ignorecase\", \"core.filemode\", \"core.symlinks\", etc.  If the\n repository is moved to a new filesystem, these properties may no\n longer be correct and API calls may not behave as expected.  This\n call reruns the phase of repository initialization that sets those\n properties to compensate for the current filesystem of the repo."
          ],
          "group": "sys/repository"
        },
        "git_repository_set_config": {
          "kind": "function",
          "name": "git_repository_set_config",
          "location": {
            "file": "sys/repository.h",
            "line": 86,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "config",
              "type": "git_config *",
              "direction": "in",
              "comment": "A Config object"
            }
          ],
          "comment": [
            "Set the configuration file for this repository",
            "This configuration file will be used for all configuration\n queries involving this repository.",
            "The repository will keep a reference to the config file;\n the user must still free the config after setting it\n to the repository, or it will leak."
          ],
          "group": "sys/repository"
        },
        "git_repository_set_odb": {
          "kind": "function",
          "name": "git_repository_set_odb",
          "location": {
            "file": "sys/repository.h",
            "line": 102,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "odb",
              "type": "git_odb *",
              "direction": "in",
              "comment": "An ODB object"
            }
          ],
          "comment": [
            "Set the Object Database for this repository",
            "The ODB will be used for all object-related operations\n involving this repository.",
            "The repository will keep a reference to the ODB; the user\n must still free the ODB object after setting it to the\n repository, or it will leak."
          ],
          "group": "sys/repository"
        },
        "git_repository_set_refdb": {
          "kind": "function",
          "name": "git_repository_set_refdb",
          "location": {
            "file": "sys/repository.h",
            "line": 118,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "refdb",
              "type": "git_refdb *",
              "direction": "in",
              "comment": "An refdb object"
            }
          ],
          "comment": [
            "Set the Reference Database Backend for this repository",
            "The refdb will be used for all reference related operations\n involving this repository.",
            "The repository will keep a reference to the refdb; the user\n must still free the refdb object after setting it to the\n repository, or it will leak."
          ],
          "group": "sys/repository"
        },
        "git_repository_set_index": {
          "kind": "function",
          "name": "git_repository_set_index",
          "location": {
            "file": "sys/repository.h",
            "line": 134,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "index",
              "type": "git_index *",
              "direction": "in",
              "comment": "An index object"
            }
          ],
          "comment": [
            "Set the index file for this repository",
            "This index will be used for all index-related operations\n involving this repository.",
            "The repository will keep a reference to the index file;\n the user must still free the index after setting it\n to the repository, or it will leak."
          ],
          "group": "sys/repository"
        },
        "git_repository_set_bare": {
          "kind": "function",
          "name": "git_repository_set_bare",
          "location": {
            "file": "sys/repository.h",
            "line": 147,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repo to make bare"
            }
          ],
          "comment": [
            "Set a repository to be bare.",
            "Clear the working directory and set core.bare to true.  You may also\n want to call `git_repository_set_index(repo, NULL)` since a bare repo\n typically does not have an index, but this function will not do that\n for you."
          ],
          "group": "sys/repository"
        },
        "git_repository_submodule_cache_all": {
          "kind": "function",
          "name": "git_repository_submodule_cache_all",
          "location": {
            "file": "sys/repository.h",
            "line": 160,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository whose submodules will be cached."
            }
          ],
          "comment": [
            "Load and cache all submodules.",
            "Because the `.gitmodules` file is unstructured, loading submodules is an\n O(N) operation.  Any operation (such as `git_rebase_init`) that requires\n accessing all submodules is O(N^2) in the number of submodules, if it\n has to look each one up individually.  This function loads all submodules\n and caches them so that subsequent calls to `git_submodule_lookup` are O(1)."
          ],
          "group": "sys/repository"
        },
        "git_repository_submodule_cache_clear": {
          "kind": "function",
          "name": "git_repository_submodule_cache_clear",
          "location": {
            "file": "sys/repository.h",
            "line": 175,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository whose submodule cache will be cleared"
            }
          ],
          "comment": [
            "Clear the submodule cache.",
            "Clear the submodule cache populated by `git_repository_submodule_cache_all`.\n If there is no cache, do nothing.",
            "The cache incorporates data from the repository's configuration, as well\n as the state of the working tree, the index, and HEAD.  So any time any\n of these has changed, the cache might become invalid."
          ],
          "group": "sys/repository"
        }
      },
      "info": {
        "summary": "Git repository custom implementation routines"
      }
    },
    "reset": {
      "apis": {
        "git_reset_t": {
          "kind": "enum",
          "name": "git_reset_t",
          "referenceName": "git_reset_t",
          "members": [
            {
              "name": "GIT_RESET_SOFT",
              "value": "1",
              "comment": [
                "Move the head to the given commit"
              ]
            },
            {
              "name": "GIT_RESET_MIXED",
              "value": "2",
              "comment": [
                "SOFT plus reset index to the commit"
              ]
            },
            {
              "name": "GIT_RESET_HARD",
              "value": "3",
              "comment": [
                "MIXED plus changes in working tree discarded"
              ]
            }
          ],
          "comment": [
            "Kinds of reset operation"
          ],
          "location": {
            "file": "reset.h",
            "line": 26,
            "column": 9
          },
          "group": "reset",
          "parameterTo": [
            "git_reset",
            "git_reset_from_annotated"
          ]
        },
        "git_reset": {
          "kind": "function",
          "name": "git_reset",
          "location": {
            "file": "reset.h",
            "line": 62,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to perform the reset operation."
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "Committish to which the Head should be moved to. This object\n must belong to the given `repo` and can either be a git_commit or a\n git_tag. When a git_tag is being passed, it should be dereferencable\n to a git_commit which oid will be used as the target of the branch."
            },
            {
              "name": "reset_type",
              "type": "git_reset_t",
              "direction": "in",
              "comment": "Kind of reset operation to perform.",
              "referenceType": "enum git_reset_t"
            },
            {
              "name": "checkout_opts",
              "type": "const git_checkout_options *",
              "direction": "in",
              "comment": "Optional checkout options to be used for a HARD reset.\n The checkout_strategy field will be overridden (based on reset_type).\n This parameter can be used to propagate notify and progress callbacks."
            }
          ],
          "comment": [
            "Sets the current head to the specified commit oid and optionally\n resets the index and working tree to match.",
            "SOFT reset means the Head will be moved to the commit.",
            "MIXED reset will trigger a SOFT reset, plus the index will be replaced\n with the content of the commit tree.",
            "HARD reset will trigger a MIXED reset and the working directory will be\n replaced with the content of the index.  (Untracked and ignored files\n will be left alone, however.)",
            "TODO: Implement remaining kinds of resets."
          ],
          "group": "reset"
        },
        "git_reset_from_annotated": {
          "kind": "function",
          "name": "git_reset_from_annotated",
          "location": {
            "file": "reset.h",
            "line": 80,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *"
            },
            {
              "name": "commit",
              "type": "const git_annotated_commit *"
            },
            {
              "name": "reset_type",
              "type": "git_reset_t",
              "referenceType": "enum git_reset_t"
            },
            {
              "name": "checkout_opts",
              "type": "const git_checkout_options *"
            }
          ],
          "comment": [
            "Sets the current head to the specified commit oid and optionally\n resets the index and working tree to match.",
            "This behaves like `git_reset()` but takes an annotated commit,\n which lets you specify which extended sha syntax string was\n specified by a user, allowing for more exact reflog messages.",
            "See the documentation for `git_reset()`."
          ],
          "see": [
            "git_reset"
          ],
          "group": "reset"
        },
        "git_reset_default": {
          "kind": "function",
          "name": "git_reset_default",
          "location": {
            "file": "reset.h",
            "line": 104,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or an error code \n<\n 0"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to perform the reset operation."
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "The committish which content will be used to reset the content\n of the index."
            },
            {
              "name": "pathspecs",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "List of pathspecs to operate on."
            }
          ],
          "comment": [
            "Updates some entries in the index from the target commit tree.",
            "The scope of the updated entries is determined by the paths\n being passed in the `pathspec` parameters.",
            "Passing a NULL `target` will result in removing\n entries in the index matching the provided pathspecs."
          ],
          "group": "reset"
        }
      },
      "info": {
        "summary": "Git reset management routines"
      }
    },
    "revert": {
      "apis": {
        "git_revert_options": {
          "kind": "struct",
          "name": "git_revert_options",
          "referenceName": "git_revert_options",
          "comment": [
            "Options for revert"
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "mainline",
              "type": "unsigned int",
              "comment": [
                "For merge commits, the \"mainline\" is treated as the parent."
              ]
            },
            {
              "name": "merge_opts",
              "type": "git_merge_options",
              "comment": [
                "Options for the merging"
              ],
              "referenceType": "struct git_merge_options"
            },
            {
              "name": "checkout_opts",
              "type": "git_checkout_options",
              "comment": [
                "Options for the checkout"
              ],
              "referenceType": "struct git_checkout_options"
            }
          ],
          "location": {
            "file": "revert.h",
            "line": 26,
            "column": 9
          },
          "group": "revert",
          "parameterTo": [
            "git_revert_init_options",
            "git_revert_options_init",
            "git_revert"
          ]
        },
        "GIT_REVERT_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_REVERT_OPTIONS_VERSION",
          "location": {
            "file": "revert.h",
            "line": 36,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "revert"
        },
        "GIT_REVERT_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_REVERT_OPTIONS_INIT",
          "location": {
            "file": "revert.h",
            "line": 37,
            "column": 9
          },
          "value": "{GIT_REVERT_OPTIONS_VERSION, 0, GIT_MERGE_OPTIONS_INIT, GIT_CHECKOUT_OPTIONS_INIT}",
          "comment": "",
          "group": "revert"
        },
        "git_revert_options_init": {
          "kind": "function",
          "name": "git_revert_options_init",
          "location": {
            "file": "revert.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_revert_options *",
              "direction": "in",
              "comment": "The `git_revert_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_REVERT_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_revert_options structure",
            "Initializes a `git_revert_options` with default values. Equivalent to\n creating an instance with `GIT_REVERT_OPTIONS_INIT`."
          ],
          "group": "revert"
        },
        "git_revert_commit": {
          "kind": "function",
          "name": "git_revert_commit",
          "location": {
            "file": "revert.h",
            "line": 67,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "zero on success, -1 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_index **",
              "direction": "in",
              "comment": "pointer to store the index result in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository that contains the given commits"
            },
            {
              "name": "revert_commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to revert"
            },
            {
              "name": "our_commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to revert against (eg, HEAD)"
            },
            {
              "name": "mainline",
              "type": "unsigned int",
              "direction": "in",
              "comment": "the parent of the revert commit, if it is a merge"
            },
            {
              "name": "merge_options",
              "type": "const git_merge_options *",
              "direction": "in",
              "comment": "the merge options (or null for defaults)"
            }
          ],
          "comment": [
            "Reverts the given commit against the given \"our\" commit, producing an\n index that reflects the result of the revert.",
            "The returned index must be freed explicitly with `git_index_free`."
          ],
          "group": "revert"
        },
        "git_revert": {
          "kind": "function",
          "name": "git_revert",
          "location": {
            "file": "revert.h",
            "line": 83,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "zero on success, -1 on failure."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to revert"
            },
            {
              "name": "commit",
              "type": "git_commit *",
              "direction": "in",
              "comment": "the commit to revert"
            },
            {
              "name": "given_opts",
              "type": "const git_revert_options *",
              "direction": "in",
              "comment": "the revert options (or null for defaults)"
            }
          ],
          "comment": [
            "Reverts the given commit, producing changes in the index and working directory."
          ],
          "group": "revert"
        }
      },
      "info": {
        "summary": "Git revert routines"
      }
    },
    "revparse": {
      "apis": {
        "git_revparse_single": {
          "kind": "function",
          "name": "git_revparse_single",
          "location": {
            "file": "revparse.h",
            "line": 37,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to output object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to search in"
            },
            {
              "name": "spec",
              "type": "const char *",
              "direction": "in",
              "comment": "the textual specification for an object"
            }
          ],
          "comment": [
            "Find a single object, as specified by a revision string.",
            "See `man gitrevisions`, or\n http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for\n information on the syntax accepted.",
            "The returned object should be released with `git_object_free` when no\n longer needed."
          ],
          "group": "revparse"
        },
        "git_revparse_ext": {
          "kind": "function",
          "name": "git_revparse_ext",
          "location": {
            "file": "revparse.h",
            "line": 61,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC\n or an error code"
          },
          "params": [
            {
              "name": "object_out",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to output object"
            },
            {
              "name": "reference_out",
              "type": "git_reference **",
              "direction": "in",
              "comment": "pointer to output reference or NULL"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to search in"
            },
            {
              "name": "spec",
              "type": "const char *",
              "direction": "in",
              "comment": "the textual specification for an object"
            }
          ],
          "comment": [
            "Find a single object and intermediate reference by a revision string.",
            "See `man gitrevisions`, or\n http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for\n information on the syntax accepted.",
            "In some cases (`\n@\n{\n<\n-n>}` or `\n<branchname>\n@\n{upstream}`), the expression may\n point to an intermediate reference. When such expressions are being passed\n in, `reference_out` will be valued as well.",
            "The returned object should be released with `git_object_free` and the\n returned reference with `git_reference_free` when no longer needed."
          ],
          "group": "revparse"
        },
        "git_revparse_mode_t": {
          "kind": "enum",
          "name": "git_revparse_mode_t",
          "referenceName": "git_revparse_mode_t",
          "members": [
            {
              "name": "GIT_REVPARSE_SINGLE",
              "value": "1",
              "comment": [
                "The spec targeted a single object."
              ]
            },
            {
              "name": "GIT_REVPARSE_RANGE",
              "value": "2",
              "comment": [
                "The spec targeted a range of commits."
              ]
            },
            {
              "name": "GIT_REVPARSE_MERGE_BASE",
              "value": "4",
              "comment": [
                "The spec used the '...' operator, which invokes special semantics."
              ]
            }
          ],
          "comment": [
            "Revparse flags.  These indicate the intended behavior of the spec passed to\n git_revparse."
          ],
          "location": {
            "file": "revparse.h",
            "line": 71,
            "column": 9
          },
          "group": "revparse"
        },
        "git_revspec": {
          "kind": "struct",
          "name": "git_revspec",
          "referenceName": "git_revspec",
          "comment": [
            "Git Revision Spec: output of a `git_revparse` operation"
          ],
          "members": [
            {
              "name": "from",
              "type": "git_object *",
              "comment": [
                "The left element of the revspec; must be freed by the user"
              ]
            },
            {
              "name": "to",
              "type": "git_object *",
              "comment": [
                "The right element of the revspec; must be freed by the user"
              ]
            },
            {
              "name": "flags",
              "type": "unsigned int",
              "comment": [
                "The intent of the revspec (i.e. `git_revparse_mode_t` flags)"
              ]
            }
          ],
          "location": {
            "file": "revparse.h",
            "line": 83,
            "column": 9
          },
          "group": "revparse",
          "parameterTo": [
            "git_revparse"
          ]
        },
        "git_revparse": {
          "kind": "function",
          "name": "git_revparse",
          "location": {
            "file": "revparse.h",
            "line": 105,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_INVALIDSPEC, GIT_ENOTFOUND, GIT_EAMBIGUOUS or an error code"
          },
          "params": [
            {
              "name": "revspec",
              "type": "git_revspec *",
              "direction": "in",
              "comment": "Pointer to an user-allocated git_revspec struct where\n\t              the result of the rev-parse will be stored"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to search in"
            },
            {
              "name": "spec",
              "type": "const char *",
              "direction": "in",
              "comment": "the rev-parse spec to parse"
            }
          ],
          "comment": [
            "Parse a revision string for `from`, `to`, and intent.",
            "See `man gitrevisions` or\n http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions for\n information on the syntax accepted."
          ],
          "group": "revparse"
        }
      },
      "info": {
        "summary": "Git revision parsing routines"
      }
    },
    "revwalk": {
      "apis": {
        "git_sort_t": {
          "kind": "enum",
          "name": "git_sort_t",
          "referenceName": "git_sort_t",
          "members": [
            {
              "name": "GIT_SORT_NONE",
              "value": "0",
              "comment": [
                "Sort the output with the same default method from `git`: reverse\n chronological order. This is the default sorting for new walkers."
              ]
            },
            {
              "name": "GIT_SORT_TOPOLOGICAL",
              "value": "1",
              "comment": [
                "Sort the repository contents in topological order (no parents before\n all of its children are shown); this sorting mode can be combined\n with time sorting to produce `git`'s `--date-order``."
              ]
            },
            {
              "name": "GIT_SORT_TIME",
              "value": "2",
              "comment": [
                "Sort the repository contents by commit time;\n this sorting mode can be combined with\n topological sorting."
              ]
            },
            {
              "name": "GIT_SORT_REVERSE",
              "value": "4",
              "comment": [
                "Iterate through the repository contents in reverse\n order; this sorting mode can be combined with\n any of the above."
              ]
            }
          ],
          "comment": [
            "Flags to specify the sorting which a revwalk should perform."
          ],
          "location": {
            "file": "revwalk.h",
            "line": 26,
            "column": 9
          },
          "group": "revwalk"
        },
        "git_revwalk_new": {
          "kind": "function",
          "name": "git_revwalk_new",
          "location": {
            "file": "revwalk.h",
            "line": 73,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_revwalk **",
              "direction": "in",
              "comment": "pointer to the new revision walker"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to walk through"
            }
          ],
          "comment": [
            "Allocate a new revision walker to iterate through a repo.",
            "This revision walker uses a custom memory pool and an internal\n commit cache, so it is relatively expensive to allocate.",
            "For maximum performance, this revision walker should be\n reused for different walks.",
            "This revision walker is *not* thread safe: it may only be\n used to walk a repository on a single thread; however,\n it is possible to have several revision walkers in\n several different threads walking the same repository."
          ],
          "group": "revwalk"
        },
        "git_revwalk_reset": {
          "kind": "function",
          "name": "git_revwalk_reset",
          "location": {
            "file": "revwalk.h",
            "line": 89,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walker",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "handle to reset."
            }
          ],
          "comment": [
            "Reset the revision walker for reuse.",
            "This will clear all the pushed and hidden commits, and\n leave the walker in a blank state (just like at\n creation) ready to receive new commit pushes and\n start a new walk.",
            "The revision walk is automatically reset when a walk\n is over."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push": {
          "kind": "function",
          "name": "git_revwalk_push",
          "location": {
            "file": "revwalk.h",
            "line": 108,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid of the commit to start from."
            }
          ],
          "comment": [
            "Add a new root for the traversal",
            "The pushed commit will be marked as one of the roots from which to\n start the walk. This commit may not be walked if it or a child is\n hidden.",
            "At least one commit must be pushed onto the walker before a walk\n can be started.",
            "The given id must belong to a committish on the walked\n repository."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push_glob": {
          "kind": "function",
          "name": "git_revwalk_push_glob",
          "location": {
            "file": "revwalk.h",
            "line": 126,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "glob",
              "type": "const char *",
              "direction": "in",
              "comment": "the glob pattern references should match"
            }
          ],
          "comment": [
            "Push matching references",
            "The OIDs pointed to by the references that match the given glob\n pattern will be pushed to the revision walker.",
            "A leading 'refs/' is implied if not present as well as a trailing\n '/\n\\\n*' if the glob lacks '?', '\n\\\n*' or '['.",
            "Any references matching this glob which do not point to a\n committish will be ignored."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push_head": {
          "kind": "function",
          "name": "git_revwalk_push_head",
          "location": {
            "file": "revwalk.h",
            "line": 134,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            }
          ],
          "comment": [
            "Push the repository's HEAD"
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide": {
          "kind": "function",
          "name": "git_revwalk_hide",
          "location": {
            "file": "revwalk.h",
            "line": 149,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "commit_id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the oid of commit that will be ignored during the traversal"
            }
          ],
          "comment": [
            "Mark a commit (and its ancestors) uninteresting for the output.",
            "The given id must belong to a committish on the walked\n repository.",
            "The resolved commit and all its parents will be hidden from the\n output on the revision walk."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide_glob": {
          "kind": "function",
          "name": "git_revwalk_hide_glob",
          "location": {
            "file": "revwalk.h",
            "line": 168,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "glob",
              "type": "const char *",
              "direction": "in",
              "comment": "the glob pattern references should match"
            }
          ],
          "comment": [
            "Hide matching references.",
            "The OIDs pointed to by the references that match the given glob\n pattern and their ancestors will be hidden from the output on the\n revision walk.",
            "A leading 'refs/' is implied if not present as well as a trailing\n '/\n\\\n*' if the glob lacks '?', '\n\\\n*' or '['.",
            "Any references matching this glob which do not point to a\n committish will be ignored."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide_head": {
          "kind": "function",
          "name": "git_revwalk_hide_head",
          "location": {
            "file": "revwalk.h",
            "line": 176,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            }
          ],
          "comment": [
            "Hide the repository's HEAD"
          ],
          "group": "revwalk"
        },
        "git_revwalk_push_ref": {
          "kind": "function",
          "name": "git_revwalk_push_ref",
          "location": {
            "file": "revwalk.h",
            "line": 187,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference to push"
            }
          ],
          "comment": [
            "Push the OID pointed to by a reference",
            "The reference must point to a committish."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide_ref": {
          "kind": "function",
          "name": "git_revwalk_hide_ref",
          "location": {
            "file": "revwalk.h",
            "line": 198,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference to hide"
            }
          ],
          "comment": [
            "Hide the OID pointed to by a reference",
            "The reference must point to a committish."
          ],
          "group": "revwalk"
        },
        "git_revwalk_next": {
          "kind": "function",
          "name": "git_revwalk_next",
          "location": {
            "file": "revwalk.h",
            "line": 218,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if the next commit was found;\n\tGIT_ITEROVER if there are no commits left to iterate"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the oid of the next commit"
            },
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker to pop the commit from."
            }
          ],
          "comment": [
            "Get the next commit from the revision walk.",
            "The initial call to this method is *not* blocking when\n iterating through a repo with a time-sorting mode.",
            "Iterating with Topological or inverted modes makes the initial\n call blocking to preprocess the commit list, but this block should be\n mostly unnoticeable on most repositories (topological preprocessing\n times at 0.3s on the git.git repo).",
            "The revision walker is reset when the walk is over."
          ],
          "group": "revwalk"
        },
        "git_revwalk_sorting": {
          "kind": "function",
          "name": "git_revwalk_sorting",
          "location": {
            "file": "revwalk.h",
            "line": 230,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal."
            },
            {
              "name": "sort_mode",
              "type": "unsigned int",
              "direction": "in",
              "comment": "combination of GIT_SORT_XXX flags"
            }
          ],
          "comment": [
            "Change the sorting mode when iterating through the\n repository's contents.",
            "Changing the sorting mode resets the walker."
          ],
          "group": "revwalk"
        },
        "git_revwalk_push_range": {
          "kind": "function",
          "name": "git_revwalk_push_range",
          "location": {
            "file": "revwalk.h",
            "line": 245,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the walker being used for the traversal"
            },
            {
              "name": "range",
              "type": "const char *",
              "direction": "in",
              "comment": "the range"
            }
          ],
          "comment": [
            "Push and hide the respective endpoints of the given range.",
            "The range should be of the form\n   \n<commit>..\n<commit>\n where each \n<commit> is in the form accepted by 'git_revparse_single'.\n The left-hand commit will be hidden and the right-hand commit pushed."
          ],
          "group": "revwalk"
        },
        "git_revwalk_simplify_first_parent": {
          "kind": "function",
          "name": "git_revwalk_simplify_first_parent",
          "location": {
            "file": "revwalk.h",
            "line": 254,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *"
            }
          ],
          "comment": [
            "Simplify the history by first-parent",
            "No parents other than the first for each commit will be enqueued."
          ],
          "group": "revwalk"
        },
        "git_revwalk_free": {
          "kind": "function",
          "name": "git_revwalk_free",
          "location": {
            "file": "revwalk.h",
            "line": 262,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "traversal handle to close. If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a revision walker previously allocated."
          ],
          "group": "revwalk"
        },
        "git_revwalk_repository": {
          "kind": "function",
          "name": "git_revwalk_repository",
          "location": {
            "file": "revwalk.h",
            "line": 271,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "the repository being walked"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the revision walker"
            }
          ],
          "comment": [
            "Return the repository on which this walker\n is operating."
          ],
          "group": "revwalk"
        },
        "git_revwalk_hide_cb": {
          "kind": "callback",
          "name": "git_revwalk_hide_cb",
          "type": "int (*)(const git_oid *, void *)",
          "comment": [
            "This is a callback function that user can provide to hide a\n commit and its parents. If the callback function returns non-zero value,\n then this commit and its parents will be hidden."
          ],
          "location": {
            "file": "revwalk.h",
            "line": 281,
            "column": 26
          },
          "params": [
            {
              "name": "commit_id",
              "direction": "in",
              "comment": "oid of Commit",
              "type": "const git_oid *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "User-specified pointer to data to be passed as data payload",
              "type": "void *"
            }
          ],
          "group": "revwalk",
          "parameterTo": [
            "git_revwalk_add_hide_cb"
          ],
          "typedef": true
        },
        "git_revwalk_add_hide_cb": {
          "kind": "function",
          "name": "git_revwalk_add_hide_cb",
          "location": {
            "file": "revwalk.h",
            "line": 292,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "walk",
              "type": "git_revwalk *",
              "direction": "in",
              "comment": "the revision walker"
            },
            {
              "name": "hide_cb",
              "type": "git_revwalk_hide_cb",
              "direction": "in",
              "comment": "callback function to hide a commit and its parents",
              "referenceType": "int (*)(const git_oid *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "data payload to be passed to callback function"
            }
          ],
          "comment": [
            "Adds, changes or removes a callback function to hide a commit and its parents"
          ],
          "group": "revwalk"
        },
        "git_revwalk": {
          "kind": "struct",
          "name": "git_revwalk",
          "referenceName": "struct git_revwalk",
          "opaque": true,
          "comment": [
            "Representation of an in-progress walk through the commits in a repo"
          ],
          "location": {
            "file": "types.h",
            "line": 118,
            "column": 28
          },
          "group": "revwalk",
          "parameterTo": [
            "git_packbuilder_insert_walk",
            "git_revwalk_new",
            "git_revwalk_reset",
            "git_revwalk_push",
            "git_revwalk_push_glob",
            "git_revwalk_push_head",
            "git_revwalk_hide",
            "git_revwalk_hide_glob",
            "git_revwalk_hide_head",
            "git_revwalk_push_ref",
            "git_revwalk_hide_ref",
            "git_revwalk_next",
            "git_revwalk_sorting",
            "git_revwalk_push_range",
            "git_revwalk_simplify_first_parent",
            "git_revwalk_free",
            "git_revwalk_repository",
            "git_revwalk_add_hide_cb"
          ]
        }
      },
      "info": {
        "summary": "Git revision traversal routines"
      }
    },
    "signature": {
      "apis": {
        "git_signature_new": {
          "kind": "function",
          "name": "git_signature_new",
          "location": {
            "file": "signature.h",
            "line": 37,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "new signature, in case of error NULL"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the person"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "email of the person"
            },
            {
              "name": "time",
              "type": "git_time_t",
              "direction": "in",
              "comment": "time (in seconds from epoch) when the action happened",
              "referenceType": "int64_t"
            },
            {
              "name": "offset",
              "type": "int",
              "direction": "in",
              "comment": "timezone offset (in minutes) for the time"
            }
          ],
          "comment": [
            "Create a new action signature.",
            "Call `git_signature_free()` to free the data.",
            "Note: angle brackets ('\n<\n' and '>') characters are not allowed\n to be used in either the `name` or the `email` parameter."
          ],
          "group": "signature"
        },
        "git_signature_now": {
          "kind": "function",
          "name": "git_signature_now",
          "location": {
            "file": "signature.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "new signature, in case of error NULL"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the person"
            },
            {
              "name": "email",
              "type": "const char *",
              "direction": "in",
              "comment": "email of the person"
            }
          ],
          "comment": [
            "Create a new action signature with a timestamp of 'now'.",
            "Call `git_signature_free()` to free the data."
          ],
          "group": "signature"
        },
        "git_signature_default": {
          "kind": "function",
          "name": "git_signature_default",
          "location": {
            "file": "signature.h",
            "line": 63,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if config is missing, or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "new signature"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository pointer"
            }
          ],
          "comment": [
            "Create a new action signature with default user and now timestamp.",
            "This looks up the user.name and user.email from the configuration and\n uses the current time as the timestamp, and creates a new signature\n based on that information.  It will return GIT_ENOTFOUND if either the\n user.name or user.email are not set."
          ],
          "group": "signature"
        },
        "git_signature_from_buffer": {
          "kind": "function",
          "name": "git_signature_from_buffer",
          "location": {
            "file": "signature.h",
            "line": 76,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_signature **",
              "direction": "in",
              "comment": "new signature"
            },
            {
              "name": "buf",
              "type": "const char *",
              "direction": "in",
              "comment": "signature string"
            }
          ],
          "comment": [
            "Create a new signature by parsing the given buffer, which is\n expected to be in the format \"Real Name <email> timestamp tzoffset\",\n where `timestamp` is the number of seconds since the Unix epoch and\n `tzoffset` is the timezone offset in `hhmm` format (note the lack\n of a colon separator)."
          ],
          "group": "signature"
        },
        "git_signature_dup": {
          "kind": "function",
          "name": "git_signature_dup",
          "location": {
            "file": "signature.h",
            "line": 88,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "dest",
              "type": "git_signature **",
              "direction": "in",
              "comment": "pointer where to store the copy"
            },
            {
              "name": "sig",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature to duplicate"
            }
          ],
          "comment": [
            "Create a copy of an existing signature.  All internal strings are also\n duplicated.",
            "Call `git_signature_free()` to free the data."
          ],
          "group": "signature"
        },
        "git_signature_free": {
          "kind": "function",
          "name": "git_signature_free",
          "location": {
            "file": "signature.h",
            "line": 99,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "sig",
              "type": "git_signature *",
              "direction": "in",
              "comment": "signature to free"
            }
          ],
          "comment": [
            "Free an existing signature.",
            "Because the signature is not an opaque structure, it is legal to free it\n manually, but be sure to free the \"name\" and \"email\" strings in addition\n to the structure itself."
          ],
          "group": "signature"
        },
        "git_signature": {
          "kind": "struct",
          "name": "git_signature",
          "referenceName": "git_signature",
          "comment": [
            "An action signature (e.g. for committers, taggers, etc)"
          ],
          "members": [
            {
              "name": "name",
              "type": "char *",
              "comment": [
                "full name of the author"
              ]
            },
            {
              "name": "email",
              "type": "char *",
              "comment": [
                "email of the author"
              ]
            },
            {
              "name": "when",
              "type": "git_time",
              "comment": [
                "time when the action happened"
              ],
              "referenceType": "struct git_time"
            }
          ],
          "location": {
            "file": "types.h",
            "line": 173,
            "column": 16
          },
          "group": "signature",
          "returnedBy": [
            "git_commit_committer",
            "git_commit_author",
            "git_note_author",
            "git_note_committer",
            "git_reflog_entry_committer",
            "git_tag_tagger"
          ],
          "parameterTo": [
            "git_commit_committer_with_mailmap",
            "git_commit_author_with_mailmap",
            "git_commit_create",
            "git_commit_create_v",
            "git_commit_amend",
            "git_commit_create_buffer",
            "git_mailmap_resolve_signature",
            "git_note_create",
            "git_note_commit_create",
            "git_note_remove",
            "git_note_commit_remove",
            "git_rebase_commit",
            "git_rebase_finish",
            "git_reflog_append",
            "git_signature_new",
            "git_signature_now",
            "git_signature_default",
            "git_signature_from_buffer",
            "git_signature_dup",
            "git_signature_free",
            "git_stash_save",
            "git_tag_create",
            "git_tag_annotation_create",
            "git_transaction_set_target",
            "git_transaction_set_symbolic_target",
            "git_commit_create_from_ids",
            "git_commit_create_from_callback"
          ]
        }
      },
      "info": {
        "summary": "Git signature creation"
      }
    },
    "stash": {
      "apis": {
        "git_stash_flags": {
          "kind": "enum",
          "name": "git_stash_flags",
          "referenceName": "git_stash_flags",
          "members": [
            {
              "name": "GIT_STASH_DEFAULT",
              "value": "0",
              "comment": [
                "No option, default"
              ]
            },
            {
              "name": "GIT_STASH_KEEP_INDEX",
              "value": "1",
              "comment": [
                "All changes already added to the index are left intact in\n the working directory"
              ]
            },
            {
              "name": "GIT_STASH_INCLUDE_UNTRACKED",
              "value": "2",
              "comment": [
                "All untracked files are also stashed and then cleaned up\n from the working directory"
              ]
            },
            {
              "name": "GIT_STASH_INCLUDE_IGNORED",
              "value": "4",
              "comment": [
                "All ignored files are also stashed and then cleaned up from\n the working directory"
              ]
            }
          ],
          "comment": [
            "Stash flags"
          ],
          "location": {
            "file": "stash.h",
            "line": 25,
            "column": 9
          },
          "group": "stash"
        },
        "git_stash_save": {
          "kind": "function",
          "name": "git_stash_save",
          "location": {
            "file": "stash.h",
            "line": 67,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND where there's nothing to stash,\n or error code."
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Object id of the commit containing the stashed state.\n This commit is also the target of the direct reference refs/stash."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The owning repository."
            },
            {
              "name": "stasher",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "The identity of the person performing the stashing."
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "Optional description along with the stashed state."
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "direction": "in",
              "comment": "Flags to control the stashing process. (see GIT_STASH_* above)"
            }
          ],
          "comment": [
            "Save the local modifications to a new stash."
          ],
          "group": "stash"
        },
        "git_stash_apply_flags": {
          "kind": "enum",
          "name": "git_stash_apply_flags",
          "referenceName": "git_stash_apply_flags",
          "members": [
            {
              "name": "GIT_STASH_APPLY_DEFAULT",
              "value": "0"
            },
            {
              "name": "GIT_STASH_APPLY_REINSTATE_INDEX",
              "value": "1"
            }
          ],
          "comment": [
            "Stash application flags."
          ],
          "location": {
            "file": "stash.h",
            "line": 75,
            "column": 9
          },
          "group": "stash"
        },
        "git_stash_apply_progress_t": {
          "kind": "enum",
          "name": "git_stash_apply_progress_t",
          "referenceName": "git_stash_apply_progress_t",
          "members": [
            {
              "name": "GIT_STASH_APPLY_PROGRESS_NONE",
              "value": "0"
            },
            {
              "name": "GIT_STASH_APPLY_PROGRESS_LOADING_STASH",
              "comment": [
                "Loading the stashed data from the object database."
              ]
            },
            {
              "name": "GIT_STASH_APPLY_PROGRESS_ANALYZE_INDEX",
              "comment": [
                "The stored index is being analyzed."
              ]
            },
            {
              "name": "GIT_STASH_APPLY_PROGRESS_ANALYZE_MODIFIED",
              "comment": [
                "The modified files are being analyzed."
              ]
            },
            {
              "name": "GIT_STASH_APPLY_PROGRESS_ANALYZE_UNTRACKED",
              "comment": [
                "The untracked and ignored files are being analyzed."
              ]
            },
            {
              "name": "GIT_STASH_APPLY_PROGRESS_CHECKOUT_UNTRACKED",
              "comment": [
                "The untracked files are being written to disk."
              ]
            },
            {
              "name": "GIT_STASH_APPLY_PROGRESS_CHECKOUT_MODIFIED",
              "comment": [
                "The modified files are being written to disk."
              ]
            },
            {
              "name": "GIT_STASH_APPLY_PROGRESS_DONE",
              "comment": [
                "The stash was applied successfully."
              ]
            }
          ],
          "comment": [
            "Stash apply progression states"
          ],
          "location": {
            "file": "stash.h",
            "line": 85,
            "column": 9
          },
          "group": "stash",
          "parameterTo": [
            "git_stash_apply_progress_cb"
          ]
        },
        "git_stash_apply_progress_cb": {
          "kind": "callback",
          "name": "git_stash_apply_progress_cb",
          "type": "int (*)(git_stash_apply_progress_t, void *)",
          "comment": [
            "Stash application progress notification function.\n Return 0 to continue processing, or a negative value to\n abort the stash application."
          ],
          "location": {
            "file": "stash.h",
            "line": 115,
            "column": 26
          },
          "params": [
            {
              "type": "git_stash_apply_progress_t"
            },
            {
              "type": "void *"
            }
          ],
          "group": "stash",
          "typedef": true
        },
        "git_stash_apply_options": {
          "kind": "struct",
          "name": "git_stash_apply_options",
          "referenceName": "git_stash_apply_options",
          "comment": [
            "Stash application options structure",
            "Initialize with `GIT_STASH_APPLY_OPTIONS_INIT`. Alternatively, you can\n use `git_stash_apply_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "flags",
              "type": "uint32_t",
              "comment": [
                "See `git_stash_apply_flags`, above."
              ]
            },
            {
              "name": "checkout_options",
              "type": "git_checkout_options",
              "comment": [
                "Options to use when writing files to the working directory."
              ],
              "referenceType": "struct git_checkout_options"
            },
            {
              "name": "progress_cb",
              "type": "git_stash_apply_progress_cb",
              "comment": [
                "Optional callback to notify the consumer of application progress."
              ],
              "referenceType": "int (*)(git_stash_apply_progress_t, void *)"
            },
            {
              "name": "progress_payload",
              "type": "void *"
            }
          ],
          "location": {
            "file": "stash.h",
            "line": 126,
            "column": 16
          },
          "group": "stash",
          "parameterTo": [
            "git_stash_apply_init_options",
            "git_stash_apply_options_init",
            "git_stash_apply",
            "git_stash_pop"
          ]
        },
        "GIT_STASH_APPLY_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_STASH_APPLY_OPTIONS_VERSION",
          "location": {
            "file": "stash.h",
            "line": 140,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "stash"
        },
        "GIT_STASH_APPLY_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_STASH_APPLY_OPTIONS_INIT",
          "location": {
            "file": "stash.h",
            "line": 144,
            "column": 9
          },
          "value": "{ GIT_STASH_APPLY_OPTIONS_VERSION, GIT_STASH_APPLY_DEFAULT, GIT_CHECKOUT_OPTIONS_INIT }",
          "comment": "",
          "group": "stash"
        },
        "git_stash_apply_options_init": {
          "kind": "function",
          "name": "git_stash_apply_options_init",
          "location": {
            "file": "stash.h",
            "line": 156,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_stash_apply_options *",
              "direction": "in",
              "comment": "The `git_stash_apply_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_STASH_APPLY_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_stash_apply_options structure",
            "Initializes a `git_stash_apply_options` with default values. Equivalent to\n creating an instance with `GIT_STASH_APPLY_OPTIONS_INIT`."
          ],
          "group": "stash"
        },
        "git_stash_apply": {
          "kind": "function",
          "name": "git_stash_apply",
          "location": {
            "file": "stash.h",
            "line": 185,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if there's no stashed state for the\n         given index, GIT_EMERGECONFLICT if changes exist in the working\n         directory, or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The owning repository."
            },
            {
              "name": "index",
              "type": "size_t",
              "direction": "in",
              "comment": "The position within the stash list. 0 points to the\n              most recent stashed state."
            },
            {
              "name": "options",
              "type": "const git_stash_apply_options *",
              "direction": "in",
              "comment": "Optional options to control how stashes are applied."
            }
          ],
          "comment": [
            "Apply a single stashed state from the stash list.",
            "If local changes in the working directory conflict with changes in the\n stash then GIT_EMERGECONFLICT will be returned.  In this case, the index\n will always remain unmodified and all files in the working directory will\n remain unmodified.  However, if you are restoring untracked files or\n ignored files and there is a conflict when applying the modified files,\n then those files will remain in the working directory.",
            "If passing the GIT_STASH_APPLY_REINSTATE_INDEX flag and there would be\n conflicts when reinstating the index, the function will return\n GIT_EMERGECONFLICT and both the working directory and index will be left\n unmodified.",
            "Note that a minimum checkout strategy of `GIT_CHECKOUT_SAFE` is implied."
          ],
          "group": "stash"
        },
        "git_stash_cb": {
          "kind": "callback",
          "name": "git_stash_cb",
          "type": "int (*)(size_t, const char *, const git_oid *, void *)",
          "comment": [
            "This is a callback function you can provide to iterate over all the\n stashed states that will be invoked per entry."
          ],
          "location": {
            "file": "stash.h",
            "line": 201,
            "column": 26
          },
          "params": [
            {
              "name": "index",
              "direction": "in",
              "comment": "The position within the stash list. 0 points to the\n              most recent stashed state.",
              "type": "size_t"
            },
            {
              "name": "message",
              "direction": "in",
              "comment": "The stash message.",
              "type": "const char *"
            },
            {
              "name": "stash_id",
              "direction": "in",
              "comment": "The commit oid of the stashed state.",
              "type": "const git_oid *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Extra parameter to callback function.",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0 to continue iterating or non-zero to stop.",
            "type": "int"
          },
          "group": "stash",
          "parameterTo": [
            "git_stash_foreach"
          ],
          "typedef": true
        },
        "git_stash_foreach": {
          "kind": "function",
          "name": "git_stash_foreach",
          "location": {
            "file": "stash.h",
            "line": 221,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the stash."
            },
            {
              "name": "callback",
              "type": "git_stash_cb",
              "direction": "in",
              "comment": "Callback to invoke per found stashed state. The most\n                 recent stash state will be enumerated first.",
              "referenceType": "int (*)(size_t, const char *, const git_oid *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Extra parameter to callback function."
            }
          ],
          "comment": [
            "Loop over all the stashed states and issue a callback for each one.",
            "If the callback returns a non-zero value, this will stop looping."
          ],
          "group": "stash"
        },
        "git_stash_drop": {
          "kind": "function",
          "name": "git_stash_drop",
          "location": {
            "file": "stash.h",
            "line": 237,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if there's no stashed state for the given\n index, or error code."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The owning repository."
            },
            {
              "name": "index",
              "type": "size_t",
              "direction": "in",
              "comment": "The position within the stash list. 0 points to the\n most recent stashed state."
            }
          ],
          "comment": [
            "Remove a single stashed state from the stash list."
          ],
          "group": "stash"
        },
        "git_stash_pop": {
          "kind": "function",
          "name": "git_stash_pop",
          "location": {
            "file": "stash.h",
            "line": 253,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if there's no stashed state for the given\n index, or error code. (see git_stash_apply() above for details)"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The owning repository."
            },
            {
              "name": "index",
              "type": "size_t",
              "direction": "in",
              "comment": "The position within the stash list. 0 points to the\n              most recent stashed state."
            },
            {
              "name": "options",
              "type": "const git_stash_apply_options *",
              "direction": "in",
              "comment": "Optional options to control how stashes are applied."
            }
          ],
          "comment": [
            "Apply a single stashed state from the stash list and remove it from the list\n if successful."
          ],
          "group": "stash"
        }
      },
      "info": {
        "summary": "Git stash management routines"
      }
    },
    "status": {
      "apis": {
        "git_status_t": {
          "kind": "enum",
          "name": "git_status_t",
          "referenceName": "git_status_t",
          "members": [
            {
              "name": "GIT_STATUS_CURRENT",
              "value": "0"
            },
            {
              "name": "GIT_STATUS_INDEX_NEW"
            },
            {
              "name": "GIT_STATUS_INDEX_MODIFIED"
            },
            {
              "name": "GIT_STATUS_INDEX_DELETED"
            },
            {
              "name": "GIT_STATUS_INDEX_RENAMED"
            },
            {
              "name": "GIT_STATUS_INDEX_TYPECHANGE"
            },
            {
              "name": "GIT_STATUS_WT_NEW"
            },
            {
              "name": "GIT_STATUS_WT_MODIFIED"
            },
            {
              "name": "GIT_STATUS_WT_DELETED"
            },
            {
              "name": "GIT_STATUS_WT_TYPECHANGE"
            },
            {
              "name": "GIT_STATUS_WT_RENAMED"
            },
            {
              "name": "GIT_STATUS_WT_UNREADABLE"
            },
            {
              "name": "GIT_STATUS_IGNORED"
            },
            {
              "name": "GIT_STATUS_CONFLICTED"
            }
          ],
          "comment": [
            "Status flags for a single file.",
            "A combination of these values will be returned to indicate the status of\n a file.  Status compares the working directory, the index, and the\n current HEAD of the repository.  The `GIT_STATUS_INDEX` set of flags\n represents the status of file in the index relative to the HEAD, and the\n `GIT_STATUS_WT` set of flags represent the status of the file in the\n working directory relative to the index."
          ],
          "location": {
            "file": "status.h",
            "line": 34,
            "column": 9
          },
          "group": "status"
        },
        "git_status_cb": {
          "kind": "callback",
          "name": "git_status_cb",
          "type": "int (*)(const char *, unsigned int, void *)",
          "comment": [
            "Function pointer to receive status on individual files",
            "`path` is the relative path to the file from the root of the repository.",
            "`status_flags` is a combination of `git_status_t` values that apply.",
            "`payload` is the value you passed to the foreach function as payload."
          ],
          "location": {
            "file": "status.h",
            "line": 63,
            "column": 26
          },
          "params": [
            {
              "type": "const char *"
            },
            {
              "type": "unsigned int"
            },
            {
              "type": "void *"
            }
          ],
          "group": "status",
          "parameterTo": [
            "git_status_foreach",
            "git_status_foreach_ext"
          ],
          "typedef": true
        },
        "git_status_show_t": {
          "kind": "enum",
          "name": "git_status_show_t",
          "referenceName": "git_status_show_t",
          "members": [
            {
              "name": "GIT_STATUS_SHOW_INDEX_AND_WORKDIR",
              "value": "0"
            },
            {
              "name": "GIT_STATUS_SHOW_INDEX_ONLY",
              "value": "1"
            },
            {
              "name": "GIT_STATUS_SHOW_WORKDIR_ONLY",
              "value": "2"
            }
          ],
          "comment": [
            "Select the files on which to report status.",
            "With `git_status_foreach_ext`, this will control which changes get\n callbacks.  With `git_status_list_new`, these will control which\n changes are included in the list.",
            "- GIT_STATUS_SHOW_INDEX_AND_WORKDIR is the default.  This roughly\n   matches `git status --porcelain` regarding which files are\n   included and in what order.\n - GIT_STATUS_SHOW_INDEX_ONLY only gives status based on HEAD to index\n   comparison, not looking at working directory changes.\n - GIT_STATUS_SHOW_WORKDIR_ONLY only gives status based on index to\n   working directory comparison, not comparing the index to the HEAD."
          ],
          "location": {
            "file": "status.h",
            "line": 81,
            "column": 9
          },
          "group": "status"
        },
        "git_status_opt_t": {
          "kind": "enum",
          "name": "git_status_opt_t",
          "referenceName": "git_status_opt_t",
          "members": [
            {
              "name": "GIT_STATUS_OPT_INCLUDE_UNTRACKED"
            },
            {
              "name": "GIT_STATUS_OPT_INCLUDE_IGNORED"
            },
            {
              "name": "GIT_STATUS_OPT_INCLUDE_UNMODIFIED"
            },
            {
              "name": "GIT_STATUS_OPT_EXCLUDE_SUBMODULES"
            },
            {
              "name": "GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS"
            },
            {
              "name": "GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH"
            },
            {
              "name": "GIT_STATUS_OPT_RECURSE_IGNORED_DIRS"
            },
            {
              "name": "GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX"
            },
            {
              "name": "GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR"
            },
            {
              "name": "GIT_STATUS_OPT_SORT_CASE_SENSITIVELY"
            },
            {
              "name": "GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY"
            },
            {
              "name": "GIT_STATUS_OPT_RENAMES_FROM_REWRITES"
            },
            {
              "name": "GIT_STATUS_OPT_NO_REFRESH"
            },
            {
              "name": "GIT_STATUS_OPT_UPDATE_INDEX"
            },
            {
              "name": "GIT_STATUS_OPT_INCLUDE_UNREADABLE"
            },
            {
              "name": "GIT_STATUS_OPT_INCLUDE_UNREADABLE_AS_UNTRACKED"
            }
          ],
          "comment": [
            "Flags to control status callbacks",
            "- GIT_STATUS_OPT_INCLUDE_UNTRACKED says that callbacks should be made\n   on untracked files.  These will only be made if the workdir files are\n   included in the status \"show\" option.\n - GIT_STATUS_OPT_INCLUDE_IGNORED says that ignored files get callbacks.\n   Again, these callbacks will only be made if the workdir files are\n   included in the status \"show\" option.\n - GIT_STATUS_OPT_INCLUDE_UNMODIFIED indicates that callback should be\n   made even on unmodified files.\n - GIT_STATUS_OPT_EXCLUDE_SUBMODULES indicates that submodules should be\n   skipped.  This only applies if there are no pending typechanges to\n   the submodule (either from or to another type).\n - GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS indicates that all files in\n   untracked directories should be included.  Normally if an entire\n   directory is new, then just the top-level directory is included (with\n   a trailing slash on the entry name).  This flag says to include all\n   of the individual files in the directory instead.\n - GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH indicates that the given path\n   should be treated as a literal path, and not as a pathspec pattern.\n - GIT_STATUS_OPT_RECURSE_IGNORED_DIRS indicates that the contents of\n   ignored directories should be included in the status.  This is like\n   doing `git ls-files -o -i --exclude-standard` with core git.\n - GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX indicates that rename detection\n   should be processed between the head and the index and enables\n   the GIT_STATUS_INDEX_RENAMED as a possible status flag.\n - GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR indicates that rename\n   detection should be run between the index and the working directory\n   and enabled GIT_STATUS_WT_RENAMED as a possible status flag.\n - GIT_STATUS_OPT_SORT_CASE_SENSITIVELY overrides the native case\n   sensitivity for the file system and forces the output to be in\n   case-sensitive order\n - GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY overrides the native case\n   sensitivity for the file system and forces the output to be in\n   case-insensitive order\n - GIT_STATUS_OPT_RENAMES_FROM_REWRITES indicates that rename detection\n   should include rewritten files\n - GIT_STATUS_OPT_NO_REFRESH bypasses the default status behavior of\n   doing a \"soft\" index reload (i.e. reloading the index data if the\n   file on disk has been modified outside libgit2).\n - GIT_STATUS_OPT_UPDATE_INDEX tells libgit2 to refresh the stat cache\n   in the index for files that are unchanged but have out of date stat\n   information in the index.  It will result in less work being done on\n   subsequent calls to get status.  This is mutually exclusive with the\n   NO_REFRESH option.",
            "Calling `git_status_foreach()` is like calling the extended version\n with: GIT_STATUS_OPT_INCLUDE_IGNORED, GIT_STATUS_OPT_INCLUDE_UNTRACKED,\n and GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS.  Those options are bundled\n together as `GIT_STATUS_OPT_DEFAULTS` if you want them as a baseline."
          ],
          "location": {
            "file": "status.h",
            "line": 139,
            "column": 9
          },
          "group": "status"
        },
        "GIT_STATUS_OPT_DEFAULTS": {
          "kind": "macro",
          "name": "GIT_STATUS_OPT_DEFAULTS",
          "location": {
            "file": "status.h",
            "line": 161,
            "column": 9
          },
          "value": " (GIT_STATUS_OPT_INCLUDE_IGNORED | GIT_STATUS_OPT_INCLUDE_UNTRACKED | GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS)",
          "comment": "",
          "group": "status"
        },
        "git_status_options": {
          "kind": "struct",
          "name": "git_status_options",
          "referenceName": "git_status_options",
          "comment": [
            "Options to control how `git_status_foreach_ext()` will issue callbacks.",
            "Initialize with `GIT_STATUS_OPTIONS_INIT`. Alternatively, you can\n use `git_status_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The version"
              ]
            },
            {
              "name": "show",
              "type": "git_status_show_t",
              "comment": [
                "The `show` value is one of the `git_status_show_t` constants that\n control which files to scan and in what order."
              ],
              "referenceType": "enum git_status_show_t"
            },
            {
              "name": "flags",
              "type": "unsigned int",
              "comment": [
                "The `flags` value is an OR'ed combination of the `git_status_opt_t`\n values above."
              ]
            },
            {
              "name": "pathspec",
              "type": "git_strarray",
              "comment": [
                "The `pathspec` is an array of path patterns to match (using\n fnmatch-style matching), or just an array of paths to match exactly if\n `GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH` is specified in the flags."
              ],
              "referenceType": "struct git_strarray"
            },
            {
              "name": "baseline",
              "type": "git_tree *",
              "comment": [
                "The `baseline` is the tree to be used for comparison to the working directory\n and index; defaults to HEAD."
              ]
            }
          ],
          "location": {
            "file": "status.h",
            "line": 170,
            "column": 9
          },
          "group": "status",
          "parameterTo": [
            "git_status_init_options",
            "git_status_options_init",
            "git_status_foreach_ext",
            "git_status_list_new"
          ]
        },
        "GIT_STATUS_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_STATUS_OPTIONS_VERSION",
          "location": {
            "file": "status.h",
            "line": 199,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "status"
        },
        "GIT_STATUS_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_STATUS_OPTIONS_INIT",
          "location": {
            "file": "status.h",
            "line": 200,
            "column": 9
          },
          "value": "{GIT_STATUS_OPTIONS_VERSION}",
          "comment": "",
          "group": "status"
        },
        "git_status_options_init": {
          "kind": "function",
          "name": "git_status_options_init",
          "location": {
            "file": "status.h",
            "line": 212,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_status_options *",
              "direction": "in",
              "comment": "The `git_status_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_STATUS_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_status_options structure",
            "Initializes a `git_status_options` with default values. Equivalent to\n creating an instance with `GIT_STATUS_OPTIONS_INIT`."
          ],
          "group": "status"
        },
        "git_status_entry": {
          "kind": "struct",
          "name": "git_status_entry",
          "referenceName": "git_status_entry",
          "comment": [
            "A status entry, providing the differences between the file as it exists\n in HEAD and the index, and providing the differences between the index\n and the working directory.",
            "The `status` value provides the status flags for this file.",
            "The `head_to_index` value provides detailed information about the\n differences between the file in HEAD and the file in the index.",
            "The `index_to_workdir` value provides detailed information about the\n differences between the file in the index and the file in the\n working directory."
          ],
          "members": [
            {
              "name": "status",
              "type": "git_status_t",
              "referenceType": "enum git_status_t"
            },
            {
              "name": "head_to_index",
              "type": "git_diff_delta *"
            },
            {
              "name": "index_to_workdir",
              "type": "git_diff_delta *"
            }
          ],
          "location": {
            "file": "status.h",
            "line": 230,
            "column": 9
          },
          "group": "status",
          "returnedBy": [
            "git_status_byindex"
          ]
        },
        "git_status_foreach": {
          "kind": "function",
          "name": "git_status_foreach",
          "location": {
            "file": "status.h",
            "line": 252,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "callback",
              "type": "git_status_cb",
              "direction": "in",
              "comment": "The function to call on each file",
              "referenceType": "int (*)(const char *, unsigned int, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Pointer to pass through to callback function"
            }
          ],
          "comment": [
            "Gather file statuses and run a callback for each one.",
            "The callback is passed the path of the file, the status (a combination of\n the `git_status_t` values above) and the `payload` data pointer passed\n into this function.",
            "If the callback returns a non-zero value, this function will stop looping\n and return that value to caller."
          ],
          "group": "status"
        },
        "git_status_foreach_ext": {
          "kind": "function",
          "name": "git_status_foreach_ext",
          "location": {
            "file": "status.h",
            "line": 276,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository object"
            },
            {
              "name": "opts",
              "type": "const git_status_options *",
              "direction": "in",
              "comment": "Status options structure"
            },
            {
              "name": "callback",
              "type": "git_status_cb",
              "direction": "in",
              "comment": "The function to call on each file",
              "referenceType": "int (*)(const char *, unsigned int, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Pointer to pass through to callback function"
            }
          ],
          "comment": [
            "Gather file status information and run callbacks as requested.",
            "This is an extended version of the `git_status_foreach()` API that\n allows for more granular control over which paths will be processed and\n in what order.  See the `git_status_options` structure for details\n about the additional controls that this makes available.",
            "Note that if a `pathspec` is given in the `git_status_options` to filter\n the status, then the results from rename detection (if you enable it) may\n not be accurate.  To do rename detection properly, this must be called\n with no `pathspec` so that all files can be considered."
          ],
          "group": "status"
        },
        "git_status_file": {
          "kind": "function",
          "name": "git_status_file",
          "location": {
            "file": "status.h",
            "line": 308,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if the file is not found in the HEAD,\n      index, and work tree, GIT_EAMBIGUOUS if `path` matches multiple files\n      or if it refers to a folder, and -1 on other errors."
          },
          "params": [
            {
              "name": "status_flags",
              "type": "unsigned int *",
              "direction": "in",
              "comment": "Output combination of git_status_t values for file"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The exact path to retrieve status for relative to the\n repository working directory"
            }
          ],
          "comment": [
            "Get file status for a single file.",
            "This tries to get status for the filename that you give.  If no files\n match that name (in either the HEAD, index, or working directory), this\n returns GIT_ENOTFOUND.",
            "If the name matches multiple files (for example, if the `path` names a\n directory or if running on a case- insensitive filesystem and yet the\n HEAD has two entries that both match the path), then this returns\n GIT_EAMBIGUOUS because it cannot give correct results.",
            "This does not do any sort of rename detection.  Renames require a set of\n targets and because of the path filtering, there is not enough\n information to check renames correctly.  To check file status with rename\n detection, there is no choice but to do a full `git_status_list_new` and\n scan through looking for the path that you are interested in."
          ],
          "group": "status"
        },
        "git_status_list_new": {
          "kind": "function",
          "name": "git_status_list_new",
          "location": {
            "file": "status.h",
            "line": 326,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_status_list **",
              "direction": "in",
              "comment": "Pointer to store the status results in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository object"
            },
            {
              "name": "opts",
              "type": "const git_status_options *",
              "direction": "in",
              "comment": "Status options structure"
            }
          ],
          "comment": [
            "Gather file status information and populate the `git_status_list`.",
            "Note that if a `pathspec` is given in the `git_status_options` to filter\n the status, then the results from rename detection (if you enable it) may\n not be accurate.  To do rename detection properly, this must be called\n with no `pathspec` so that all files can be considered."
          ],
          "group": "status"
        },
        "git_status_list_entrycount": {
          "kind": "function",
          "name": "git_status_list_entrycount",
          "location": {
            "file": "status.h",
            "line": 340,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the number of status entries"
          },
          "params": [
            {
              "name": "statuslist",
              "type": "git_status_list *",
              "direction": "in",
              "comment": "Existing status list object"
            }
          ],
          "comment": [
            "Gets the count of status entries in this list.",
            "If there are no changes in status (at least according the options given\n when the status list was created), this can return 0."
          ],
          "group": "status"
        },
        "git_status_byindex": {
          "kind": "function",
          "name": "git_status_byindex",
          "location": {
            "file": "status.h",
            "line": 352,
            "column": 38
          },
          "returns": {
            "type": "const git_status_entry *",
            "comment": "Pointer to the entry; NULL if out of bounds"
          },
          "params": [
            {
              "name": "statuslist",
              "type": "git_status_list *",
              "direction": "in",
              "comment": "Existing status list object"
            },
            {
              "name": "idx",
              "type": "size_t",
              "direction": "in",
              "comment": "Position of the entry"
            }
          ],
          "comment": [
            "Get a pointer to one of the entries in the status list.",
            "The entry is not modifiable and should not be freed."
          ],
          "group": "status"
        },
        "git_status_list_free": {
          "kind": "function",
          "name": "git_status_list_free",
          "location": {
            "file": "status.h",
            "line": 361,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "statuslist",
              "type": "git_status_list *",
              "direction": "in",
              "comment": "Existing status list object"
            }
          ],
          "comment": [
            "Free an existing status list"
          ],
          "group": "status"
        },
        "git_status_should_ignore": {
          "kind": "function",
          "name": "git_status_should_ignore",
          "location": {
            "file": "status.h",
            "line": 380,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 if ignore rules could be processed for the file (regardless\n         of whether it exists or not), or an error \n<\n 0 if they could not."
          },
          "params": [
            {
              "name": "ignored",
              "type": "int *",
              "direction": "in",
              "comment": "Boolean returning 0 if the file is not ignored, 1 if it is"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "A repository object"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "The file to check ignores for, rooted at the repo's workdir."
            }
          ],
          "comment": [
            "Test if the ignore rules apply to a given file.",
            "This function checks the ignore rules to see if they would apply to the\n given file.  This indicates if the file would be ignored regardless of\n whether the file is already in the index or committed to the repository.",
            "One way to think of this is if you were to do \"git add .\" on the\n directory containing the file, would it be added or not?"
          ],
          "group": "status"
        },
        "git_status_list": {
          "kind": "struct",
          "name": "git_status_list",
          "referenceName": "struct git_status_list",
          "opaque": true,
          "comment": [
            "Representation of a status collection"
          ],
          "location": {
            "file": "types.h",
            "line": 192,
            "column": 32
          },
          "group": "status",
          "parameterTo": [
            "git_status_list_new",
            "git_status_list_entrycount",
            "git_status_byindex",
            "git_status_list_free",
            "git_status_list_get_perfdata"
          ]
        }
      },
      "info": {
        "summary": "Git file status routines"
      }
    },
    "strarray": {
      "apis": {
        "git_strarray": {
          "kind": "struct",
          "name": "git_strarray",
          "referenceName": "git_strarray",
          "comment": [
            "Array of strings"
          ],
          "members": [
            {
              "name": "strings",
              "type": "char **"
            },
            {
              "name": "count",
              "type": "size_t"
            }
          ],
          "location": {
            "file": "strarray.h",
            "line": 22,
            "column": 16
          },
          "group": "strarray",
          "parameterTo": [
            "git_strarray_copy",
            "git_strarray_free",
            "git_index_add_all",
            "git_index_remove_all",
            "git_index_update_all",
            "git_pathspec_new",
            "git_reference_list",
            "git_remote_get_fetch_refspecs",
            "git_remote_get_push_refspecs",
            "git_remote_connect",
            "git_remote_list",
            "git_remote_download",
            "git_remote_upload",
            "git_remote_fetch",
            "git_remote_push",
            "git_remote_rename",
            "git_reset_default",
            "git_strarray_dispose",
            "git_strarray_copy",
            "git_tag_list",
            "git_tag_list_match",
            "git_worktree_list"
          ]
        },
        "git_strarray_dispose": {
          "kind": "function",
          "name": "git_strarray_dispose",
          "location": {
            "file": "strarray.h",
            "line": 37,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "array",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "The git_strarray that contains strings to free"
            }
          ],
          "comment": [
            "Free the strings contained in a string array.  This method should\n be called on `git_strarray` objects that were provided by the\n library.  Not doing so, will result in a memory leak.",
            "This does not free the `git_strarray` itself, since the library will\n never allocate that object directly itself."
          ],
          "group": "strarray"
        },
        "git_strarray_copy": {
          "kind": "function",
          "name": "git_strarray_copy",
          "location": {
            "file": "strarray.h",
            "line": 49,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n 0 on allocation failure"
          },
          "params": [
            {
              "name": "tgt",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "target"
            },
            {
              "name": "src",
              "type": "const git_strarray *",
              "direction": "in",
              "comment": "source"
            }
          ],
          "comment": [
            "Copy a string array object from source to target.",
            "Note: target is overwritten and hence should be empty, otherwise its\n contents are leaked.  Call git_strarray_free() if necessary."
          ],
          "group": "strarray"
        }
      },
      "info": {
        "summary": "Git string array routines"
      }
    },
    "sys/stream": {
      "apis": {
        "GIT_STREAM_VERSION": {
          "kind": "macro",
          "name": "GIT_STREAM_VERSION",
          "location": {
            "file": "sys/stream.h",
            "line": 16,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/stream"
        },
        "git_stream": {
          "kind": "struct",
          "name": "git_stream",
          "referenceName": "git_stream",
          "comment": [
            "Every stream must have this struct as its first element, so the\n API can talk to it. You'd define your stream as",
            "struct my_stream {\n             git_stream parent;\n             ...\n     }",
            "and fill the functions"
          ],
          "members": [
            {
              "name": "version",
              "type": "int"
            },
            {
              "name": "encrypted",
              "type": "int"
            },
            {
              "name": "proxy_support",
              "type": "int"
            },
            {
              "name": "connect",
              "type": "int (*)(struct git_stream *)"
            },
            {
              "name": "certificate",
              "type": "int (*)(git_cert **, struct git_stream *)"
            },
            {
              "name": "set_proxy",
              "type": "int (*)(struct git_stream *, const git_proxy_options *)"
            },
            {
              "name": "read",
              "type": "ssize_t (*)(struct git_stream *, void *, size_t)"
            },
            {
              "name": "write",
              "type": "ssize_t (*)(struct git_stream *, const char *, size_t, int)"
            },
            {
              "name": "close",
              "type": "int (*)(struct git_stream *)"
            },
            {
              "name": "free",
              "type": "void (*)(struct git_stream *)"
            }
          ],
          "location": {
            "file": "sys/stream.h",
            "line": 29,
            "column": 16
          },
          "group": "sys/stream",
          "parameterTo": [
            "git_stream_cb"
          ]
        },
        "git_stream_registration": {
          "kind": "struct",
          "name": "git_stream_registration",
          "referenceName": "git_stream_registration",
          "members": [
            {
              "name": "version",
              "type": "int",
              "comment": [
                "The `version` field should be set to `GIT_STREAM_VERSION`."
              ]
            },
            {
              "name": "init",
              "type": "int (*)(git_stream **, const char *, const char *)",
              "comment": [
                "Called to create a new connection to a given host."
              ],
              "params": [
                {
                  "name": "out",
                  "direction": "in",
                  "comment": "The created stream"
                },
                {
                  "name": "host",
                  "direction": "in",
                  "comment": "The hostname to connect to; may be a hostname or\n             IP address"
                },
                {
                  "name": "port",
                  "direction": "in",
                  "comment": "The port to connect to; may be a port number or\n             service name"
                }
              ],
              "returns": {
                "comment": "0 or an error code"
              }
            },
            {
              "name": "wrap",
              "type": "int (*)(git_stream **, git_stream *, const char *)",
              "comment": [
                "Called to create a new connection on top of the given stream.  If\n this is a TLS stream, then this function may be used to proxy a\n TLS stream over an HTTP CONNECT session.  If this is unset, then\n HTTP CONNECT proxies will not be supported."
              ],
              "params": [
                {
                  "name": "out",
                  "direction": "in",
                  "comment": "The created stream"
                },
                {
                  "name": "in",
                  "direction": "in",
                  "comment": "An existing stream to add TLS to"
                },
                {
                  "name": "host",
                  "direction": "in",
                  "comment": "The hostname that the stream is connected to,\n             for certificate validation"
                }
              ],
              "returns": {
                "comment": "0 or an error code"
              }
            }
          ],
          "location": {
            "file": "sys/stream.h",
            "line": 43,
            "column": 9
          },
          "group": "sys/stream",
          "parameterTo": [
            "git_stream_register"
          ]
        },
        "git_stream_t": {
          "kind": "enum",
          "name": "git_stream_t",
          "referenceName": "git_stream_t",
          "members": [
            {
              "name": "GIT_STREAM_STANDARD",
              "value": "1",
              "comment": [
                "A standard (non-TLS) socket."
              ]
            },
            {
              "name": "GIT_STREAM_TLS",
              "value": "2",
              "comment": [
                "A TLS-encrypted socket."
              ]
            }
          ],
          "comment": [
            "The type of stream to register."
          ],
          "location": {
            "file": "sys/stream.h",
            "line": 77,
            "column": 9
          },
          "group": "sys/stream",
          "parameterTo": [
            "git_stream_register"
          ]
        },
        "git_stream_register": {
          "kind": "function",
          "name": "git_stream_register",
          "location": {
            "file": "sys/stream.h",
            "line": 98,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "type",
              "type": "git_stream_t",
              "direction": "in",
              "comment": "the type or types of stream to register",
              "referenceType": "enum git_stream_t"
            },
            {
              "name": "registration",
              "type": "git_stream_registration *",
              "direction": "in",
              "comment": "the registration data"
            }
          ],
          "comment": [
            "Register stream constructors for the library to use",
            "If a registration structure is already set, it will be overwritten.\n Pass `NULL` in order to deregister the current constructor and return\n to the system defaults.",
            "The type parameter may be a bitwise AND of types."
          ],
          "group": "sys/stream"
        },
        "git_stream_cb": {
          "kind": "callback",
          "name": "git_stream_cb",
          "type": "int (*)(git_stream **, const char *, const char *)",
          "location": {
            "file": "sys/stream.h",
            "line": 117,
            "column": 26
          },
          "deprecations": [
            "Provide a git_stream_registration to git_stream_register"
          ],
          "see": [
            "git_stream_registration"
          ],
          "params": [
            {
              "type": "git_stream **"
            },
            {
              "type": "const char *"
            },
            {
              "type": "const char *"
            }
          ],
          "group": "sys/stream",
          "parameterTo": [
            "git_stream_register_tls"
          ],
          "typedef": true
        },
        "git_stream_register_tls": {
          "kind": "function",
          "name": "git_stream_register_tls",
          "location": {
            "file": "sys/stream.h",
            "line": 130,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "ctor",
              "type": "git_stream_cb",
              "referenceType": "int (*)(git_stream **, const char *, const char *)"
            }
          ],
          "comment": [
            "Register a TLS stream constructor for the library to use.  This stream\n will not support HTTP CONNECT proxies.  This internally calls\n `git_stream_register` and is preserved for backward compatibility.",
            "This function is deprecated, but there is no plan to remove this\n function at this time."
          ],
          "deprecations": [
            "Provide a git_stream_registration to git_stream_register"
          ],
          "see": [
            "git_stream_register"
          ],
          "group": "sys/stream"
        }
      },
      "info": {}
    },
    "submodule": {
      "apis": {
        "git_submodule_status_t": {
          "kind": "enum",
          "name": "git_submodule_status_t",
          "referenceName": "git_submodule_status_t",
          "members": [
            {
              "name": "GIT_SUBMODULE_STATUS_IN_HEAD"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_IN_INDEX"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_IN_CONFIG"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_IN_WD"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_INDEX_ADDED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_INDEX_DELETED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_INDEX_MODIFIED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_WD_UNINITIALIZED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_WD_ADDED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_WD_DELETED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_WD_MODIFIED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_WD_WD_MODIFIED"
            },
            {
              "name": "GIT_SUBMODULE_STATUS_WD_UNTRACKED"
            }
          ],
          "comment": [
            "Return codes for submodule status.",
            "A combination of these flags will be returned to describe the status of a\n submodule.  Depending on the \"ignore\" property of the submodule, some of\n the flags may never be returned because they indicate changes that are\n supposed to be ignored.",
            "Submodule info is contained in 4 places: the HEAD tree, the index, config\n files (both .git/config and .gitmodules), and the working directory.  Any\n or all of those places might be missing information about the submodule\n depending on what state the repo is in.  We consider all four places to\n build the combination of status flags.",
            "There are four values that are not really status, but give basic info\n about what sources of submodule data are available.  These will be\n returned even if ignore is set to \"ALL\".",
            "* IN_HEAD   - superproject head contains submodule\n * IN_INDEX  - superproject index contains submodule\n * IN_CONFIG - superproject gitmodules has submodule\n * IN_WD     - superproject workdir has submodule",
            "The following values will be returned so long as ignore is not \"ALL\".",
            "* INDEX_ADDED       - in index, not in head\n * INDEX_DELETED     - in head, not in index\n * INDEX_MODIFIED    - index and head don't match\n * WD_UNINITIALIZED  - workdir contains empty directory\n * WD_ADDED          - in workdir, not index\n * WD_DELETED        - in index, not workdir\n * WD_MODIFIED       - index and workdir head don't match",
            "The following can only be returned if ignore is \"NONE\" or \"UNTRACKED\".",
            "* WD_INDEX_MODIFIED - submodule workdir index is dirty\n * WD_WD_MODIFIED    - submodule workdir has modified files",
            "Lastly, the following will only be returned for ignore \"NONE\".",
            "* WD_UNTRACKED      - wd contains untracked files"
          ],
          "location": {
            "file": "submodule.h",
            "line": 74,
            "column": 9
          },
          "group": "submodule"
        },
        "GIT_SUBMODULE_STATUS__IN_FLAGS": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_STATUS__IN_FLAGS",
          "location": {
            "file": "submodule.h",
            "line": 91,
            "column": 9
          },
          "value": "0x000Fu",
          "comment": "",
          "group": "submodule"
        },
        "GIT_SUBMODULE_STATUS__INDEX_FLAGS": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_STATUS__INDEX_FLAGS",
          "location": {
            "file": "submodule.h",
            "line": 92,
            "column": 9
          },
          "value": "0x0070u",
          "comment": "",
          "group": "submodule"
        },
        "GIT_SUBMODULE_STATUS__WD_FLAGS": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_STATUS__WD_FLAGS",
          "location": {
            "file": "submodule.h",
            "line": 93,
            "column": 9
          },
          "value": "0x3F80u",
          "comment": "",
          "group": "submodule"
        },
        "GIT_SUBMODULE_STATUS_IS_UNMODIFIED(S)": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_STATUS_IS_UNMODIFIED(S)",
          "location": {
            "file": "submodule.h",
            "line": 96,
            "column": 9
          },
          "value": " (((S) & ~GIT_SUBMODULE_STATUS__IN_FLAGS) == 0)",
          "comment": "",
          "group": "submodule"
        },
        "GIT_SUBMODULE_STATUS_IS_INDEX_UNMODIFIED(S)": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_STATUS_IS_INDEX_UNMODIFIED(S)",
          "location": {
            "file": "submodule.h",
            "line": 99,
            "column": 9
          },
          "value": " (((S) & GIT_SUBMODULE_STATUS__INDEX_FLAGS) == 0)",
          "comment": "",
          "group": "submodule"
        },
        "GIT_SUBMODULE_STATUS_IS_WD_UNMODIFIED(S)": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_STATUS_IS_WD_UNMODIFIED(S)",
          "location": {
            "file": "submodule.h",
            "line": 103,
            "column": 9
          },
          "value": " (((S) & (GIT_SUBMODULE_STATUS__WD_FLAGS & ~GIT_SUBMODULE_STATUS_WD_UNINITIALIZED)) == 0)",
          "comment": "",
          "group": "submodule"
        },
        "GIT_SUBMODULE_STATUS_IS_WD_DIRTY(S)": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_STATUS_IS_WD_DIRTY(S)",
          "location": {
            "file": "submodule.h",
            "line": 108,
            "column": 9
          },
          "value": " (((S) & (GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED | GIT_SUBMODULE_STATUS_WD_WD_MODIFIED | GIT_SUBMODULE_STATUS_WD_UNTRACKED)) != 0)",
          "comment": "",
          "group": "submodule"
        },
        "git_submodule_cb": {
          "kind": "callback",
          "name": "git_submodule_cb",
          "type": "int (*)(git_submodule *, const char *, void *)",
          "comment": [
            "Function pointer to receive each submodule"
          ],
          "location": {
            "file": "submodule.h",
            "line": 118,
            "column": 26
          },
          "params": [
            {
              "name": "sm",
              "direction": "in",
              "comment": "git_submodule currently being visited",
              "type": "git_submodule *"
            },
            {
              "name": "name",
              "direction": "in",
              "comment": "name of the submodule",
              "type": "const char *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "value you passed to the foreach function as payload",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "0 on success or error code",
            "type": "int"
          },
          "group": "submodule",
          "parameterTo": [
            "git_submodule_foreach"
          ],
          "typedef": true
        },
        "git_submodule_update_options": {
          "kind": "struct",
          "name": "git_submodule_update_options",
          "referenceName": "git_submodule_update_options",
          "comment": [
            "Submodule update options structure",
            "Initialize with `GIT_SUBMODULE_UPDATE_OPTIONS_INIT`. Alternatively, you can\n use `git_submodule_update_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "checkout_opts",
              "type": "git_checkout_options",
              "comment": [
                "These options are passed to the checkout step. To disable\n checkout, set the `checkout_strategy` to\n `GIT_CHECKOUT_NONE`. Generally you will want the use\n GIT_CHECKOUT_SAFE to update files in the working\n directory."
              ],
              "referenceType": "struct git_checkout_options"
            },
            {
              "name": "fetch_opts",
              "type": "git_fetch_options",
              "comment": [
                "Options which control the fetch, including callbacks.",
                "The callbacks to use for reporting fetch progress, and for acquiring\n credentials in the event they are needed."
              ],
              "referenceType": "struct git_fetch_options"
            },
            {
              "name": "allow_fetch",
              "type": "int",
              "comment": [
                "Allow fetching from the submodule's default remote if the target\n commit isn't found. Enabled by default."
              ]
            }
          ],
          "location": {
            "file": "submodule.h",
            "line": 128,
            "column": 16
          },
          "group": "submodule",
          "parameterTo": [
            "git_submodule_update_init_options",
            "git_submodule_update_options_init",
            "git_submodule_update",
            "git_submodule_clone"
          ]
        },
        "GIT_SUBMODULE_UPDATE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_UPDATE_OPTIONS_VERSION",
          "location": {
            "file": "submodule.h",
            "line": 155,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "submodule"
        },
        "GIT_SUBMODULE_UPDATE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_SUBMODULE_UPDATE_OPTIONS_INIT",
          "location": {
            "file": "submodule.h",
            "line": 159,
            "column": 9
          },
          "value": " { GIT_SUBMODULE_UPDATE_OPTIONS_VERSION, { GIT_CHECKOUT_OPTIONS_VERSION, GIT_CHECKOUT_SAFE }, GIT_FETCH_OPTIONS_INIT, 1 }",
          "comment": "",
          "group": "submodule"
        },
        "git_submodule_update_options_init": {
          "kind": "function",
          "name": "git_submodule_update_options_init",
          "location": {
            "file": "submodule.h",
            "line": 171,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_submodule_update_options *",
              "direction": "in",
              "comment": "The `git_submodule_update_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_SUBMODULE_UPDATE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_submodule_update_options structure",
            "Initializes a `git_submodule_update_options` with default values. Equivalent to\n creating an instance with `GIT_SUBMODULE_UPDATE_OPTIONS_INIT`."
          ],
          "group": "submodule"
        },
        "git_submodule_update": {
          "kind": "function",
          "name": "git_submodule_update",
          "location": {
            "file": "submodule.h",
            "line": 192,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, any non-zero return value from a callback\n         function, or a negative value to indicate an error (use\n         `git_error_last` for a detailed error message)."
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Submodule object"
            },
            {
              "name": "init",
              "type": "int",
              "direction": "in",
              "comment": "If the submodule is not initialized, setting this flag to true\n        will initialize the submodule before updating. Otherwise, this will\n        return an error if attempting to update an uninitialzed repository.\n        but setting this to true forces them to be updated."
            },
            {
              "name": "options",
              "type": "git_submodule_update_options *",
              "direction": "in",
              "comment": "configuration options for the update.  If NULL, the\n        function works as though GIT_SUBMODULE_UPDATE_OPTIONS_INIT was passed."
            }
          ],
          "comment": [
            "Update a submodule. This will clone a missing submodule and\n checkout the subrepository to the commit specified in the index of\n the containing repository. If the submodule repository doesn't contain\n the target commit (e.g. because fetchRecurseSubmodules isn't set), then\n the submodule is fetched using the fetch options supplied in options."
          ],
          "group": "submodule"
        },
        "git_submodule_lookup": {
          "kind": "function",
          "name": "git_submodule_lookup",
          "location": {
            "file": "submodule.h",
            "line": 221,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_ENOTFOUND if submodule does not exist,\n         GIT_EEXISTS if a repository is found in working directory only,\n         -1 on other errors."
          },
          "params": [
            {
              "name": "out",
              "type": "git_submodule **",
              "direction": "in",
              "comment": "Output ptr to submodule; pass NULL to just get return code"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The parent repository"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "The name of or path to the submodule; trailing slashes okay"
            }
          ],
          "comment": [
            "Lookup submodule information by name or path.",
            "Given either the submodule name or path (they are usually the same), this\n returns a structure describing the submodule.",
            "There are two expected error scenarios:",
            "- The submodule is not mentioned in the HEAD, the index, and the config,\n   but does \"exist\" in the working directory (i.e. there is a subdirectory\n   that appears to be a Git repository).  In this case, this function\n   returns GIT_EEXISTS to indicate a sub-repository exists but not in a\n   state where a git_submodule can be instantiated.\n - The submodule is not mentioned in the HEAD, index, or config and the\n   working directory doesn't contain a value git repo at that path.\n   There may or may not be anything else at that path, but nothing that\n   looks like a submodule.  In this case, this returns GIT_ENOTFOUND.",
            "You must call `git_submodule_free` when done with the submodule."
          ],
          "group": "submodule"
        },
        "git_submodule_free": {
          "kind": "function",
          "name": "git_submodule_free",
          "location": {
            "file": "submodule.h",
            "line": 231,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Submodule object"
            }
          ],
          "comment": [
            "Release a submodule"
          ],
          "group": "submodule"
        },
        "git_submodule_foreach": {
          "kind": "function",
          "name": "git_submodule_foreach",
          "location": {
            "file": "submodule.h",
            "line": 251,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on error, or non-zero return value of callback"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository"
            },
            {
              "name": "callback",
              "type": "git_submodule_cb",
              "direction": "in",
              "comment": "Function to be called with the name of each submodule.\n        Return a non-zero value to terminate the iteration.",
              "referenceType": "int (*)(git_submodule *, const char *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Extra data to pass to callback"
            }
          ],
          "comment": [
            "Iterate over all tracked submodules of a repository.",
            "See the note on `git_submodule` above.  This iterates over the tracked\n submodules as described therein.",
            "If you are concerned about items in the working directory that look like\n submodules but are not tracked, the diff API will generate a diff record\n for workdir items that look like submodules but are not tracked, showing\n them as added in the workdir.  Also, the status API will treat the entire\n subdirectory of a contained git repo as a single GIT_STATUS_WT_NEW item."
          ],
          "group": "submodule"
        },
        "git_submodule_add_setup": {
          "kind": "function",
          "name": "git_submodule_add_setup",
          "location": {
            "file": "submodule.h",
            "line": 282,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EEXISTS if submodule already exists,\n         -1 on other errors."
          },
          "params": [
            {
              "name": "out",
              "type": "git_submodule **",
              "direction": "in",
              "comment": "The newly created submodule ready to open for clone"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository in which you want to create the submodule"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "URL for the submodule's remote"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path at which the submodule should be created"
            },
            {
              "name": "use_gitlink",
              "type": "int",
              "direction": "in",
              "comment": "Should workdir contain a gitlink to the repo in\n        .git/modules vs. repo directly in workdir."
            }
          ],
          "comment": [
            "Set up a new git submodule for checkout.",
            "This does \"git submodule add\" up to the fetch and checkout of the\n submodule contents.  It preps a new submodule, creates an entry in\n .gitmodules and creates an empty initialized repository either at the\n given path in the working directory or in .git/modules with a gitlink\n from the working directory to the new repo.",
            "To fully emulate \"git submodule add\" call this function, then open the\n submodule repo and perform the clone step as needed (if you don't need\n anything custom see `git_submodule_add_clone()`). Lastly, call\n `git_submodule_add_finalize()` to wrap up adding the new submodule and\n .gitmodules to the index to be ready to commit.",
            "You must call `git_submodule_free` on the submodule object when done."
          ],
          "group": "submodule"
        },
        "git_submodule_clone": {
          "kind": "function",
          "name": "git_submodule_clone",
          "location": {
            "file": "submodule.h",
            "line": 300,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, -1 on other errors (see git_clone)."
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "The newly created repository object. Optional."
            },
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "The submodule currently waiting for its clone."
            },
            {
              "name": "opts",
              "type": "const git_submodule_update_options *",
              "direction": "in",
              "comment": "The options to use."
            }
          ],
          "comment": [
            "Perform the clone step for a newly created submodule.",
            "This performs the necessary `git_clone` to setup a newly-created submodule."
          ],
          "group": "submodule"
        },
        "git_submodule_add_finalize": {
          "kind": "function",
          "name": "git_submodule_add_finalize",
          "location": {
            "file": "submodule.h",
            "line": 315,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "The submodule to finish adding."
            }
          ],
          "comment": [
            "Resolve the setup of a new git submodule.",
            "This should be called on a submodule once you have called add setup\n and done the clone of the submodule.  This adds the .gitmodules file\n and the newly cloned submodule to the index to be ready to be committed\n (but doesn't actually do the commit)."
          ],
          "group": "submodule"
        },
        "git_submodule_add_to_index": {
          "kind": "function",
          "name": "git_submodule_add_to_index",
          "location": {
            "file": "submodule.h",
            "line": 327,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "The submodule to add to the index"
            },
            {
              "name": "write_index",
              "type": "int",
              "direction": "in",
              "comment": "Boolean if this should immediately write the index\n            file.  If you pass this as false, you will have to get the\n            git_index and explicitly call `git_index_write()` on it to\n            save the change."
            }
          ],
          "comment": [
            "Add current submodule HEAD commit to index of superproject."
          ],
          "group": "submodule"
        },
        "git_submodule_owner": {
          "kind": "function",
          "name": "git_submodule_owner",
          "location": {
            "file": "submodule.h",
            "line": 342,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "Pointer to `git_repository`"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the containing repository for a submodule.",
            "This returns a pointer to the repository that contains the submodule.\n This is a just a reference to the repository that was passed to the\n original `git_submodule_lookup()` call, so if that repository has been\n freed, then this may be a dangling reference."
          ],
          "group": "submodule"
        },
        "git_submodule_name": {
          "kind": "function",
          "name": "git_submodule_name",
          "location": {
            "file": "submodule.h",
            "line": 350,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "Pointer to the submodule name"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the name of submodule."
          ],
          "group": "submodule"
        },
        "git_submodule_path": {
          "kind": "function",
          "name": "git_submodule_path",
          "location": {
            "file": "submodule.h",
            "line": 361,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "Pointer to the submodule path"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the path to the submodule.",
            "The path is almost always the same as the submodule name, but the\n two are actually not required to match."
          ],
          "group": "submodule"
        },
        "git_submodule_url": {
          "kind": "function",
          "name": "git_submodule_url",
          "location": {
            "file": "submodule.h",
            "line": 369,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "Pointer to the submodule url"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the URL for the submodule."
          ],
          "group": "submodule"
        },
        "git_submodule_resolve_url": {
          "kind": "function",
          "name": "git_submodule_resolve_url",
          "location": {
            "file": "submodule.h",
            "line": 379,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_buf *",
              "direction": "in",
              "comment": "buffer to store the absolute submodule url in"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Pointer to repository object"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "Relative url"
            }
          ],
          "comment": [
            "Resolve a submodule url relative to the given repository."
          ],
          "group": "submodule"
        },
        "git_submodule_branch": {
          "kind": "function",
          "name": "git_submodule_branch",
          "location": {
            "file": "submodule.h",
            "line": 387,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "Pointer to the submodule branch"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the branch for the submodule."
          ],
          "group": "submodule"
        },
        "git_submodule_set_branch": {
          "kind": "function",
          "name": "git_submodule_set_branch",
          "location": {
            "file": "submodule.h",
            "line": 400,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to affect"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the submodule to configure"
            },
            {
              "name": "branch",
              "type": "const char *",
              "direction": "in",
              "comment": "Branch that should be used for the submodule"
            }
          ],
          "comment": [
            "Set the branch for the submodule in the configuration",
            "After calling this, you may wish to call `git_submodule_sync()` to\n write the changes to the checked out submodule repository."
          ],
          "group": "submodule"
        },
        "git_submodule_set_url": {
          "kind": "function",
          "name": "git_submodule_set_url",
          "location": {
            "file": "submodule.h",
            "line": 414,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to affect"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the submodule to configure"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "URL that should be used for the submodule"
            }
          ],
          "comment": [
            "Set the URL for the submodule in the configuration",
            "After calling this, you may wish to call `git_submodule_sync()` to\n write the changes to the checked out submodule repository."
          ],
          "group": "submodule"
        },
        "git_submodule_index_id": {
          "kind": "function",
          "name": "git_submodule_index_id",
          "location": {
            "file": "submodule.h",
            "line": 422,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "Pointer to git_oid or NULL if submodule is not in index."
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the OID for the submodule in the index."
          ],
          "group": "submodule"
        },
        "git_submodule_head_id": {
          "kind": "function",
          "name": "git_submodule_head_id",
          "location": {
            "file": "submodule.h",
            "line": 430,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "Pointer to git_oid or NULL if submodule is not in the HEAD."
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the OID for the submodule in the current HEAD tree."
          ],
          "group": "submodule"
        },
        "git_submodule_wd_id": {
          "kind": "function",
          "name": "git_submodule_wd_id",
          "location": {
            "file": "submodule.h",
            "line": 443,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "Pointer to git_oid or NULL if submodule is not checked out."
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Pointer to submodule object"
            }
          ],
          "comment": [
            "Get the OID for the submodule in the current working directory.",
            "This returns the OID that corresponds to looking up 'HEAD' in the checked\n out submodule.  If there are pending changes in the index or anything\n else, this won't notice that.  You should call `git_submodule_status()`\n for a more complete picture about the state of the working directory."
          ],
          "group": "submodule"
        },
        "git_submodule_ignore": {
          "kind": "function",
          "name": "git_submodule_ignore",
          "location": {
            "file": "submodule.h",
            "line": 468,
            "column": 36
          },
          "returns": {
            "type": "git_submodule_ignore_t",
            "comment": "The current git_submodule_ignore_t valyue what will be used for\n         this submodule."
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "The submodule to check"
            }
          ],
          "comment": [
            "Get the ignore rule that will be used for the submodule.",
            "These values control the behavior of `git_submodule_status()` for this\n submodule.  There are four ignore values:",
            "- **GIT_SUBMODULE_IGNORE_NONE** will consider any change to the contents\n    of the submodule from a clean checkout to be dirty, including the\n    addition of untracked files.  This is the default if unspecified.\n  - **GIT_SUBMODULE_IGNORE_UNTRACKED** examines the contents of the\n    working tree (i.e. call `git_status_foreach()` on the submodule) but\n    UNTRACKED files will not count as making the submodule dirty.\n  - **GIT_SUBMODULE_IGNORE_DIRTY** means to only check if the HEAD of the\n    submodule has moved for status.  This is fast since it does not need to\n    scan the working tree of the submodule at all.\n  - **GIT_SUBMODULE_IGNORE_ALL** means not to open the submodule repo.\n    The working directory will be consider clean so long as there is a\n    checked out version present."
          ],
          "group": "submodule"
        },
        "git_submodule_set_ignore": {
          "kind": "function",
          "name": "git_submodule_set_ignore",
          "location": {
            "file": "submodule.h",
            "line": 481,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to affect"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the submdule"
            },
            {
              "name": "ignore",
              "type": "git_submodule_ignore_t",
              "direction": "in",
              "comment": "The new value for the ignore rule",
              "referenceType": "enum git_submodule_ignore_t"
            }
          ],
          "comment": [
            "Set the ignore rule for the submodule in the configuration",
            "This does not affect any currently-loaded instances."
          ],
          "group": "submodule"
        },
        "git_submodule_update_strategy": {
          "kind": "function",
          "name": "git_submodule_update_strategy",
          "location": {
            "file": "submodule.h",
            "line": 496,
            "column": 36
          },
          "returns": {
            "type": "git_submodule_update_t",
            "comment": "The current git_submodule_update_t value that will be used\n         for this submodule."
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "The submodule to check"
            }
          ],
          "comment": [
            "Get the update rule that will be used for the submodule.",
            "This value controls the behavior of the `git submodule update` command.\n There are four useful values documented with `git_submodule_update_t`."
          ],
          "group": "submodule"
        },
        "git_submodule_set_update": {
          "kind": "function",
          "name": "git_submodule_set_update",
          "location": {
            "file": "submodule.h",
            "line": 509,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to affect"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the name of the submodule to configure"
            },
            {
              "name": "update",
              "type": "git_submodule_update_t",
              "direction": "in",
              "comment": "The new value to use",
              "referenceType": "enum git_submodule_update_t"
            }
          ],
          "comment": [
            "Set the update rule for the submodule in the configuration",
            "This setting won't affect any existing instances."
          ],
          "group": "submodule"
        },
        "git_submodule_fetch_recurse_submodules": {
          "kind": "function",
          "name": "git_submodule_fetch_recurse_submodules",
          "location": {
            "file": "submodule.h",
            "line": 525,
            "column": 37
          },
          "returns": {
            "type": "git_submodule_recurse_t",
            "comment": "0 if fetchRecurseSubmodules is false, 1 if true"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *"
            }
          ],
          "comment": [
            "Read the fetchRecurseSubmodules rule for a submodule.",
            "This accesses the submodule.\n<name>.fetchRecurseSubmodules value for\n the submodule that controls fetching behavior for the submodule.",
            "Note that at this time, libgit2 does not honor this setting and the\n fetch functionality current ignores submodules."
          ],
          "group": "submodule"
        },
        "git_submodule_set_fetch_recurse_submodules": {
          "kind": "function",
          "name": "git_submodule_set_fetch_recurse_submodules",
          "location": {
            "file": "submodule.h",
            "line": 538,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "old value for fetchRecurseSubmodules"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository to affect"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "the submodule to configure"
            },
            {
              "name": "fetch_recurse_submodules",
              "type": "git_submodule_recurse_t",
              "direction": "in",
              "comment": "Boolean value",
              "referenceType": "enum git_submodule_recurse_t"
            }
          ],
          "comment": [
            "Set the fetchRecurseSubmodules rule for a submodule in the configuration",
            "This setting won't affect any existing instances."
          ],
          "group": "submodule"
        },
        "git_submodule_init": {
          "kind": "function",
          "name": "git_submodule_init",
          "location": {
            "file": "submodule.h",
            "line": 556,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure."
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "The submodule to write into the superproject config"
            },
            {
              "name": "overwrite",
              "type": "int",
              "direction": "in",
              "comment": "By default, existing entries will not be overwritten,\n                  but setting this to true forces them to be updated."
            }
          ],
          "comment": [
            "Copy submodule info into \".git/config\" file.",
            "Just like \"git submodule init\", this copies information about the\n submodule into \".git/config\".  You can use the accessor functions\n above to alter the in-memory git_submodule object and control what\n is written to the config, overriding what is in .gitmodules."
          ],
          "group": "submodule"
        },
        "git_submodule_repo_init": {
          "kind": "function",
          "name": "git_submodule_repo_init",
          "location": {
            "file": "submodule.h",
            "line": 571,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on failure."
          },
          "params": [
            {
              "name": "out",
              "type": "git_repository **",
              "direction": "in",
              "comment": "Output pointer to the created git repository."
            },
            {
              "name": "sm",
              "type": "const git_submodule *",
              "direction": "in",
              "comment": "The submodule to create a new subrepository from."
            },
            {
              "name": "use_gitlink",
              "type": "int",
              "direction": "in",
              "comment": "Should the workdir contain a gitlink to\n        the repo in .git/modules vs. repo directly in workdir."
            }
          ],
          "comment": [
            "Set up the subrepository for a submodule in preparation for clone.",
            "This function can be called to init and set up a submodule\n repository from a submodule in preparation to clone it from\n its remote."
          ],
          "group": "submodule"
        },
        "git_submodule_sync": {
          "kind": "function",
          "name": "git_submodule_sync",
          "location": {
            "file": "submodule.h",
            "line": 584,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *"
            }
          ],
          "comment": [
            "Copy submodule remote info into submodule repo.",
            "This copies the information about the submodules URL into the checked out\n submodule config, acting like \"git submodule sync\".  This is useful if\n you have altered the URL for the submodule (or it has been altered by a\n fetch of upstream changes) and you need to update your local repo."
          ],
          "group": "submodule"
        },
        "git_submodule_open": {
          "kind": "function",
          "name": "git_submodule_open",
          "location": {
            "file": "submodule.h",
            "line": 598,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 if submodule repo could not be opened."
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository **",
              "direction": "in",
              "comment": "Pointer to the submodule repo which was opened"
            },
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Submodule to be opened"
            }
          ],
          "comment": [
            "Open the repository for a submodule.",
            "This is a newly opened repository object.  The caller is responsible for\n calling `git_repository_free()` on it when done.  Multiple calls to this\n function will return distinct `git_repository` objects.  This will only\n work if the submodule is checked out into the working directory."
          ],
          "group": "submodule"
        },
        "git_submodule_reload": {
          "kind": "function",
          "name": "git_submodule_reload",
          "location": {
            "file": "submodule.h",
            "line": 612,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on error"
          },
          "params": [
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "The submodule to reload"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Force reload even if the data doesn't seem out of date"
            }
          ],
          "comment": [
            "Reread submodule info from config, index, and HEAD.",
            "Call this to reread cached submodule information for this submodule if\n you have reason to believe that it has changed."
          ],
          "group": "submodule"
        },
        "git_submodule_status": {
          "kind": "function",
          "name": "git_submodule_status",
          "location": {
            "file": "submodule.h",
            "line": 628,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on error"
          },
          "params": [
            {
              "name": "status",
              "type": "unsigned int *",
              "direction": "in",
              "comment": "Combination of `GIT_SUBMODULE_STATUS` flags"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to look"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "name of the submodule"
            },
            {
              "name": "ignore",
              "type": "git_submodule_ignore_t",
              "direction": "in",
              "comment": "the ignore rules to follow",
              "referenceType": "enum git_submodule_ignore_t"
            }
          ],
          "comment": [
            "Get the status for a submodule.",
            "This looks at a submodule and tries to determine the status.  It\n will return a combination of the `GIT_SUBMODULE_STATUS` values above.\n How deeply it examines the working directory to do this will depend\n on the `git_submodule_ignore_t` value for the submodule."
          ],
          "group": "submodule"
        },
        "git_submodule_location": {
          "kind": "function",
          "name": "git_submodule_location",
          "location": {
            "file": "submodule.h",
            "line": 648,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, \n<\n0 on error"
          },
          "params": [
            {
              "name": "location_status",
              "type": "unsigned int *",
              "direction": "in",
              "comment": "Combination of first four `GIT_SUBMODULE_STATUS` flags"
            },
            {
              "name": "submodule",
              "type": "git_submodule *",
              "direction": "in",
              "comment": "Submodule for which to get status"
            }
          ],
          "comment": [
            "Get the locations of submodule information.",
            "This is a bit like a very lightweight version of `git_submodule_status`.\n It just returns a made of the first four submodule status values (i.e.\n the ones like GIT_SUBMODULE_STATUS_IN_HEAD, etc) that tell you where the\n submodule data comes from (i.e. the HEAD commit, gitmodules file, etc.).\n This can be useful if you want to know if the submodule is present in the\n working directory at this point in time, etc."
          ],
          "group": "submodule"
        },
        "git_submodule": {
          "kind": "struct",
          "name": "git_submodule",
          "referenceName": "struct git_submodule",
          "opaque": true,
          "comment": [
            "Opaque structure representing a submodule."
          ],
          "location": {
            "file": "types.h",
            "line": 258,
            "column": 30
          },
          "group": "submodule",
          "parameterTo": [
            "git_submodule_cb",
            "git_submodule_update",
            "git_submodule_lookup",
            "git_submodule_free",
            "git_submodule_add_setup",
            "git_submodule_clone",
            "git_submodule_add_finalize",
            "git_submodule_add_to_index",
            "git_submodule_owner",
            "git_submodule_name",
            "git_submodule_path",
            "git_submodule_url",
            "git_submodule_branch",
            "git_submodule_index_id",
            "git_submodule_head_id",
            "git_submodule_wd_id",
            "git_submodule_ignore",
            "git_submodule_update_strategy",
            "git_submodule_fetch_recurse_submodules",
            "git_submodule_init",
            "git_submodule_repo_init",
            "git_submodule_sync",
            "git_submodule_open",
            "git_submodule_reload",
            "git_submodule_location"
          ]
        },
        "git_submodule_update_t": {
          "kind": "enum",
          "name": "git_submodule_update_t",
          "referenceName": "git_submodule_update_t",
          "members": [
            {
              "name": "GIT_SUBMODULE_UPDATE_CHECKOUT",
              "value": "1"
            },
            {
              "name": "GIT_SUBMODULE_UPDATE_REBASE",
              "value": "2"
            },
            {
              "name": "GIT_SUBMODULE_UPDATE_MERGE",
              "value": "3"
            },
            {
              "name": "GIT_SUBMODULE_UPDATE_NONE",
              "value": "4"
            },
            {
              "name": "GIT_SUBMODULE_UPDATE_DEFAULT",
              "value": "0"
            }
          ],
          "comment": [
            "Submodule update values",
            "These values represent settings for the `submodule.$name.update`\n configuration value which says how to handle `git submodule update` for\n this submodule.  The value is usually set in the \".gitmodules\" file and\n copied to \".git/config\" when the submodule is initialized.",
            "You can override this setting on a per-submodule basis with\n `git_submodule_set_update()` and write the changed value to disk using\n `git_submodule_save()`.  If you have overwritten the value, you can\n revert it by passing `GIT_SUBMODULE_UPDATE_RESET` to the set function.",
            "The values are:",
            "- GIT_SUBMODULE_UPDATE_CHECKOUT: the default; when a submodule is\n   updated, checkout the new detached HEAD to the submodule directory.\n - GIT_SUBMODULE_UPDATE_REBASE: update by rebasing the current checked\n   out branch onto the commit from the superproject.\n - GIT_SUBMODULE_UPDATE_MERGE: update by merging the commit in the\n   superproject into the current checkout out branch of the submodule.\n - GIT_SUBMODULE_UPDATE_NONE: do not update this submodule even when\n   the commit in the superproject is updated.\n - GIT_SUBMODULE_UPDATE_DEFAULT: not used except as static initializer\n   when we don't want any particular update rule to be specified."
          ],
          "location": {
            "file": "types.h",
            "line": 286,
            "column": 9
          },
          "group": "submodule",
          "returnedBy": [
            "git_submodule_update_strategy"
          ],
          "parameterTo": [
            "git_submodule_set_update"
          ]
        },
        "git_submodule_ignore_t": {
          "kind": "enum",
          "name": "git_submodule_ignore_t",
          "referenceName": "git_submodule_ignore_t",
          "members": [
            {
              "name": "GIT_SUBMODULE_IGNORE_UNSPECIFIED",
              "value": "-1",
              "comment": [
                "use the submodule's configuration"
              ]
            },
            {
              "name": "GIT_SUBMODULE_IGNORE_NONE",
              "value": "1",
              "comment": [
                "any change or untracked == dirty"
              ]
            },
            {
              "name": "GIT_SUBMODULE_IGNORE_UNTRACKED",
              "value": "2",
              "comment": [
                "dirty if tracked files change"
              ]
            },
            {
              "name": "GIT_SUBMODULE_IGNORE_DIRTY",
              "value": "3",
              "comment": [
                "only dirty if HEAD moved"
              ]
            },
            {
              "name": "GIT_SUBMODULE_IGNORE_ALL",
              "value": "4",
              "comment": [
                "never dirty"
              ]
            }
          ],
          "comment": [
            "Submodule ignore values",
            "These values represent settings for the `submodule.$name.ignore`\n configuration value which says how deeply to look at the working\n directory when getting submodule status.",
            "You can override this value in memory on a per-submodule basis with\n `git_submodule_set_ignore()` and can write the changed value to disk\n with `git_submodule_save()`.  If you have overwritten the value, you\n can revert to the on disk value by using `GIT_SUBMODULE_IGNORE_RESET`.",
            "The values are:",
            "- GIT_SUBMODULE_IGNORE_UNSPECIFIED: use the submodule's configuration\n - GIT_SUBMODULE_IGNORE_NONE: don't ignore any change - i.e. even an\n   untracked file, will mark the submodule as dirty.  Ignored files are\n   still ignored, of course.\n - GIT_SUBMODULE_IGNORE_UNTRACKED: ignore untracked files; only changes\n   to tracked files, or the index or the HEAD commit will matter.\n - GIT_SUBMODULE_IGNORE_DIRTY: ignore changes in the working directory,\n   only considering changes if the HEAD of submodule has moved from the\n   value in the superproject.\n - GIT_SUBMODULE_IGNORE_ALL: never check if the submodule is dirty\n - GIT_SUBMODULE_IGNORE_DEFAULT: not used except as static initializer\n   when we don't want any particular ignore rule to be specified."
          ],
          "location": {
            "file": "types.h",
            "line": 322,
            "column": 9
          },
          "group": "submodule",
          "returnedBy": [
            "git_submodule_ignore"
          ],
          "parameterTo": [
            "git_submodule_set_ignore",
            "git_submodule_status"
          ]
        },
        "git_submodule_recurse_t": {
          "kind": "enum",
          "name": "git_submodule_recurse_t",
          "referenceName": "git_submodule_recurse_t",
          "members": [
            {
              "name": "GIT_SUBMODULE_RECURSE_NO",
              "value": "0"
            },
            {
              "name": "GIT_SUBMODULE_RECURSE_YES",
              "value": "1"
            },
            {
              "name": "GIT_SUBMODULE_RECURSE_ONDEMAND",
              "value": "2"
            }
          ],
          "comment": [
            "Options for submodule recurse.",
            "Represent the value of `submodule.$name.fetchRecurseSubmodules`",
            "* GIT_SUBMODULE_RECURSE_NO    - do no recurse into submodules\n * GIT_SUBMODULE_RECURSE_YES   - recurse into submodules\n * GIT_SUBMODULE_RECURSE_ONDEMAND - recurse into submodules only when\n                                    commit not already in local clone"
          ],
          "location": {
            "file": "types.h",
            "line": 341,
            "column": 9
          },
          "group": "submodule",
          "returnedBy": [
            "git_submodule_fetch_recurse_submodules"
          ],
          "parameterTo": [
            "git_submodule_set_fetch_recurse_submodules"
          ]
        }
      },
      "info": {
        "summary": "Git submodule management utilities",
        "details": "Submodule support in libgit2 builds a list of known submodules and keeps\nit in the repository.  The list is built from the .gitmodules file, the\n.git/config file, the index, and the HEAD tree.  Items in the working\ndirectory that look like submodules (i.e. a git repo) but are not\nmentioned in those places won't be tracked."
      }
    },
    "tag": {
      "apis": {
        "git_tag_lookup": {
          "kind": "function",
          "name": "git_tag_lookup",
          "location": {
            "file": "tag.h",
            "line": 33,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_tag **",
              "direction": "in",
              "comment": "pointer to the looked up tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tag."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tag to locate."
            }
          ],
          "comment": [
            "Lookup a tag object from the repository."
          ],
          "group": "tag"
        },
        "git_tag_lookup_prefix": {
          "kind": "function",
          "name": "git_tag_lookup_prefix",
          "location": {
            "file": "tag.h",
            "line": 48,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_tag **",
              "direction": "in",
              "comment": "pointer to the looked up tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tag."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tag to locate."
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a tag object from the repository,\n given a prefix of its identifier (short id)."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "tag"
        },
        "git_tag_free": {
          "kind": "function",
          "name": "git_tag_free",
          "location": {
            "file": "tag.h",
            "line": 61,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tag",
              "type": "git_tag *",
              "direction": "in",
              "comment": "the tag to close"
            }
          ],
          "comment": [
            "Close an open tag",
            "You can no longer use the git_tag pointer after this call.",
            "IMPORTANT: You MUST call this method when you are through with a tag to\n release memory. Failure to do so will cause a memory leak."
          ],
          "group": "tag"
        },
        "git_tag_id": {
          "kind": "function",
          "name": "git_tag_id",
          "location": {
            "file": "tag.h",
            "line": 69,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the tag."
          },
          "params": [
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the id of a tag."
          ],
          "group": "tag"
        },
        "git_tag_owner": {
          "kind": "function",
          "name": "git_tag_owner",
          "location": {
            "file": "tag.h",
            "line": 77,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "Repository that contains this tag."
          },
          "params": [
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "A previously loaded tag."
            }
          ],
          "comment": [
            "Get the repository that contains the tag."
          ],
          "group": "tag"
        },
        "git_tag_target": {
          "kind": "function",
          "name": "git_tag_target",
          "location": {
            "file": "tag.h",
            "line": 89,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "target_out",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer where to store the target"
            },
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the tagged object of a tag",
            "This method performs a repository lookup for the\n given object and returns it"
          ],
          "group": "tag"
        },
        "git_tag_target_id": {
          "kind": "function",
          "name": "git_tag_target_id",
          "location": {
            "file": "tag.h",
            "line": 97,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "pointer to the OID"
          },
          "params": [
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the OID of the tagged object of a tag"
          ],
          "group": "tag"
        },
        "git_tag_target_type": {
          "kind": "function",
          "name": "git_tag_target_type",
          "location": {
            "file": "tag.h",
            "line": 105,
            "column": 26
          },
          "returns": {
            "type": "git_object_t",
            "comment": "type of the tagged object"
          },
          "params": [
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the type of a tag's tagged object"
          ],
          "group": "tag"
        },
        "git_tag_name": {
          "kind": "function",
          "name": "git_tag_name",
          "location": {
            "file": "tag.h",
            "line": 113,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "name of the tag"
          },
          "params": [
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the name of a tag"
          ],
          "group": "tag"
        },
        "git_tag_tagger": {
          "kind": "function",
          "name": "git_tag_tagger",
          "location": {
            "file": "tag.h",
            "line": 121,
            "column": 35
          },
          "returns": {
            "type": "const git_signature *",
            "comment": "reference to the tag's author or NULL when unspecified"
          },
          "params": [
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the tagger (author) of a tag"
          ],
          "group": "tag"
        },
        "git_tag_message": {
          "kind": "function",
          "name": "git_tag_message",
          "location": {
            "file": "tag.h",
            "line": 129,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "message of the tag or NULL when unspecified"
          },
          "params": [
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "a previously loaded tag."
            }
          ],
          "comment": [
            "Get the message of a tag"
          ],
          "group": "tag"
        },
        "git_tag_create": {
          "kind": "function",
          "name": "git_tag_create",
          "location": {
            "file": "tag.h",
            "line": 171,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC or an error code\n\tA tag object is written to the ODB, and a proper reference\n\tis written in the /refs/tags folder, pointing to it"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the\n newly created tag. If the tag already exists, this parameter\n will be the oid of the existing tag, and the function will\n return a GIT_EEXISTS error code."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the tag"
            },
            {
              "name": "tag_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name"
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "Object to which this tag points. This object\n must belong to the given `repo`."
            },
            {
              "name": "tagger",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature of the tagger for this tag, and\n of the tagging time"
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "Full message for this tag"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            }
          ],
          "comment": [
            "Create a new tag in the repository from an object",
            "A new reference will also be created pointing to\n this tag object. If `force` is true and a reference\n already exists with the given name, it'll be replaced.",
            "The message will not be cleaned up. This can be achieved\n through `git_message_prettify()`.",
            "The tag name will be checked for validity. You must avoid\n the characters '~', '^', ':', '\n\\\n', '?', '[', and '*', and the\n sequences \"..\" and \"@{\" which have special meaning to revparse."
          ],
          "group": "tag"
        },
        "git_tag_annotation_create": {
          "kind": "function",
          "name": "git_tag_annotation_create",
          "location": {
            "file": "tag.h",
            "line": 203,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the\n newly created tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the tag"
            },
            {
              "name": "tag_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name for the tag"
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "Object to which this tag points. This object\n must belong to the given `repo`."
            },
            {
              "name": "tagger",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "Signature of the tagger for this tag, and\n of the tagging time"
            },
            {
              "name": "message",
              "type": "const char *",
              "direction": "in",
              "comment": "Full message for this tag"
            }
          ],
          "comment": [
            "Create a new tag in the object database pointing to a git_object",
            "The message will not be cleaned up. This can be achieved\n through `git_message_prettify()`."
          ],
          "group": "tag"
        },
        "git_tag_create_from_buffer": {
          "kind": "function",
          "name": "git_tag_create_from_buffer",
          "location": {
            "file": "tag.h",
            "line": 220,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the newly created tag"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the tag"
            },
            {
              "name": "buffer",
              "type": "const char *",
              "direction": "in",
              "comment": "Raw tag data"
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing tags"
            }
          ],
          "comment": [
            "Create a new tag in the repository from a buffer"
          ],
          "group": "tag"
        },
        "git_tag_create_lightweight": {
          "kind": "function",
          "name": "git_tag_create_lightweight",
          "location": {
            "file": "tag.h",
            "line": 256,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC or an error code\n\tA proper reference is written in the /refs/tags folder,\n pointing to the provided target object"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer where to store the OID of the provided\n target object. If the tag already exists, this parameter\n will be filled with the oid of the existing pointed object\n and the function will return a GIT_EEXISTS error code."
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to store the lightweight tag"
            },
            {
              "name": "tag_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name"
            },
            {
              "name": "target",
              "type": "const git_object *",
              "direction": "in",
              "comment": "Object to which this tag points. This object\n must belong to the given `repo`."
            },
            {
              "name": "force",
              "type": "int",
              "direction": "in",
              "comment": "Overwrite existing references"
            }
          ],
          "comment": [
            "Create a new lightweight tag pointing at a target object",
            "A new direct reference will be created pointing to\n this target object. If `force` is true and a reference\n already exists with the given name, it'll be replaced.",
            "The tag name will be checked for validity.\n See `git_tag_create()` for rules about valid names."
          ],
          "group": "tag"
        },
        "git_tag_delete": {
          "kind": "function",
          "name": "git_tag_delete",
          "location": {
            "file": "tag.h",
            "line": 276,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, GIT_EINVALIDSPEC or an error code"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where lives the tag"
            },
            {
              "name": "tag_name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the tag to be deleted;\n this name is validated for consistency."
            }
          ],
          "comment": [
            "Delete an existing tag reference.",
            "The tag name will be checked for validity.\n See `git_tag_create()` for rules about valid names."
          ],
          "group": "tag"
        },
        "git_tag_list": {
          "kind": "function",
          "name": "git_tag_list",
          "location": {
            "file": "tag.h",
            "line": 293,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag_names",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "Pointer to a git_strarray structure where\n\t\tthe tag names will be stored"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the tags"
            }
          ],
          "comment": [
            "Fill a list with all the tags in the Repository",
            "The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`."
          ],
          "group": "tag"
        },
        "git_tag_list_match": {
          "kind": "function",
          "name": "git_tag_list_match",
          "location": {
            "file": "tag.h",
            "line": 315,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag_names",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "Pointer to a git_strarray structure where\n\t\tthe tag names will be stored"
            },
            {
              "name": "pattern",
              "type": "const char *",
              "direction": "in",
              "comment": "Standard fnmatch pattern"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository where to find the tags"
            }
          ],
          "comment": [
            "Fill a list with all the tags in the Repository\n which name match a defined pattern",
            "If an empty pattern is provided, all the tags\n will be returned.",
            "The string array will be filled with the names of the\n matching tags; these values are owned by the user and\n should be free'd manually when no longer needed, using\n `git_strarray_free`."
          ],
          "group": "tag"
        },
        "git_tag_foreach_cb": {
          "kind": "callback",
          "name": "git_tag_foreach_cb",
          "type": "int (*)(const char *, git_oid *, void *)",
          "comment": [
            "Callback used to iterate over tag names"
          ],
          "location": {
            "file": "tag.h",
            "line": 330,
            "column": 26
          },
          "see": [
            "git_tag_foreach"
          ],
          "params": [
            {
              "name": "name",
              "direction": "in",
              "comment": "The tag name",
              "type": "const char *"
            },
            {
              "name": "oid",
              "direction": "in",
              "comment": "The tag's OID",
              "type": "git_oid *"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload passed to git_tag_foreach",
              "type": "void *"
            }
          ],
          "returns": {
            "comment": "non-zero to terminate the iteration",
            "type": "int"
          },
          "group": "tag",
          "parameterTo": [
            "git_tag_foreach"
          ],
          "typedef": true
        },
        "git_tag_foreach": {
          "kind": "function",
          "name": "git_tag_foreach",
          "location": {
            "file": "tag.h",
            "line": 339,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository"
            },
            {
              "name": "callback",
              "type": "git_tag_foreach_cb",
              "direction": "in",
              "comment": "Callback function",
              "referenceType": "int (*)(const char *, git_oid *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Pointer to callback data (optional)"
            }
          ],
          "comment": [
            "Call callback `cb' for each tag in the repository"
          ],
          "group": "tag"
        },
        "git_tag_peel": {
          "kind": "function",
          "name": "git_tag_peel",
          "location": {
            "file": "tag.h",
            "line": 355,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tag_target_out",
              "type": "git_object **",
              "direction": "in",
              "comment": "Pointer to the peeled git_object"
            },
            {
              "name": "tag",
              "type": "const git_tag *",
              "direction": "in",
              "comment": "The tag to be processed"
            }
          ],
          "comment": [
            "Recursively peel a tag until a non tag git_object is found",
            "The retrieved `tag_target` object is owned by the repository\n and should be closed with the `git_object_free` method."
          ],
          "group": "tag"
        },
        "git_tag_dup": {
          "kind": "function",
          "name": "git_tag_dup",
          "location": {
            "file": "tag.h",
            "line": 366,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_tag **",
              "direction": "in",
              "comment": "Pointer to store the copy of the tag"
            },
            {
              "name": "source",
              "type": "git_tag *",
              "direction": "in",
              "comment": "Original tag to copy"
            }
          ],
          "comment": [
            "Create an in-memory copy of a tag. The copy must be explicitly\n free'd or it will leak."
          ],
          "group": "tag"
        },
        "git_tag": {
          "kind": "struct",
          "name": "git_tag",
          "referenceName": "struct git_tag",
          "opaque": true,
          "comment": [
            "Parsed representation of a tag object."
          ],
          "location": {
            "file": "types.h",
            "line": 121,
            "column": 24
          },
          "group": "tag",
          "parameterTo": [
            "git_tag_lookup",
            "git_tag_lookup_prefix",
            "git_tag_free",
            "git_tag_id",
            "git_tag_owner",
            "git_tag_target",
            "git_tag_target_id",
            "git_tag_target_type",
            "git_tag_name",
            "git_tag_tagger",
            "git_tag_message",
            "git_tag_peel",
            "git_tag_dup"
          ]
        }
      },
      "info": {
        "summary": "Git tag parsing routines"
      }
    },
    "trace": {
      "apis": {
        "git_trace_level_t": {
          "kind": "enum",
          "name": "git_trace_level_t",
          "referenceName": "git_trace_level_t",
          "members": [
            {
              "name": "GIT_TRACE_NONE",
              "value": "0",
              "comment": [
                "No tracing will be performed."
              ]
            },
            {
              "name": "GIT_TRACE_FATAL",
              "value": "1",
              "comment": [
                "Severe errors that may impact the program's execution"
              ]
            },
            {
              "name": "GIT_TRACE_ERROR",
              "value": "2",
              "comment": [
                "Errors that do not impact the program's execution"
              ]
            },
            {
              "name": "GIT_TRACE_WARN",
              "value": "3",
              "comment": [
                "Warnings that suggest abnormal data"
              ]
            },
            {
              "name": "GIT_TRACE_INFO",
              "value": "4",
              "comment": [
                "Informational messages about program execution"
              ]
            },
            {
              "name": "GIT_TRACE_DEBUG",
              "value": "5",
              "comment": [
                "Detailed data that allows for debugging"
              ]
            },
            {
              "name": "GIT_TRACE_TRACE",
              "value": "6",
              "comment": [
                "Exceptionally detailed debugging data"
              ]
            }
          ],
          "comment": [
            "Available tracing levels.  When tracing is set to a particular level,\n callers will be provided tracing at the given level and all lower levels."
          ],
          "location": {
            "file": "trace.h",
            "line": 26,
            "column": 9
          },
          "group": "trace",
          "parameterTo": [
            "git_trace_cb",
            "git_trace_set"
          ]
        },
        "git_trace_cb": {
          "kind": "callback",
          "name": "git_trace_cb",
          "type": "void (*)(git_trace_level_t, const char *)",
          "comment": [
            "An instance for a tracing function"
          ],
          "location": {
            "file": "trace.h",
            "line": 52,
            "column": 27
          },
          "params": [
            {
              "type": "git_trace_level_t"
            },
            {
              "type": "const char *"
            }
          ],
          "returns": {
            "type": "void"
          },
          "group": "trace",
          "parameterTo": [
            "git_trace_set"
          ],
          "typedef": true
        },
        "git_trace_set": {
          "kind": "function",
          "name": "git_trace_set",
          "location": {
            "file": "trace.h",
            "line": 63,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "level",
              "type": "git_trace_level_t",
              "direction": "in",
              "comment": "Level to set tracing to",
              "referenceType": "enum git_trace_level_t"
            },
            {
              "name": "cb",
              "type": "git_trace_cb",
              "direction": "in",
              "comment": "Function to call with trace data",
              "referenceType": "void (*)(git_trace_level_t, const char *)"
            }
          ],
          "comment": [
            "Sets the system tracing configuration to the specified level with the\n specified callback.  When system events occur at a level equal to, or\n lower than, the given level they will be reported to the given callback."
          ],
          "group": "trace"
        }
      },
      "info": {
        "summary": "Git tracing configuration routines"
      }
    },
    "transaction": {
      "apis": {
        "git_transaction_new": {
          "kind": "function",
          "name": "git_transaction_new",
          "location": {
            "file": "transaction.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_transaction **",
              "direction": "in",
              "comment": "the resulting transaction"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to lock"
            }
          ],
          "comment": [
            "Create a new transaction object",
            "This does not lock anything, but sets up the transaction object to\n know from which repository to lock."
          ],
          "group": "transaction"
        },
        "git_transaction_lock_ref": {
          "kind": "function",
          "name": "git_transaction_lock_ref",
          "location": {
            "file": "transaction.h",
            "line": 44,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error message"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction *",
              "direction": "in",
              "comment": "the transaction"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference to lock"
            }
          ],
          "comment": [
            "Lock a reference",
            "Lock the specified reference. This is the first step to updating a\n reference."
          ],
          "group": "transaction"
        },
        "git_transaction_set_target": {
          "kind": "function",
          "name": "git_transaction_set_target",
          "location": {
            "file": "transaction.h",
            "line": 59,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction *",
              "direction": "in",
              "comment": "the transaction"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "reference to update"
            },
            {
              "name": "target",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "target to set the reference to"
            },
            {
              "name": "sig",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature to use in the reflog; pass NULL to read the identity from the config"
            },
            {
              "name": "msg",
              "type": "const char *",
              "direction": "in",
              "comment": "message to use in the reflog"
            }
          ],
          "comment": [
            "Set the target of a reference",
            "Set the target of the specified reference. This reference must be\n locked."
          ],
          "group": "transaction"
        },
        "git_transaction_set_symbolic_target": {
          "kind": "function",
          "name": "git_transaction_set_symbolic_target",
          "location": {
            "file": "transaction.h",
            "line": 74,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction *",
              "direction": "in",
              "comment": "the transaction"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "reference to update"
            },
            {
              "name": "target",
              "type": "const char *",
              "direction": "in",
              "comment": "target to set the reference to"
            },
            {
              "name": "sig",
              "type": "const git_signature *",
              "direction": "in",
              "comment": "signature to use in the reflog; pass NULL to read the identity from the config"
            },
            {
              "name": "msg",
              "type": "const char *",
              "direction": "in",
              "comment": "message to use in the reflog"
            }
          ],
          "comment": [
            "Set the target of a reference",
            "Set the target of the specified reference. This reference must be\n locked."
          ],
          "group": "transaction"
        },
        "git_transaction_set_reflog": {
          "kind": "function",
          "name": "git_transaction_set_reflog",
          "location": {
            "file": "transaction.h",
            "line": 87,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction *",
              "direction": "in",
              "comment": "the transaction"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference whose reflog to set"
            },
            {
              "name": "reflog",
              "type": "const git_reflog *",
              "direction": "in",
              "comment": "the reflog as it should be written out"
            }
          ],
          "comment": [
            "Set the reflog of a reference",
            "Set the specified reference's reflog. If this is combined with\n setting the target, that update won't be written to the reflog."
          ],
          "group": "transaction"
        },
        "git_transaction_remove": {
          "kind": "function",
          "name": "git_transaction_remove",
          "location": {
            "file": "transaction.h",
            "line": 96,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0, GIT_ENOTFOUND if the reference is not among the locked ones, or an error code"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction *",
              "direction": "in",
              "comment": "the transaction"
            },
            {
              "name": "refname",
              "type": "const char *",
              "direction": "in",
              "comment": "the reference to remove"
            }
          ],
          "comment": [
            "Remove a reference"
          ],
          "group": "transaction"
        },
        "git_transaction_commit": {
          "kind": "function",
          "name": "git_transaction_commit",
          "location": {
            "file": "transaction.h",
            "line": 107,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction *",
              "direction": "in",
              "comment": "the transaction"
            }
          ],
          "comment": [
            "Commit the changes from the transaction",
            "Perform the changes that have been queued. The updates will be made\n one by one, and the first failure will stop the processing."
          ],
          "group": "transaction"
        },
        "git_transaction_free": {
          "kind": "function",
          "name": "git_transaction_free",
          "location": {
            "file": "transaction.h",
            "line": 117,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tx",
              "type": "git_transaction *",
              "direction": "in",
              "comment": "the transaction"
            }
          ],
          "comment": [
            "Free the resources allocated by this transaction",
            "If any references remain locked, they will be unlocked without any\n changes made to them."
          ],
          "group": "transaction"
        },
        "git_transaction": {
          "kind": "struct",
          "name": "git_transaction",
          "referenceName": "struct git_transaction",
          "opaque": true,
          "comment": [
            "Transactional interface to references"
          ],
          "location": {
            "file": "types.h",
            "line": 186,
            "column": 32
          },
          "group": "transaction",
          "parameterTo": [
            "git_config_lock",
            "git_transaction_new",
            "git_transaction_lock_ref",
            "git_transaction_set_target",
            "git_transaction_set_symbolic_target",
            "git_transaction_set_reflog",
            "git_transaction_remove",
            "git_transaction_commit",
            "git_transaction_free"
          ]
        }
      },
      "info": {
        "summary": "Git transactional reference routines"
      }
    },
    "transport": {
      "apis": {
        "git_transport_message_cb": {
          "kind": "callback",
          "name": "git_transport_message_cb",
          "type": "int (*)(const char *, int, void *)",
          "comment": [
            "Callback for messages recieved by the transport.",
            "Return a negative value to cancel the network operation."
          ],
          "location": {
            "file": "transport.h",
            "line": 34,
            "column": 26
          },
          "params": [
            {
              "name": "str",
              "direction": "in",
              "comment": "The message from the transport",
              "type": "const char *"
            },
            {
              "name": "len",
              "direction": "in",
              "comment": "The length of the message",
              "type": "int"
            },
            {
              "name": "payload",
              "direction": "in",
              "comment": "Payload provided by the caller",
              "type": "void *"
            }
          ],
          "group": "transport",
          "typedef": true
        },
        "git_transport_cb": {
          "kind": "callback",
          "name": "git_transport_cb",
          "type": "int (*)(git_transport **, git_remote *, void *)",
          "comment": [
            "Signature of a function which creates a transport"
          ],
          "location": {
            "file": "transport.h",
            "line": 37,
            "column": 26
          },
          "params": [
            {
              "type": "git_transport **"
            },
            {
              "type": "git_remote *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "transport",
          "parameterTo": [
            "git_transport_register"
          ],
          "typedef": true
        }
      },
      "info": {
        "summary": "Git transport interfaces and functions"
      }
    },
    "sys/transport": {
      "apis": {
        "git_transport_flags_t": {
          "kind": "enum",
          "name": "git_transport_flags_t",
          "referenceName": "git_transport_flags_t",
          "members": [
            {
              "name": "GIT_TRANSPORTFLAGS_NONE",
              "value": "0"
            }
          ],
          "comment": [
            "Flags to pass to transport",
            "Currently unused."
          ],
          "location": {
            "file": "sys/transport.h",
            "line": 31,
            "column": 9
          },
          "group": "sys/transport"
        },
        "git_transport": {
          "kind": "struct",
          "name": "git_transport",
          "referenceName": "struct git_transport",
          "members": [
            {
              "name": "version",
              "type": "unsigned int",
              "comment": [
                "The struct version"
              ]
            },
            {
              "name": "set_callbacks",
              "type": "int (*)(git_transport *, git_transport_message_cb, git_transport_message_cb, git_transport_certificate_check_cb, void *)",
              "comment": [
                "Set progress and error callbacks"
              ]
            },
            {
              "name": "set_custom_headers",
              "type": "int (*)(git_transport *, const git_strarray *)",
              "comment": [
                "Set custom headers for HTTP requests"
              ]
            },
            {
              "name": "connect",
              "type": "int (*)(git_transport *, const char *, git_credential_acquire_cb, void *, const git_proxy_options *, int, int)",
              "comment": [
                "Connect the transport to the remote repository, using the given\n direction."
              ]
            },
            {
              "name": "ls",
              "type": "int (*)(const git_remote_head ***, size_t *, git_transport *)",
              "comment": [
                "Get the list of available references in the remote repository.",
                "This function may be called after a successful call to\n `connect()`. The array returned is owned by the transport and\n must be kept valid until the next call to one of its functions."
              ]
            },
            {
              "name": "push",
              "type": "int (*)(git_transport *, git_push *, const git_remote_callbacks *)",
              "comment": [
                "Executes the push whose context is in the git_push object."
              ]
            },
            {
              "name": "negotiate_fetch",
              "type": "int (*)(git_transport *, git_repository *, const git_remote_head *const *, size_t)",
              "comment": [
                "Negotiate a fetch with the remote repository.",
                "This function may be called after a successful call to `connect()`,\n when the direction is GIT_DIRECTION_FETCH. The function performs a\n negotiation to calculate the `wants` list for the fetch."
              ]
            },
            {
              "name": "download_pack",
              "type": "int (*)(git_transport *, git_repository *, git_indexer_progress *, git_indexer_progress_cb, void *)",
              "comment": [
                "Start downloading the packfile from the remote repository.",
                "This function may be called after a successful call to\n negotiate_fetch(), when the direction is GIT_DIRECTION_FETCH."
              ]
            },
            {
              "name": "is_connected",
              "type": "int (*)(git_transport *)",
              "comment": [
                "Checks to see if the transport is connected"
              ]
            },
            {
              "name": "read_flags",
              "type": "int (*)(git_transport *, int *)",
              "comment": [
                "Reads the flags value previously passed into connect()"
              ]
            },
            {
              "name": "cancel",
              "type": "void (*)(git_transport *)",
              "comment": [
                "Cancels any outstanding transport operation"
              ]
            },
            {
              "name": "close",
              "type": "int (*)(git_transport *)",
              "comment": [
                "Close the connection to the remote repository.",
                "This function is the reverse of connect() -- it terminates the\n connection to the remote end."
              ]
            },
            {
              "name": "free",
              "type": "void (*)(git_transport *)",
              "comment": [
                "Frees/destructs the git_transport object."
              ]
            }
          ],
          "location": {
            "file": "sys/transport.h",
            "line": 35,
            "column": 8
          },
          "group": "sys/transport",
          "parameterTo": [
            "git_transport_cb",
            "git_transport_init",
            "git_transport_new",
            "git_transport_ssh_with_paths",
            "git_transport_dummy",
            "git_transport_local",
            "git_transport_smart",
            "git_transport_smart_certificate_check",
            "git_transport_smart_credentials",
            "git_transport_smart_proxy_options",
            "git_smart_subtransport_cb",
            "git_smart_subtransport_http",
            "git_smart_subtransport_git",
            "git_smart_subtransport_ssh"
          ]
        },
        "GIT_TRANSPORT_VERSION": {
          "kind": "macro",
          "name": "GIT_TRANSPORT_VERSION",
          "location": {
            "file": "sys/transport.h",
            "line": 126,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "sys/transport"
        },
        "GIT_TRANSPORT_INIT": {
          "kind": "macro",
          "name": "GIT_TRANSPORT_INIT",
          "location": {
            "file": "sys/transport.h",
            "line": 127,
            "column": 9
          },
          "value": "{GIT_TRANSPORT_VERSION}",
          "comment": "",
          "group": "sys/transport"
        },
        "git_transport_init": {
          "kind": "function",
          "name": "git_transport_init",
          "location": {
            "file": "sys/transport.h",
            "line": 137,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_transport *",
              "direction": "in",
              "comment": "the `git_transport` struct to initialize"
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "Version of struct; pass `GIT_TRANSPORT_VERSION`"
            }
          ],
          "comment": [
            "Initializes a `git_transport` with default values. Equivalent to\n creating an instance with GIT_TRANSPORT_INIT."
          ],
          "group": "sys/transport"
        },
        "git_transport_new": {
          "kind": "function",
          "name": "git_transport_new",
          "location": {
            "file": "sys/transport.h",
            "line": 151,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_transport **",
              "direction": "in",
              "comment": "The newly created transport (out)"
            },
            {
              "name": "owner",
              "type": "git_remote *",
              "direction": "in",
              "comment": "The git_remote which will own this transport"
            },
            {
              "name": "url",
              "type": "const char *",
              "direction": "in",
              "comment": "The URL to connect to"
            }
          ],
          "comment": [
            "Function to use to create a transport from a URL. The transport database\n is scanned to find a transport that implements the scheme of the URI (i.e.\n git:// or http://) and a transport object is returned to the caller."
          ],
          "group": "sys/transport"
        },
        "git_transport_ssh_with_paths": {
          "kind": "function",
          "name": "git_transport_ssh_with_paths",
          "location": {
            "file": "sys/transport.h",
            "line": 167,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_transport **",
              "direction": "in",
              "comment": "the resulting transport"
            },
            {
              "name": "owner",
              "type": "git_remote *",
              "direction": "in",
              "comment": "the owning remote"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "a strarray with the paths"
            }
          ],
          "comment": [
            "Create an ssh transport with custom git command paths",
            "This is a factory function suitable for setting as the transport\n callback in a remote (or for a clone in the options).",
            "The payload argument must be a strarray pointer with the paths for\n the `git-upload-pack` and `git-receive-pack` at index 0 and 1."
          ],
          "group": "sys/transport"
        },
        "git_transport_register": {
          "kind": "function",
          "name": "git_transport_register",
          "location": {
            "file": "sys/transport.h",
            "line": 182,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "prefix",
              "type": "const char *",
              "direction": "in",
              "comment": "The scheme (ending in \"://\") to match, i.e. \"git://\""
            },
            {
              "name": "cb",
              "type": "git_transport_cb",
              "direction": "in",
              "comment": "The callback used to create an instance of the transport",
              "referenceType": "int (*)(git_transport **, git_remote *, void *)"
            },
            {
              "name": "param",
              "type": "void *",
              "direction": "in",
              "comment": "A fixed parameter to pass to cb at creation time"
            }
          ],
          "comment": [
            "Add a custom transport definition, to be used in addition to the built-in\n set of transports that come with libgit2.",
            "The caller is responsible for synchronizing calls to git_transport_register\n and git_transport_unregister with other calls to the library that\n instantiate transports."
          ],
          "group": "sys/transport"
        },
        "git_transport_unregister": {
          "kind": "function",
          "name": "git_transport_unregister",
          "location": {
            "file": "sys/transport.h",
            "line": 198,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "prefix",
              "type": "const char *",
              "direction": "in",
              "comment": "From the previous call to git_transport_register"
            }
          ],
          "comment": [
            "Unregister a custom transport definition which was previously registered\n with git_transport_register.",
            "The caller is responsible for synchronizing calls to git_transport_register\n and git_transport_unregister with other calls to the library that\n instantiate transports."
          ],
          "group": "sys/transport"
        },
        "git_transport_dummy": {
          "kind": "function",
          "name": "git_transport_dummy",
          "location": {
            "file": "sys/transport.h",
            "line": 212,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_transport **",
              "direction": "in",
              "comment": "The newly created transport (out)"
            },
            {
              "name": "owner",
              "type": "git_remote *",
              "direction": "in",
              "comment": "The git_remote which will own this transport"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "You must pass NULL for this parameter."
            }
          ],
          "comment": [
            "Create an instance of the dummy transport."
          ],
          "group": "sys/transport"
        },
        "git_transport_local": {
          "kind": "function",
          "name": "git_transport_local",
          "location": {
            "file": "sys/transport.h",
            "line": 225,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_transport **",
              "direction": "in",
              "comment": "The newly created transport (out)"
            },
            {
              "name": "owner",
              "type": "git_remote *",
              "direction": "in",
              "comment": "The git_remote which will own this transport"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "You must pass NULL for this parameter."
            }
          ],
          "comment": [
            "Create an instance of the local transport."
          ],
          "group": "sys/transport"
        },
        "git_transport_smart": {
          "kind": "function",
          "name": "git_transport_smart",
          "location": {
            "file": "sys/transport.h",
            "line": 238,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_transport **",
              "direction": "in",
              "comment": "The newly created transport (out)"
            },
            {
              "name": "owner",
              "type": "git_remote *",
              "direction": "in",
              "comment": "The git_remote which will own this transport"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "A pointer to a git_smart_subtransport_definition"
            }
          ],
          "comment": [
            "Create an instance of the smart transport."
          ],
          "group": "sys/transport"
        },
        "git_transport_smart_certificate_check": {
          "kind": "function",
          "name": "git_transport_smart_certificate_check",
          "location": {
            "file": "sys/transport.h",
            "line": 255,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the return value of the callback: 0 for no error, GIT_PASSTHROUGH\n         to indicate that there is no callback registered (or the callback\n         refused to validate the certificate and callers should behave as\n         if no callback was set), or \n<\n 0 for an error"
          },
          "params": [
            {
              "name": "transport",
              "type": "git_transport *",
              "direction": "in",
              "comment": "a smart transport"
            },
            {
              "name": "cert",
              "type": "git_cert *",
              "direction": "in",
              "comment": "the certificate to pass to the caller"
            },
            {
              "name": "valid",
              "type": "int",
              "direction": "in",
              "comment": "whether we believe the certificate is valid"
            },
            {
              "name": "hostname",
              "type": "const char *",
              "direction": "in",
              "comment": "the hostname we connected to"
            }
          ],
          "comment": [
            "Call the certificate check for this transport."
          ],
          "group": "sys/transport"
        },
        "git_transport_smart_credentials": {
          "kind": "function",
          "name": "git_transport_smart_credentials",
          "location": {
            "file": "sys/transport.h",
            "line": 269,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "the return value of the callback: 0 for no error, GIT_PASSTHROUGH\n         to indicate that there is no callback registered (or the callback\n         refused to provide credentials and callers should behave as if no\n         callback was set), or \n<\n 0 for an error"
          },
          "params": [
            {
              "name": "out",
              "type": "git_credential **",
              "direction": "in",
              "comment": "the pointer where the creds are to be stored"
            },
            {
              "name": "transport",
              "type": "git_transport *",
              "direction": "in",
              "comment": "a smart transport"
            },
            {
              "name": "user",
              "type": "const char *",
              "direction": "in",
              "comment": "the user we saw on the url (if any)"
            },
            {
              "name": "methods",
              "type": "int",
              "direction": "in",
              "comment": "available methods for authentication"
            }
          ],
          "comment": [
            "Call the credentials callback for this transport"
          ],
          "group": "sys/transport"
        },
        "git_transport_smart_proxy_options": {
          "kind": "function",
          "name": "git_transport_smart_proxy_options",
          "location": {
            "file": "sys/transport.h",
            "line": 279,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_proxy_options *",
              "direction": "in",
              "comment": "options struct to fill"
            },
            {
              "name": "transport",
              "type": "git_transport *",
              "direction": "in",
              "comment": "the transport to extract the data from."
            }
          ],
          "comment": [
            "Get a copy of the proxy options",
            "The url is copied and must be freed by the caller."
          ],
          "group": "sys/transport"
        },
        "git_smart_service_t": {
          "kind": "enum",
          "name": "git_smart_service_t",
          "referenceName": "git_smart_service_t",
          "members": [
            {
              "name": "GIT_SERVICE_UPLOADPACK_LS",
              "value": "1"
            },
            {
              "name": "GIT_SERVICE_UPLOADPACK",
              "value": "2"
            },
            {
              "name": "GIT_SERVICE_RECEIVEPACK_LS",
              "value": "3"
            },
            {
              "name": "GIT_SERVICE_RECEIVEPACK",
              "value": "4"
            }
          ],
          "comment": [
            "Actions that the smart transport can ask a subtransport to perform"
          ],
          "location": {
            "file": "sys/transport.h",
            "line": 287,
            "column": 9
          },
          "group": "sys/transport"
        },
        "git_smart_subtransport_stream": {
          "kind": "struct",
          "name": "git_smart_subtransport_stream",
          "referenceName": "struct git_smart_subtransport_stream",
          "comment": [
            "A stream used by the smart transport to read and write data\n from a subtransport.",
            "This provides a customization point in case you need to\n support some other communication method."
          ],
          "members": [
            {
              "name": "subtransport",
              "type": "git_smart_subtransport *",
              "comment": [
                "The owning subtransport"
              ]
            },
            {
              "name": "read",
              "type": "int (*)(git_smart_subtransport_stream *, char *, size_t, size_t *)",
              "comment": [
                "Read available data from the stream.",
                "The implementation may read less than requested."
              ]
            },
            {
              "name": "write",
              "type": "int (*)(git_smart_subtransport_stream *, const char *, size_t)",
              "comment": [
                "Write data to the stream",
                "The implementation must write all data or return an error."
              ]
            },
            {
              "name": "free",
              "type": "void (*)(git_smart_subtransport_stream *)",
              "comment": [
                "Free the stream"
              ]
            }
          ],
          "location": {
            "file": "sys/transport.h",
            "line": 304,
            "column": 8
          },
          "group": "sys/transport"
        },
        "git_smart_subtransport": {
          "kind": "struct",
          "name": "git_smart_subtransport",
          "referenceName": "struct git_smart_subtransport",
          "comment": [
            "An implementation of a subtransport which carries data for the\n smart transport"
          ],
          "members": [
            {
              "name": "action",
              "type": "int (*)(git_smart_subtransport_stream **, git_smart_subtransport *, const char *, git_smart_service_t)",
              "comment": [
                "Setup a subtransport stream for the requested action."
              ]
            },
            {
              "name": "close",
              "type": "int (*)(git_smart_subtransport *)",
              "comment": [
                "Close the subtransport.",
                "Subtransports are guaranteed a call to close() between\n calls to action(), except for the following two \"natural\" progressions\n of actions against a constant URL:",
                "- UPLOADPACK_LS -> UPLOADPACK\n - RECEIVEPACK_LS -> RECEIVEPACK"
              ]
            },
            {
              "name": "free",
              "type": "void (*)(git_smart_subtransport *)",
              "comment": [
                "Free the subtransport"
              ]
            }
          ],
          "location": {
            "file": "sys/transport.h",
            "line": 337,
            "column": 8
          },
          "group": "sys/transport",
          "parameterTo": [
            "git_smart_subtransport_cb",
            "git_smart_subtransport_http",
            "git_smart_subtransport_git",
            "git_smart_subtransport_ssh"
          ]
        },
        "git_smart_subtransport_cb": {
          "kind": "callback",
          "name": "git_smart_subtransport_cb",
          "type": "int (*)(git_smart_subtransport **, git_transport *, void *)",
          "comment": [
            "A function which creates a new subtransport for the smart transport"
          ],
          "location": {
            "file": "sys/transport.h",
            "line": 364,
            "column": 26
          },
          "params": [
            {
              "type": "git_smart_subtransport **"
            },
            {
              "type": "git_transport *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "sys/transport",
          "typedef": true
        },
        "git_smart_subtransport_definition": {
          "kind": "struct",
          "name": "git_smart_subtransport_definition",
          "referenceName": "git_smart_subtransport_definition",
          "comment": [
            "Definition for a \"subtransport\"",
            "The smart transport knows how to speak the git protocol, but it has no\n knowledge of how to establish a connection between it and another endpoint,\n or how to move data back and forth. For this, a subtransport interface is\n declared, and the smart transport delegates this work to the subtransports.",
            "Three subtransports are provided by libgit2: ssh, git, http(s).",
            "Subtransports can either be RPC = 0 (persistent connection) or RPC = 1\n (request/response). The smart transport handles the differences in its own\n logic. The git subtransport is RPC = 0, while http is RPC = 1."
          ],
          "members": [
            {
              "name": "callback",
              "type": "git_smart_subtransport_cb",
              "comment": [
                "The function to use to create the git_smart_subtransport"
              ],
              "referenceType": "int (*)(git_smart_subtransport **, git_transport *, void *)"
            },
            {
              "name": "rpc",
              "type": "unsigned int",
              "comment": [
                "True if the protocol is stateless; false otherwise. For example,\n http:// is stateless, but git:// is not."
              ]
            },
            {
              "name": "param",
              "type": "void *",
              "comment": [
                "User-specified parameter passed to the callback"
              ]
            }
          ],
          "location": {
            "file": "sys/transport.h",
            "line": 383,
            "column": 16
          },
          "group": "sys/transport"
        },
        "git_smart_subtransport_http": {
          "kind": "function",
          "name": "git_smart_subtransport_http",
          "location": {
            "file": "sys/transport.h",
            "line": 408,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_smart_subtransport **",
              "direction": "in",
              "comment": "The newly created subtransport"
            },
            {
              "name": "owner",
              "type": "git_transport *",
              "direction": "in",
              "comment": "The smart transport to own this subtransport"
            },
            {
              "name": "param",
              "type": "void *"
            }
          ],
          "comment": [
            "Create an instance of the http subtransport.",
            "This subtransport also supports https."
          ],
          "group": "sys/transport"
        },
        "git_smart_subtransport_git": {
          "kind": "function",
          "name": "git_smart_subtransport_git",
          "location": {
            "file": "sys/transport.h",
            "line": 420,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_smart_subtransport **",
              "direction": "in",
              "comment": "The newly created subtransport"
            },
            {
              "name": "owner",
              "type": "git_transport *",
              "direction": "in",
              "comment": "The smart transport to own this subtransport"
            },
            {
              "name": "param",
              "type": "void *"
            }
          ],
          "comment": [
            "Create an instance of the git subtransport."
          ],
          "group": "sys/transport"
        },
        "git_smart_subtransport_ssh": {
          "kind": "function",
          "name": "git_smart_subtransport_ssh",
          "location": {
            "file": "sys/transport.h",
            "line": 432,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_smart_subtransport **",
              "direction": "in",
              "comment": "The newly created subtransport"
            },
            {
              "name": "owner",
              "type": "git_transport *",
              "direction": "in",
              "comment": "The smart transport to own this subtransport"
            },
            {
              "name": "param",
              "type": "void *"
            }
          ],
          "comment": [
            "Create an instance of the ssh subtransport."
          ],
          "group": "sys/transport"
        }
      },
      "info": {
        "summary": "Git custom transport registration interfaces and functions"
      }
    },
    "tree": {
      "apis": {
        "git_tree_lookup": {
          "kind": "function",
          "name": "git_tree_lookup",
          "location": {
            "file": "tree.h",
            "line": 32,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_tree **",
              "direction": "in",
              "comment": "Pointer to the looked up tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repo to use when locating the tree."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "Identity of the tree to locate."
            }
          ],
          "comment": [
            "Lookup a tree object from the repository."
          ],
          "group": "tree"
        },
        "git_tree_lookup_prefix": {
          "kind": "function",
          "name": "git_tree_lookup_prefix",
          "location": {
            "file": "tree.h",
            "line": 47,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_tree **",
              "direction": "in",
              "comment": "pointer to the looked up tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when locating the tree."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "identity of the tree to locate."
            },
            {
              "name": "len",
              "type": "size_t",
              "direction": "in",
              "comment": "the length of the short identifier"
            }
          ],
          "comment": [
            "Lookup a tree object from the repository,\n given a prefix of its identifier (short id)."
          ],
          "see": [
            "git_object_lookup_prefix"
          ],
          "group": "tree"
        },
        "git_tree_free": {
          "kind": "function",
          "name": "git_tree_free",
          "location": {
            "file": "tree.h",
            "line": 63,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "tree",
              "type": "git_tree *",
              "direction": "in",
              "comment": "The tree to close"
            }
          ],
          "comment": [
            "Close an open tree",
            "You can no longer use the git_tree pointer after this call.",
            "IMPORTANT: You MUST call this method when you stop using a tree to\n release memory. Failure to do so will cause a memory leak."
          ],
          "group": "tree"
        },
        "git_tree_id": {
          "kind": "function",
          "name": "git_tree_id",
          "location": {
            "file": "tree.h",
            "line": 71,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "object identity for the tree."
          },
          "params": [
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            }
          ],
          "comment": [
            "Get the id of a tree."
          ],
          "group": "tree"
        },
        "git_tree_owner": {
          "kind": "function",
          "name": "git_tree_owner",
          "location": {
            "file": "tree.h",
            "line": 79,
            "column": 30
          },
          "returns": {
            "type": "git_repository *",
            "comment": "Repository that contains this tree."
          },
          "params": [
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "A previously loaded tree."
            }
          ],
          "comment": [
            "Get the repository that contains the tree."
          ],
          "group": "tree"
        },
        "git_tree_entrycount": {
          "kind": "function",
          "name": "git_tree_entrycount",
          "location": {
            "file": "tree.h",
            "line": 87,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the number of entries in the tree"
          },
          "params": [
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            }
          ],
          "comment": [
            "Get the number of entries listed in a tree"
          ],
          "group": "tree"
        },
        "git_tree_entry_byname": {
          "kind": "function",
          "name": "git_tree_entry_byname",
          "location": {
            "file": "tree.h",
            "line": 99,
            "column": 36
          },
          "returns": {
            "type": "const git_tree_entry *",
            "comment": "the tree entry; NULL if not found"
          },
          "params": [
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "the filename of the desired entry"
            }
          ],
          "comment": [
            "Lookup a tree entry by its filename",
            "This returns a git_tree_entry that is owned by the git_tree.  You don't\n have to free it, but you must not use it after the git_tree is released."
          ],
          "group": "tree"
        },
        "git_tree_entry_byindex": {
          "kind": "function",
          "name": "git_tree_entry_byindex",
          "location": {
            "file": "tree.h",
            "line": 112,
            "column": 36
          },
          "returns": {
            "type": "const git_tree_entry *",
            "comment": "the tree entry; NULL if not found"
          },
          "params": [
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            },
            {
              "name": "idx",
              "type": "size_t",
              "direction": "in",
              "comment": "the position in the entry list"
            }
          ],
          "comment": [
            "Lookup a tree entry by its position in the tree",
            "This returns a git_tree_entry that is owned by the git_tree.  You don't\n have to free it, but you must not use it after the git_tree is released."
          ],
          "group": "tree"
        },
        "git_tree_entry_byid": {
          "kind": "function",
          "name": "git_tree_entry_byid",
          "location": {
            "file": "tree.h",
            "line": 127,
            "column": 36
          },
          "returns": {
            "type": "const git_tree_entry *",
            "comment": "the tree entry; NULL if not found"
          },
          "params": [
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "a previously loaded tree."
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "the sha being looked for"
            }
          ],
          "comment": [
            "Lookup a tree entry by SHA value.",
            "This returns a git_tree_entry that is owned by the git_tree.  You don't\n have to free it, but you must not use it after the git_tree is released.",
            "Warning: this must examine every entry in the tree, so it is not fast."
          ],
          "group": "tree"
        },
        "git_tree_entry_bypath": {
          "kind": "function",
          "name": "git_tree_entry_bypath",
          "location": {
            "file": "tree.h",
            "line": 142,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; GIT_ENOTFOUND if the path does not exist"
          },
          "params": [
            {
              "name": "out",
              "type": "git_tree_entry **",
              "direction": "in",
              "comment": "Pointer where to store the tree entry"
            },
            {
              "name": "root",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "Previously loaded tree which is the root of the relative path"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to the contained entry"
            }
          ],
          "comment": [
            "Retrieve a tree entry contained in a tree or in any of its subtrees,\n given its relative path.",
            "Unlike the other lookup functions, the returned tree entry is owned by\n the user and must be freed explicitly with `git_tree_entry_free()`."
          ],
          "group": "tree"
        },
        "git_tree_entry_dup": {
          "kind": "function",
          "name": "git_tree_entry_dup",
          "location": {
            "file": "tree.h",
            "line": 157,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "dest",
              "type": "git_tree_entry **",
              "direction": "in",
              "comment": "pointer where to store the copy"
            },
            {
              "name": "source",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "tree entry to duplicate"
            }
          ],
          "comment": [
            "Duplicate a tree entry",
            "Create a copy of a tree entry. The returned copy is owned by the user,\n and must be freed explicitly with `git_tree_entry_free()`."
          ],
          "group": "tree"
        },
        "git_tree_entry_free": {
          "kind": "function",
          "name": "git_tree_entry_free",
          "location": {
            "file": "tree.h",
            "line": 168,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "entry",
              "type": "git_tree_entry *",
              "direction": "in",
              "comment": "The entry to free"
            }
          ],
          "comment": [
            "Free a user-owned tree entry",
            "IMPORTANT: This function is only needed for tree entries owned by the\n user, such as the ones returned by `git_tree_entry_dup()` or\n `git_tree_entry_bypath()`."
          ],
          "group": "tree"
        },
        "git_tree_entry_name": {
          "kind": "function",
          "name": "git_tree_entry_name",
          "location": {
            "file": "tree.h",
            "line": 176,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "the name of the file"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the filename of a tree entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_id": {
          "kind": "function",
          "name": "git_tree_entry_id",
          "location": {
            "file": "tree.h",
            "line": 184,
            "column": 29
          },
          "returns": {
            "type": "const git_oid *",
            "comment": "the oid of the object"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the id of the object pointed by the entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_type": {
          "kind": "function",
          "name": "git_tree_entry_type",
          "location": {
            "file": "tree.h",
            "line": 192,
            "column": 26
          },
          "returns": {
            "type": "git_object_t",
            "comment": "the type of the pointed object"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the type of the object pointed by the entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_filemode": {
          "kind": "function",
          "name": "git_tree_entry_filemode",
          "location": {
            "file": "tree.h",
            "line": 200,
            "column": 28
          },
          "returns": {
            "type": "git_filemode_t",
            "comment": "filemode as an integer"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the UNIX file attributes of a tree entry"
          ],
          "group": "tree"
        },
        "git_tree_entry_filemode_raw": {
          "kind": "function",
          "name": "git_tree_entry_filemode_raw",
          "location": {
            "file": "tree.h",
            "line": 212,
            "column": 28
          },
          "returns": {
            "type": "git_filemode_t",
            "comment": "filemode as an integer"
          },
          "params": [
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Get the raw UNIX file attributes of a tree entry",
            "This function does not perform any normalization and is only useful\n if you need to be able to recreate the original tree object."
          ],
          "group": "tree"
        },
        "git_tree_entry_cmp": {
          "kind": "function",
          "name": "git_tree_entry_cmp",
          "location": {
            "file": "tree.h",
            "line": 220,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "<\n0 if e1 is before e2, 0 if e1 == e2, >0 if e1 is after e2"
          },
          "params": [
            {
              "name": "e1",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "first tree entry"
            },
            {
              "name": "e2",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "second tree entry"
            }
          ],
          "comment": [
            "Compare two tree entries"
          ],
          "group": "tree"
        },
        "git_tree_entry_to_object": {
          "kind": "function",
          "name": "git_tree_entry_to_object",
          "location": {
            "file": "tree.h",
            "line": 232,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "object_out",
              "type": "git_object **",
              "direction": "in",
              "comment": "pointer to the converted object"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "repository where to lookup the pointed object"
            },
            {
              "name": "entry",
              "type": "const git_tree_entry *",
              "direction": "in",
              "comment": "a tree entry"
            }
          ],
          "comment": [
            "Convert a tree entry to the git_object it points to.",
            "You must call `git_object_free()` on the object when you are done with it."
          ],
          "group": "tree"
        },
        "git_treebuilder_new": {
          "kind": "function",
          "name": "git_treebuilder_new",
          "location": {
            "file": "tree.h",
            "line": 254,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "out",
              "type": "git_treebuilder **",
              "direction": "in",
              "comment": "Pointer where to store the tree builder"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository in which to store the object"
            },
            {
              "name": "source",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "Source tree to initialize the builder (optional)"
            }
          ],
          "comment": [
            "Create a new tree builder.",
            "The tree builder can be used to create or modify trees in memory and\n write them as tree objects to the database.",
            "If the `source` parameter is not NULL, the tree builder will be\n initialized with the entries of the given tree.",
            "If the `source` parameter is NULL, the tree builder will start with no\n entries and will have to be filled manually."
          ],
          "group": "tree"
        },
        "git_treebuilder_clear": {
          "kind": "function",
          "name": "git_treebuilder_clear",
          "location": {
            "file": "tree.h",
            "line": 263,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success; error code otherwise"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Builder to clear"
            }
          ],
          "comment": [
            "Clear all the entires in the builder"
          ],
          "group": "tree"
        },
        "git_treebuilder_entrycount": {
          "kind": "function",
          "name": "git_treebuilder_entrycount",
          "location": {
            "file": "tree.h",
            "line": 271,
            "column": 20
          },
          "returns": {
            "type": "size_t",
            "comment": "the number of entries in the treebuilder"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "a previously loaded treebuilder."
            }
          ],
          "comment": [
            "Get the number of entries listed in a treebuilder"
          ],
          "group": "tree"
        },
        "git_treebuilder_free": {
          "kind": "function",
          "name": "git_treebuilder_free",
          "location": {
            "file": "tree.h",
            "line": 282,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Builder to free"
            }
          ],
          "comment": [
            "Free a tree builder",
            "This will clear all the entries and free to builder.\n Failing to free the builder after you're done using it\n will result in a memory leak"
          ],
          "group": "tree"
        },
        "git_treebuilder_get": {
          "kind": "function",
          "name": "git_treebuilder_get",
          "location": {
            "file": "tree.h",
            "line": 294,
            "column": 36
          },
          "returns": {
            "type": "const git_tree_entry *",
            "comment": "pointer to the entry; NULL if not found"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the entry"
            }
          ],
          "comment": [
            "Get an entry from the builder from its filename",
            "The returned entry is owned by the builder and should\n not be freed manually."
          ],
          "group": "tree"
        },
        "git_treebuilder_insert": {
          "kind": "function",
          "name": "git_treebuilder_insert",
          "location": {
            "file": "tree.h",
            "line": 325,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "const git_tree_entry **",
              "direction": "in",
              "comment": "Pointer to store the entry (optional)"
            },
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "Filename of the entry"
            },
            {
              "name": "id",
              "type": "const git_oid *",
              "direction": "in",
              "comment": "SHA1 oid of the entry"
            },
            {
              "name": "filemode",
              "type": "git_filemode_t",
              "direction": "in",
              "comment": "Folder attributes of the entry. This parameter must\n\t\t\tbe valued with one of the following entries: 0040000, 0100644,\n\t\t\t0100755, 0120000 or 0160000.",
              "referenceType": "enum git_filemode_t"
            }
          ],
          "comment": [
            "Add or update an entry to the builder",
            "Insert a new entry for `filename` in the builder with the\n given attributes.",
            "If an entry named `filename` already exists, its attributes\n will be updated with the given ones.",
            "The optional pointer `out` can be used to retrieve a pointer to the\n newly created/updated entry.  Pass NULL if you do not need it. The\n pointer may not be valid past the next operation in this\n builder. Duplicate the entry if you want to keep it.",
            "By default the entry that you are inserting will be checked for\n validity; that it exists in the object database and is of the\n correct type.  If you do not want this behavior, set the\n `GIT_OPT_ENABLE_STRICT_OBJECT_CREATION` library option to false."
          ],
          "group": "tree"
        },
        "git_treebuilder_remove": {
          "kind": "function",
          "name": "git_treebuilder_remove",
          "location": {
            "file": "tree.h",
            "line": 338,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filename",
              "type": "const char *",
              "direction": "in",
              "comment": "Filename of the entry to remove"
            }
          ],
          "comment": [
            "Remove an entry from the builder by its filename"
          ],
          "group": "tree"
        },
        "git_treebuilder_filter_cb": {
          "kind": "callback",
          "name": "git_treebuilder_filter_cb",
          "type": "int (*)(const git_tree_entry *, void *)",
          "comment": [
            "Callback for git_treebuilder_filter",
            "The return value is treated as a boolean, with zero indicating that the\n entry should be left alone and any non-zero value meaning that the\n entry should be removed from the treebuilder list (i.e. filtered out)."
          ],
          "location": {
            "file": "tree.h",
            "line": 348,
            "column": 26
          },
          "params": [
            {
              "type": "const git_tree_entry *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "tree",
          "parameterTo": [
            "git_treebuilder_filter"
          ],
          "typedef": true
        },
        "git_treebuilder_filter": {
          "kind": "function",
          "name": "git_treebuilder_filter",
          "location": {
            "file": "tree.h",
            "line": 363,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero callback return value, or error code"
          },
          "params": [
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder"
            },
            {
              "name": "filter",
              "type": "git_treebuilder_filter_cb",
              "direction": "in",
              "comment": "Callback to filter entries",
              "referenceType": "int (*)(const git_tree_entry *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Extra data to pass to filter callback"
            }
          ],
          "comment": [
            "Selectively remove entries in the tree",
            "The `filter` callback will be called for each entry in the tree with a\n pointer to the entry and the provided `payload`; if the callback returns\n non-zero, the entry will be filtered (removed from the builder)."
          ],
          "group": "tree"
        },
        "git_treebuilder_write": {
          "kind": "function",
          "name": "git_treebuilder_write",
          "location": {
            "file": "tree.h",
            "line": 378,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "id",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer to store the OID of the newly written tree"
            },
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder to write"
            }
          ],
          "comment": [
            "Write the contents of the tree builder as a tree object",
            "The tree builder will be written to the given `repo`, and its\n identifying SHA1 hash will be stored in the `id` pointer."
          ],
          "group": "tree"
        },
        "git_treebuilder_write_with_buffer": {
          "kind": "function",
          "name": "git_treebuilder_write_with_buffer",
          "location": {
            "file": "tree.h",
            "line": 392,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "oid",
              "type": "git_oid *",
              "direction": "in",
              "comment": "Pointer to store the OID of the newly written tree"
            },
            {
              "name": "bld",
              "type": "git_treebuilder *",
              "direction": "in",
              "comment": "Tree builder to write"
            },
            {
              "name": "tree",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Shared buffer for writing the tree. Will be grown as necessary."
            }
          ],
          "comment": [
            "Write the contents of the tree builder as a tree object\n using a shared git_buf."
          ],
          "see": [
            "git_treebuilder_write"
          ],
          "group": "tree"
        },
        "git_treewalk_cb": {
          "kind": "callback",
          "name": "git_treewalk_cb",
          "type": "int (*)(const char *, const git_tree_entry *, void *)",
          "comment": [
            "Callback for the tree traversal method"
          ],
          "location": {
            "file": "tree.h",
            "line": 396,
            "column": 26
          },
          "params": [
            {
              "type": "const char *"
            },
            {
              "type": "const git_tree_entry *"
            },
            {
              "type": "void *"
            }
          ],
          "group": "tree",
          "parameterTo": [
            "git_tree_walk"
          ],
          "typedef": true
        },
        "git_treewalk_mode": {
          "kind": "enum",
          "name": "git_treewalk_mode",
          "referenceName": "git_treewalk_mode",
          "members": [
            {
              "name": "GIT_TREEWALK_PRE",
              "value": "0"
            },
            {
              "name": "GIT_TREEWALK_POST",
              "value": "1"
            }
          ],
          "comment": [
            "Tree traversal modes"
          ],
          "location": {
            "file": "tree.h",
            "line": 400,
            "column": 9
          },
          "group": "tree",
          "parameterTo": [
            "git_tree_walk"
          ]
        },
        "git_tree_walk": {
          "kind": "function",
          "name": "git_tree_walk",
          "location": {
            "file": "tree.h",
            "line": 422,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "tree",
              "type": "const git_tree *",
              "direction": "in",
              "comment": "The tree to walk"
            },
            {
              "name": "mode",
              "type": "git_treewalk_mode",
              "direction": "in",
              "comment": "Traversal mode (pre or post-order)",
              "referenceType": "enum git_treewalk_mode"
            },
            {
              "name": "callback",
              "type": "git_treewalk_cb",
              "direction": "in",
              "comment": "Function to call on each tree entry",
              "referenceType": "int (*)(const char *, const git_tree_entry *, void *)"
            },
            {
              "name": "payload",
              "type": "void *",
              "direction": "in",
              "comment": "Opaque pointer to be passed on each callback"
            }
          ],
          "comment": [
            "Traverse the entries in a tree and its subtrees in post or pre order.",
            "The entries will be traversed in the specified order, children subtrees\n will be automatically loaded as required, and the `callback` will be\n called once per entry with the current (relative) root for the entry and\n the entry data itself.",
            "If the callback returns a positive value, the passed entry will be\n skipped on the traversal (in pre mode). A negative value stops the walk."
          ],
          "group": "tree"
        },
        "git_tree_dup": {
          "kind": "function",
          "name": "git_tree_dup",
          "location": {
            "file": "tree.h",
            "line": 435,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_tree **",
              "direction": "in",
              "comment": "Pointer to store the copy of the tree"
            },
            {
              "name": "source",
              "type": "git_tree *",
              "direction": "in",
              "comment": "Original tree to copy"
            }
          ],
          "comment": [
            "Create an in-memory copy of a tree. The copy must be explicitly\n free'd or it will leak."
          ],
          "group": "tree"
        },
        "git_tree_update_t": {
          "kind": "enum",
          "name": "git_tree_update_t",
          "referenceName": "git_tree_update_t",
          "members": [
            {
              "name": "GIT_TREE_UPDATE_UPSERT",
              "comment": [
                "Update or insert an entry at the specified path"
              ]
            },
            {
              "name": "GIT_TREE_UPDATE_REMOVE",
              "comment": [
                "Remove an entry from the specified path"
              ]
            }
          ],
          "comment": [
            "The kind of update to perform"
          ],
          "location": {
            "file": "tree.h",
            "line": 440,
            "column": 9
          },
          "group": "tree"
        },
        "git_tree_update": {
          "kind": "struct",
          "name": "git_tree_update",
          "referenceName": "git_tree_update",
          "comment": [
            "An action to perform during the update of a tree"
          ],
          "members": [
            {
              "name": "action",
              "type": "git_tree_update_t",
              "comment": [
                "Update action. If it's an removal, only the path is looked at"
              ],
              "referenceType": "enum git_tree_update_t"
            },
            {
              "name": "id",
              "type": "git_oid",
              "comment": [
                "The entry's id"
              ],
              "referenceType": "struct git_oid"
            },
            {
              "name": "filemode",
              "type": "git_filemode_t",
              "comment": [
                "The filemode/kind of object"
              ],
              "referenceType": "enum git_filemode_t"
            },
            {
              "name": "path",
              "type": "const char *",
              "comment": [
                "The full path from the root tree"
              ]
            }
          ],
          "location": {
            "file": "tree.h",
            "line": 450,
            "column": 9
          },
          "group": "tree",
          "parameterTo": [
            "git_tree_create_updated"
          ]
        },
        "git_tree_create_updated": {
          "kind": "function",
          "name": "git_tree_create_updated",
          "location": {
            "file": "tree.h",
            "line": 481,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_oid *",
              "direction": "in",
              "comment": "id of the new tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repository in which to create the tree, must be the\n same as for `baseline`"
            },
            {
              "name": "baseline",
              "type": "git_tree *",
              "direction": "in",
              "comment": "the tree to base these changes on"
            },
            {
              "name": "nupdates",
              "type": "size_t",
              "direction": "in",
              "comment": "the number of elements in the update list"
            },
            {
              "name": "updates",
              "type": "const git_tree_update *",
              "direction": "in",
              "comment": "the list of updates to perform"
            }
          ],
          "comment": [
            "Create a tree based on another one with the specified modifications",
            "Given the `baseline` perform the changes described in the list of\n `updates` and create a new tree.",
            "This function is optimized for common file/directory addition, removal and\n replacement in trees. It is much more efficient than reading the tree into a\n `git_index` and modifying that, but in exchange it is not as flexible.",
            "Deleting and adding the same entry is undefined behaviour, changing\n a tree to a blob or viceversa is not supported."
          ],
          "group": "tree"
        },
        "git_tree_entry": {
          "kind": "struct",
          "name": "git_tree_entry",
          "referenceName": "struct git_tree_entry",
          "opaque": true,
          "comment": [
            "Representation of each one of the entries in a tree object."
          ],
          "location": {
            "file": "types.h",
            "line": 130,
            "column": 31
          },
          "group": "tree",
          "returnedBy": [
            "git_tree_entry_byname",
            "git_tree_entry_byindex",
            "git_tree_entry_byid",
            "git_treebuilder_get"
          ],
          "parameterTo": [
            "git_tree_entry_bypath",
            "git_tree_entry_dup",
            "git_tree_entry_free",
            "git_tree_entry_name",
            "git_tree_entry_id",
            "git_tree_entry_type",
            "git_tree_entry_filemode",
            "git_tree_entry_filemode_raw",
            "git_tree_entry_cmp",
            "git_tree_entry_to_object",
            "git_treebuilder_insert",
            "git_treebuilder_filter_cb",
            "git_treewalk_cb"
          ]
        },
        "git_tree": {
          "kind": "struct",
          "name": "git_tree",
          "referenceName": "struct git_tree",
          "opaque": true,
          "comment": [
            "Representation of a tree object."
          ],
          "location": {
            "file": "types.h",
            "line": 133,
            "column": 25
          },
          "group": "tree",
          "parameterTo": [
            "git_apply_to_tree",
            "git_commit_tree",
            "git_commit_create",
            "git_commit_create_v",
            "git_commit_amend",
            "git_commit_create_buffer",
            "git_diff_tree_to_tree",
            "git_diff_tree_to_index",
            "git_diff_tree_to_workdir",
            "git_diff_tree_to_workdir_with_index",
            "git_index_read_tree",
            "git_merge_trees",
            "git_pathspec_match_tree",
            "git_tree_lookup",
            "git_tree_lookup_prefix",
            "git_tree_free",
            "git_tree_id",
            "git_tree_owner",
            "git_tree_entrycount",
            "git_tree_entry_byname",
            "git_tree_entry_byindex",
            "git_tree_entry_byid",
            "git_tree_entry_bypath",
            "git_treebuilder_new",
            "git_tree_walk",
            "git_tree_dup",
            "git_tree_create_updated"
          ]
        },
        "git_treebuilder": {
          "kind": "struct",
          "name": "git_treebuilder",
          "referenceName": "struct git_treebuilder",
          "opaque": true,
          "comment": [
            "Constructor for in-memory trees"
          ],
          "location": {
            "file": "types.h",
            "line": 136,
            "column": 32
          },
          "group": "tree",
          "parameterTo": [
            "git_treebuilder_new",
            "git_treebuilder_clear",
            "git_treebuilder_entrycount",
            "git_treebuilder_free",
            "git_treebuilder_get",
            "git_treebuilder_insert",
            "git_treebuilder_remove",
            "git_treebuilder_filter",
            "git_treebuilder_write",
            "git_treebuilder_write_with_buffer"
          ]
        },
        "git_filemode_t": {
          "kind": "enum",
          "name": "git_filemode_t",
          "referenceName": "git_filemode_t",
          "members": [
            {
              "name": "GIT_FILEMODE_UNREADABLE",
              "value": "0"
            },
            {
              "name": "GIT_FILEMODE_TREE",
              "value": "16384"
            },
            {
              "name": "GIT_FILEMODE_BLOB",
              "value": "33188"
            },
            {
              "name": "GIT_FILEMODE_BLOB_EXECUTABLE",
              "value": "33261"
            },
            {
              "name": "GIT_FILEMODE_LINK",
              "value": "40960"
            },
            {
              "name": "GIT_FILEMODE_COMMIT",
              "value": "57344"
            }
          ],
          "comment": [
            "Valid modes for index and tree entries."
          ],
          "location": {
            "file": "types.h",
            "line": 213,
            "column": 9
          },
          "group": "tree",
          "returnedBy": [
            "git_tree_entry_filemode",
            "git_tree_entry_filemode_raw"
          ],
          "parameterTo": [
            "git_treebuilder_insert"
          ]
        }
      },
      "info": {
        "summary": "Git tree parsing, loading routines"
      }
    },
    "types": {
      "apis": {
        "git_off_t": {
          "kind": "alias",
          "name": "git_off_t",
          "type": "int64_t",
          "location": {
            "file": "types.h",
            "line": 61,
            "column": 17
          },
          "group": "types",
          "typedef": true
        },
        "git_time_t": {
          "kind": "alias",
          "name": "git_time_t",
          "type": "int64_t",
          "location": {
            "file": "types.h",
            "line": 62,
            "column": 17
          },
          "group": "types",
          "returnedBy": [
            "git_commit_time"
          ],
          "parameterTo": [
            "git_signature_new"
          ],
          "typedef": true
        },
        "git_time": {
          "kind": "struct",
          "name": "git_time",
          "referenceName": "git_time",
          "comment": [
            "Time in a signature"
          ],
          "members": [
            {
              "name": "time",
              "type": "git_time_t",
              "comment": [
                "time in seconds from epoch"
              ],
              "referenceType": "int64_t"
            },
            {
              "name": "offset",
              "type": "int",
              "comment": [
                "timezone offset, in minutes"
              ]
            },
            {
              "name": "sign",
              "type": "char",
              "comment": [
                "indicator for questionable '-0000' offsets in signature"
              ]
            }
          ],
          "location": {
            "file": "types.h",
            "line": 166,
            "column": 16
          },
          "group": "types"
        },
        "git_writestream": {
          "kind": "struct",
          "name": "git_writestream",
          "referenceName": "struct git_writestream",
          "comment": [
            "A type to write in a streaming fashion, for example, for filters."
          ],
          "members": [
            {
              "name": "write",
              "type": "int (*)(git_writestream *, const char *, size_t)"
            },
            {
              "name": "close",
              "type": "int (*)(git_writestream *)"
            },
            {
              "name": "free",
              "type": "void (*)(git_writestream *)"
            }
          ],
          "location": {
            "file": "types.h",
            "line": 350,
            "column": 8
          },
          "group": "types",
          "parameterTo": [
            "git_blob_create_from_stream",
            "git_blob_create_from_stream_commit",
            "git_blob_create_fromstream",
            "git_blob_create_fromstream_commit",
            "git_filter_list_stream_data",
            "git_filter_list_stream_file",
            "git_filter_list_stream_blob",
            "git_filter_stream_fn"
          ]
        }
      },
      "info": {
        "summary": "libgit2 base & compatibility types"
      }
    },
    "version": {
      "apis": {
        "LIBGIT2_VERSION": {
          "kind": "macro",
          "name": "LIBGIT2_VERSION",
          "location": {
            "file": "version.h",
            "line": 10,
            "column": 9
          },
          "value": "\"1.1.0\"",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_VER_MAJOR": {
          "kind": "macro",
          "name": "LIBGIT2_VER_MAJOR",
          "location": {
            "file": "version.h",
            "line": 11,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_VER_MINOR": {
          "kind": "macro",
          "name": "LIBGIT2_VER_MINOR",
          "location": {
            "file": "version.h",
            "line": 12,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_VER_REVISION": {
          "kind": "macro",
          "name": "LIBGIT2_VER_REVISION",
          "location": {
            "file": "version.h",
            "line": 13,
            "column": 9
          },
          "value": "0",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_VER_PATCH": {
          "kind": "macro",
          "name": "LIBGIT2_VER_PATCH",
          "location": {
            "file": "version.h",
            "line": 14,
            "column": 9
          },
          "value": "0",
          "comment": "",
          "group": "version"
        },
        "LIBGIT2_SOVERSION": {
          "kind": "macro",
          "name": "LIBGIT2_SOVERSION",
          "location": {
            "file": "version.h",
            "line": 16,
            "column": 9
          },
          "value": "\"1.1\"",
          "comment": "",
          "group": "version"
        }
      },
      "info": {}
    },
    "worktree": {
      "apis": {
        "git_worktree": {
          "kind": "struct",
          "name": "git_worktree",
          "referenceName": "struct git_worktree",
          "opaque": true,
          "comment": [
            "Representation of a working tree"
          ],
          "location": {
            "file": "types.h",
            "line": 112,
            "column": 29
          },
          "group": "worktree",
          "parameterTo": [
            "git_repository_open_from_worktree",
            "git_worktree_lookup",
            "git_worktree_open_from_repository",
            "git_worktree_free",
            "git_worktree_validate",
            "git_worktree_add",
            "git_worktree_lock",
            "git_worktree_unlock",
            "git_worktree_is_locked",
            "git_worktree_name",
            "git_worktree_path",
            "git_worktree_is_prunable",
            "git_worktree_prune"
          ]
        },
        "git_worktree_list": {
          "kind": "function",
          "name": "git_worktree_list",
          "location": {
            "file": "worktree.h",
            "line": 34,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_strarray *",
              "direction": "in",
              "comment": "pointer to the array of working tree names"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "the repo to use when listing working trees"
            }
          ],
          "comment": [
            "List names of linked working trees",
            "The returned list should be released with `git_strarray_free`\n when no longer needed."
          ],
          "group": "worktree"
        },
        "git_worktree_lookup": {
          "kind": "function",
          "name": "git_worktree_lookup",
          "location": {
            "file": "worktree.h",
            "line": 44,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_worktree **",
              "direction": "in",
              "comment": "Output pointer to looked up worktree or `NULL`"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "The repository containing worktrees"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the working tree to look up"
            }
          ],
          "comment": [
            "Lookup a working tree by its name for a given repository"
          ],
          "group": "worktree"
        },
        "git_worktree_open_from_repository": {
          "kind": "function",
          "name": "git_worktree_open_from_repository",
          "location": {
            "file": "worktree.h",
            "line": 56,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "out",
              "type": "git_worktree **",
              "direction": "in",
              "comment": "Out-pointer for the newly allocated worktree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository to look up worktree for"
            }
          ],
          "comment": [
            "Open a worktree of a given repository",
            "If a repository is not the main tree but a worktree, this\n function will look up the worktree inside the parent\n repository and create a new `git_worktree` structure."
          ],
          "group": "worktree"
        },
        "git_worktree_free": {
          "kind": "function",
          "name": "git_worktree_free",
          "location": {
            "file": "worktree.h",
            "line": 63,
            "column": 18
          },
          "returns": {
            "type": "void"
          },
          "params": [
            {
              "name": "wt",
              "type": "git_worktree *",
              "direction": "in",
              "comment": "worktree handle to close. If NULL nothing occurs."
            }
          ],
          "comment": [
            "Free a previously allocated worktree"
          ],
          "group": "worktree"
        },
        "git_worktree_validate": {
          "kind": "function",
          "name": "git_worktree_validate",
          "location": {
            "file": "worktree.h",
            "line": 75,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 when worktree is valid, error-code otherwise"
          },
          "params": [
            {
              "name": "wt",
              "type": "const git_worktree *",
              "direction": "in",
              "comment": "Worktree to check"
            }
          ],
          "comment": [
            "Check if worktree is valid",
            "A valid worktree requires both the git data structures inside\n the linked parent repository and the linked working copy to be\n present."
          ],
          "group": "worktree"
        },
        "git_worktree_add_options": {
          "kind": "struct",
          "name": "git_worktree_add_options",
          "referenceName": "git_worktree_add_options",
          "comment": [
            "Worktree add options structure",
            "Initialize with `GIT_WORKTREE_ADD_OPTIONS_INIT`. Alternatively, you can\n use `git_worktree_add_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "lock",
              "type": "int",
              "comment": [
                "lock newly created worktree"
              ]
            },
            {
              "name": "ref",
              "type": "git_reference *",
              "comment": [
                "reference to use for the new worktree HEAD"
              ]
            }
          ],
          "location": {
            "file": "worktree.h",
            "line": 84,
            "column": 16
          },
          "group": "worktree",
          "parameterTo": [
            "git_worktree_add_init_options",
            "git_worktree_add_options_init",
            "git_worktree_add"
          ]
        },
        "GIT_WORKTREE_ADD_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_WORKTREE_ADD_OPTIONS_VERSION",
          "location": {
            "file": "worktree.h",
            "line": 91,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "worktree"
        },
        "GIT_WORKTREE_ADD_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_WORKTREE_ADD_OPTIONS_INIT",
          "location": {
            "file": "worktree.h",
            "line": 92,
            "column": 9
          },
          "value": "{GIT_WORKTREE_ADD_OPTIONS_VERSION,0,NULL}",
          "comment": "",
          "group": "worktree"
        },
        "git_worktree_add_options_init": {
          "kind": "function",
          "name": "git_worktree_add_options_init",
          "location": {
            "file": "worktree.h",
            "line": 104,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_worktree_add_options *",
              "direction": "in",
              "comment": "The `git_worktree_add_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_WORKTREE_ADD_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_worktree_add_options structure",
            "Initializes a `git_worktree_add_options` with default values. Equivalent to\n creating an instance with `GIT_WORKTREE_ADD_OPTIONS_INIT`."
          ],
          "group": "worktree"
        },
        "git_worktree_add": {
          "kind": "function",
          "name": "git_worktree_add",
          "location": {
            "file": "worktree.h",
            "line": 121,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "out",
              "type": "git_worktree **",
              "direction": "in",
              "comment": "Output pointer containing new working tree"
            },
            {
              "name": "repo",
              "type": "git_repository *",
              "direction": "in",
              "comment": "Repository to create working tree for"
            },
            {
              "name": "name",
              "type": "const char *",
              "direction": "in",
              "comment": "Name of the working tree"
            },
            {
              "name": "path",
              "type": "const char *",
              "direction": "in",
              "comment": "Path to create working tree at"
            },
            {
              "name": "opts",
              "type": "const git_worktree_add_options *",
              "direction": "in",
              "comment": "Options to modify default behavior. May be NULL"
            }
          ],
          "comment": [
            "Add a new working tree",
            "Add a new working tree for the repository, that is create the\n required data structures inside the repository and check out\n the current HEAD at `path`"
          ],
          "group": "worktree"
        },
        "git_worktree_lock": {
          "kind": "function",
          "name": "git_worktree_lock",
          "location": {
            "file": "worktree.h",
            "line": 135,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, non-zero otherwise"
          },
          "params": [
            {
              "name": "wt",
              "type": "git_worktree *",
              "direction": "in",
              "comment": "Worktree to lock"
            },
            {
              "name": "reason",
              "type": "const char *",
              "direction": "in",
              "comment": "Reason why the working tree is being locked"
            }
          ],
          "comment": [
            "Lock worktree if not already locked",
            "Lock a worktree, optionally specifying a reason why the linked\n working tree is being locked."
          ],
          "group": "worktree"
        },
        "git_worktree_unlock": {
          "kind": "function",
          "name": "git_worktree_unlock",
          "location": {
            "file": "worktree.h",
            "line": 144,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 on success, 1 if worktree was not locked, error-code\n  otherwise"
          },
          "params": [
            {
              "name": "wt",
              "type": "git_worktree *",
              "direction": "in",
              "comment": "Worktree to unlock"
            }
          ],
          "comment": [
            "Unlock a locked worktree"
          ],
          "group": "worktree"
        },
        "git_worktree_is_locked": {
          "kind": "function",
          "name": "git_worktree_is_locked",
          "location": {
            "file": "worktree.h",
            "line": 158,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 when the working tree not locked, a value greater\n  than zero if it is locked, less than zero if there was an\n  error"
          },
          "params": [
            {
              "name": "reason",
              "type": "git_buf *",
              "direction": "in",
              "comment": "Buffer to store reason in. If NULL no reason is stored."
            },
            {
              "name": "wt",
              "type": "const git_worktree *",
              "direction": "in",
              "comment": "Worktree to check"
            }
          ],
          "comment": [
            "Check if worktree is locked",
            "A worktree may be locked if the linked working tree is stored\n on a portable device which is not available."
          ],
          "group": "worktree"
        },
        "git_worktree_name": {
          "kind": "function",
          "name": "git_worktree_name",
          "location": {
            "file": "worktree.h",
            "line": 167,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "The worktree's name. The pointer returned is valid for the\n  lifetime of the git_worktree"
          },
          "params": [
            {
              "name": "wt",
              "type": "const git_worktree *",
              "direction": "in",
              "comment": "Worktree to get the name for"
            }
          ],
          "comment": [
            "Retrieve the name of the worktree"
          ],
          "group": "worktree"
        },
        "git_worktree_path": {
          "kind": "function",
          "name": "git_worktree_path",
          "location": {
            "file": "worktree.h",
            "line": 176,
            "column": 26
          },
          "returns": {
            "type": "const char *",
            "comment": "The worktree's filesystem path. The pointer returned\n  is valid for the lifetime of the git_worktree."
          },
          "params": [
            {
              "name": "wt",
              "type": "const git_worktree *",
              "direction": "in",
              "comment": "Worktree to get the path for"
            }
          ],
          "comment": [
            "Retrieve the filesystem path for the worktree"
          ],
          "group": "worktree"
        },
        "git_worktree_prune_t": {
          "kind": "enum",
          "name": "git_worktree_prune_t",
          "referenceName": "git_worktree_prune_t",
          "members": [
            {
              "name": "GIT_WORKTREE_PRUNE_VALID"
            },
            {
              "name": "GIT_WORKTREE_PRUNE_LOCKED"
            },
            {
              "name": "GIT_WORKTREE_PRUNE_WORKING_TREE"
            }
          ],
          "comment": [
            "Flags which can be passed to git_worktree_prune to alter its\n behavior."
          ],
          "location": {
            "file": "worktree.h",
            "line": 182,
            "column": 9
          },
          "group": "worktree"
        },
        "git_worktree_prune_options": {
          "kind": "struct",
          "name": "git_worktree_prune_options",
          "referenceName": "git_worktree_prune_options",
          "comment": [
            "Worktree prune options structure",
            "Initialize with `GIT_WORKTREE_PRUNE_OPTIONS_INIT`. Alternatively, you can\n use `git_worktree_prune_options_init`."
          ],
          "members": [
            {
              "name": "version",
              "type": "unsigned int"
            },
            {
              "name": "flags",
              "type": "uint32_t"
            }
          ],
          "location": {
            "file": "worktree.h",
            "line": 198,
            "column": 16
          },
          "group": "worktree",
          "parameterTo": [
            "git_worktree_prune_init_options",
            "git_worktree_prune_options_init",
            "git_worktree_is_prunable",
            "git_worktree_prune"
          ]
        },
        "GIT_WORKTREE_PRUNE_OPTIONS_VERSION": {
          "kind": "macro",
          "name": "GIT_WORKTREE_PRUNE_OPTIONS_VERSION",
          "location": {
            "file": "worktree.h",
            "line": 204,
            "column": 9
          },
          "value": "1",
          "comment": "",
          "group": "worktree"
        },
        "GIT_WORKTREE_PRUNE_OPTIONS_INIT": {
          "kind": "macro",
          "name": "GIT_WORKTREE_PRUNE_OPTIONS_INIT",
          "location": {
            "file": "worktree.h",
            "line": 205,
            "column": 9
          },
          "value": "{GIT_WORKTREE_PRUNE_OPTIONS_VERSION,0}",
          "comment": "",
          "group": "worktree"
        },
        "git_worktree_prune_options_init": {
          "kind": "function",
          "name": "git_worktree_prune_options_init",
          "location": {
            "file": "worktree.h",
            "line": 217,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "Zero on success; -1 on failure."
          },
          "params": [
            {
              "name": "opts",
              "type": "git_worktree_prune_options *",
              "direction": "in",
              "comment": "The `git_worktree_prune_options` struct to initialize."
            },
            {
              "name": "version",
              "type": "unsigned int",
              "direction": "in",
              "comment": "The struct version; pass `GIT_WORKTREE_PRUNE_OPTIONS_VERSION`."
            }
          ],
          "comment": [
            "Initialize git_worktree_prune_options structure",
            "Initializes a `git_worktree_prune_options` with default values. Equivalent to\n creating an instance with `GIT_WORKTREE_PRUNE_OPTIONS_INIT`."
          ],
          "group": "worktree"
        },
        "git_worktree_is_prunable": {
          "kind": "function",
          "name": "git_worktree_is_prunable",
          "location": {
            "file": "worktree.h",
            "line": 235,
            "column": 17
          },
          "returns": {
            "type": "int"
          },
          "params": [
            {
              "name": "wt",
              "type": "git_worktree *"
            },
            {
              "name": "opts",
              "type": "git_worktree_prune_options *"
            }
          ],
          "comment": [
            "Is the worktree prunable with the given options?",
            "A worktree is not prunable in the following scenarios:",
            "- the worktree is linking to a valid on-disk worktree. The\n   `valid` member will cause this check to be ignored.\n - the worktree is locked. The `locked` flag will cause this\n   check to be ignored.",
            "If the worktree is not valid and not locked or if the above\n flags have been passed in, this function will return a\n positive value."
          ],
          "group": "worktree"
        },
        "git_worktree_prune": {
          "kind": "function",
          "name": "git_worktree_prune",
          "location": {
            "file": "worktree.h",
            "line": 250,
            "column": 17
          },
          "returns": {
            "type": "int",
            "comment": "0 or an error code"
          },
          "params": [
            {
              "name": "wt",
              "type": "git_worktree *",
              "direction": "in",
              "comment": "Worktree to prune"
            },
            {
              "name": "opts",
              "type": "git_worktree_prune_options *",
              "direction": "in",
              "comment": "Specifies which checks to override. See\n        `git_worktree_is_prunable`. May be NULL"
            }
          ],
          "comment": [
            "Prune working tree",
            "Prune the working tree, that is remove the git data\n structures on disk. The repository will only be pruned of\n `git_worktree_is_prunable` succeeds."
          ],
          "group": "worktree"
        }
      },
      "info": {
        "summary": "Git worktree related functions"
      }
    }
  }
}
